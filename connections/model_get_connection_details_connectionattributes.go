/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetConnectionDetailsConnectionattributes - Dynamic attributes based on connection type
type GetConnectionDetailsConnectionattributes struct {
	ADConnectionAttributes   *ADConnectionAttributes
	RESTConnectionAttributes *RESTConnectionAttributes
}

// ADConnectionAttributesAsGetConnectionDetailsConnectionattributes is a convenience function that returns ADConnectionAttributes wrapped in GetConnectionDetailsConnectionattributes
func ADConnectionAttributesAsGetConnectionDetailsConnectionattributes(v *ADConnectionAttributes) GetConnectionDetailsConnectionattributes {
	return GetConnectionDetailsConnectionattributes{
		ADConnectionAttributes: v,
	}
}

// RESTConnectionAttributesAsGetConnectionDetailsConnectionattributes is a convenience function that returns RESTConnectionAttributes wrapped in GetConnectionDetailsConnectionattributes
func RESTConnectionAttributesAsGetConnectionDetailsConnectionattributes(v *RESTConnectionAttributes) GetConnectionDetailsConnectionattributes {
	return GetConnectionDetailsConnectionattributes{
		RESTConnectionAttributes: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetConnectionDetailsConnectionattributes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ADConnectionAttributes
	err = newStrictDecoder(data).Decode(&dst.ADConnectionAttributes)
	if err == nil {
		jsonADConnectionAttributes, _ := json.Marshal(dst.ADConnectionAttributes)
		if string(jsonADConnectionAttributes) == "{}" { // empty struct
			dst.ADConnectionAttributes = nil
		} else {
			if err = validator.Validate(dst.ADConnectionAttributes); err != nil {
				dst.ADConnectionAttributes = nil
			} else {
				match++
			}
		}
	} else {
		dst.ADConnectionAttributes = nil
	}

	// try to unmarshal data into RESTConnectionAttributes
	err = newStrictDecoder(data).Decode(&dst.RESTConnectionAttributes)
	if err == nil {
		jsonRESTConnectionAttributes, _ := json.Marshal(dst.RESTConnectionAttributes)
		if string(jsonRESTConnectionAttributes) == "{}" { // empty struct
			dst.RESTConnectionAttributes = nil
		} else {
			if err = validator.Validate(dst.RESTConnectionAttributes); err != nil {
				dst.RESTConnectionAttributes = nil
			} else {
				match++
			}
		}
	} else {
		dst.RESTConnectionAttributes = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ADConnectionAttributes = nil
		dst.RESTConnectionAttributes = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetConnectionDetailsConnectionattributes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetConnectionDetailsConnectionattributes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetConnectionDetailsConnectionattributes) MarshalJSON() ([]byte, error) {
	if src.ADConnectionAttributes != nil {
		return json.Marshal(&src.ADConnectionAttributes)
	}

	if src.RESTConnectionAttributes != nil {
		return json.Marshal(&src.RESTConnectionAttributes)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetConnectionDetailsConnectionattributes) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ADConnectionAttributes != nil {
		return obj.ADConnectionAttributes
	}

	if obj.RESTConnectionAttributes != nil {
		return obj.RESTConnectionAttributes
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetConnectionDetailsConnectionattributes) GetActualInstanceValue() interface{} {
	if obj.ADConnectionAttributes != nil {
		return *obj.ADConnectionAttributes
	}

	if obj.RESTConnectionAttributes != nil {
		return *obj.RESTConnectionAttributes
	}

	// all schemas are nil
	return nil
}

type NullableGetConnectionDetailsConnectionattributes struct {
	value *GetConnectionDetailsConnectionattributes
	isSet bool
}

func (v NullableGetConnectionDetailsConnectionattributes) Get() *GetConnectionDetailsConnectionattributes {
	return v.value
}

func (v *NullableGetConnectionDetailsConnectionattributes) Set(val *GetConnectionDetailsConnectionattributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConnectionDetailsConnectionattributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConnectionDetailsConnectionattributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConnectionDetailsConnectionattributes(val *GetConnectionDetailsConnectionattributes) *NullableGetConnectionDetailsConnectionattributes {
	return &NullableGetConnectionDetailsConnectionattributes{value: val, isSet: true}
}

func (v NullableGetConnectionDetailsConnectionattributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConnectionDetailsConnectionattributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
