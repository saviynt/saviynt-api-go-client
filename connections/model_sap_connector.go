/*
testConnection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SAPConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SAPConnector{}

// SAPConnector struct for SAPConnector
type SAPConnector struct {
	BaseConnector
	// set it to TRUE if the Message Server is going to be used for connecting to SAP
	MESSAGESERVER *string `json:"MESSAGESERVER,omitempty"`
	// HostName for connection for Import
	JCO_ASHOST *string `json:"JCO_ASHOST,omitempty"`
	// System Number for the SAP Instance for Import
	JCO_SYSNR *string `json:"JCO_SYSNR,omitempty"`
	// Client Number for the SAP Instance for Import
	JCO_CLIENT *string `json:"JCO_CLIENT,omitempty"`
	// Username to connect to SAP using JCO for Import
	JCO_USER *string `json:"JCO_USER,omitempty"`
	// Password for connection for Import
	PASSWORD *string `json:"PASSWORD,omitempty"`
	// LANGUAGE for the SAP Instance for Import
	JCO_LANG *string `json:"JCO_LANG,omitempty"`
	// Message Server SystemID for connection for Import
	JCOR3NAME *string `json:"JCO_R3NAME,omitempty"`
	// Message Server Hostname for connection for Import
	JCO_MSHOST *string `json:"JCO_MSHOST,omitempty"`
	// Message Server Port Number for connection for Import
	JCO_MSSERV *string `json:"JCO_MSSERV,omitempty"`
	// Message Server logon Group connection for Import
	JCO_GROUP *string `json:"JCO_GROUP,omitempty"`
	// TRUE/FALSE, set it to TRUE if Secure Network Connection (SNC) is setup between ABAP and ASHOST
	SNC *string `json:"SNC,omitempty"`
	// Enable/Disable Secure Network Connection (SNC) Mode. 0 - Disabled, 1 - Enabled
	JCO_SNC_MODE *string `json:"JCO_SNC_MODE,omitempty"`
	// String used to generate secured certificate in SAP server to be used by Saviynt
	JCO_SNC_PARTNERNAME *string `json:"JCO_SNC_PARTNERNAME,omitempty"`
	// String used to generate the secured certificate on the server where Saviynt is deployed
	JCO_SNC_MYNAME *string `json:"JCO_SNC_MYNAME,omitempty"`
	// Location of SNC library on the Saviynt server
	JCO_SNC_LIBRARY *string `json:"JCO_SNC_LIBRARY,omitempty"`
	// The Quality of Protection Level
	JCO_SNC_QOP *string `json:"JCO_SNC_QOP,omitempty"`
	// Tables to be Imported
	TABLES *string `json:"TABLES,omitempty"`
	SYSTEMNAME *string `json:"SYSTEMNAME,omitempty"`
	// User group for all terminated users
	TERMINATEDUSERGROUP *string `json:"TERMINATEDUSERGROUP,omitempty"`
	// Action to take for the user roles when the user gets terminated or roles are removed
	TERMINATED_USER_ROLE_ACTION *string `json:"TERMINATED_USER_ROLE_ACTION,omitempty"`
	// JSON to specify the Field Value which will be used to Create the New Account,Objects
	CREATEACCOUNTJSON *string `json:"CREATEACCOUNTJSON,omitempty"`
	// HostName for connection for Provisioning
	PROV_JCO_ASHOST *string `json:"PROV_JCO_ASHOST,omitempty"`
	// System Number for the SAP Instance for Provisioning
	PROV_JCO_SYSNR *string `json:"PROV_JCO_SYSNR,omitempty"`
	// Client Number for the SAP Instance for Provisioning
	PROV_JCO_CLIENT *string `json:"PROV_JCO_CLIENT,omitempty"`
	// Username to connect to to SAP using JCO for Provisioning
	PROV_JCO_USER *string `json:"PROV_JCO_USER,omitempty"`
	// Password for connection for Provisioning
	PROV_PASSWORD *string `json:"PROV_PASSWORD,omitempty"`
	// LANGUAGE for the SAP Instance for Provisioning
	PROV_JCO_LANG *string `json:"PROV_JCO_LANG,omitempty"`
	// Message Server SystemID for connection for Provisioning
	PROVJCOR3NAME *string `json:"PROV_JCO_R3NAME,omitempty"`
	// Message Server Hostname for connection for Provisioning
	PROV_JCO_MSHOST *string `json:"PROV_JCO_MSHOST,omitempty"`
	// Message Server Port Number for connection for Provisioning
	PROV_JCO_MSSERV *string `json:"PROV_JCO_MSSERV,omitempty"`
	// Message Server logon Group connection for Provisioning
	PROV_JCO_GROUP *string `json:"PROV_JCO_GROUP,omitempty"`
	// Is CUA Enabled
	PROV_CUA_ENABLED *string `json:"PROV_CUA_ENABLED,omitempty"`
	// Property for PROV_CUA_SNC
	PROV_CUA_SNC *string `json:"PROV_CUA_SNC,omitempty"`
	// For CUA enabled if the user already exists should the Password be reset for accounts for other systems
	RESET_PWD_FOR_NEWACCOUNT *string `json:"RESET_PWD_FOR_NEWACCOUNT,omitempty"`
	// Set it to FALSE if while changing the password the productive password should be set
	ENFORCEPASSWORDCHANGE *string `json:"ENFORCEPASSWORDCHANGE,omitempty"`
	// Specify the Min length for the random password
	PASSWORD_MIN_LENGTH *string `json:"PASSWORD_MIN_LENGTH,omitempty"`
	// Specify the Max length for the random password
	PASSWORD_MAX_LENGTH *string `json:"PASSWORD_MAX_LENGTH,omitempty"`
	// Specify the Number of Upper case alphabets required for the random password
	PASSWORD_NOOFCAPSALPHA *string `json:"PASSWORD_NOOFCAPSALPHA,omitempty"`
	// Specify the Number of digits required for the random password 
	PASSWORD_NOOFDIGITS *string `json:"PASSWORD_NOOFDIGITS,omitempty"`
	// Specify the Number of special chars required for the random password
	PASSWORD_NOOFSPLCHARS *string `json:"PASSWORD_NOOFSPLCHARS,omitempty"`
	// JSON to specify the mapping for Reference table
	HANAREFTABLEJSON *string `json:"HANAREFTABLEJSON,omitempty"`
	// JSON Similar to Create Account to mention the changes that needs to be made at the user level after enabling the account
	ENABLEACCOUNTJSON *string `json:"ENABLEACCOUNTJSON,omitempty"`
	// JSON Similar to Create Account to mention the changes that needs to be made at the user level after updating the account
	UPDATEACCOUNTJSON *string `json:"UPDATEACCOUNTJSON,omitempty"`
	// Property for USERIMPORTJSON
	USERIMPORTJSON *string `json:"USERIMPORTJSON,omitempty"`
	// The attributes of statusAndThresholdConfig json
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	// set it to FALSE if using an older CUA System to not support setting sub-systems
	SETCUASYSTEM *string `json:"SETCUASYSTEM,omitempty"`
	// JSON similar to Update Account to mention SNC and other related changes that needs to be done 
	FIREFIGHTERID_GRANT_ACCESS_JSON *string `json:"FIREFIGHTERID_GRANT_ACCESS_JSON,omitempty"`
	// JSON similar to Update Account to reset SNC and other related changes that were done during GRANT
	FIREFIGHTERID_REVOKE_ACCESS_JSON *string `json:"FIREFIGHTERID_REVOKE_ACCESS_JSON,omitempty"`
	// Property for MODIFYUSERDATAJSON
	MODIFYUSERDATAJSON *string `json:"MODIFYUSERDATAJSON,omitempty"`
	// JSON to populate values for External SOD Evaluation
	EXTERNAL_SOD_EVAL_JSON *string `json:"EXTERNAL_SOD_EVAL_JSON,omitempty"`
	// Property for EXTERNAL_SOD_EVAL_JSON_DETAIL
	EXTERNAL_SOD_EVAL_JSON_DETAIL *string `json:"EXTERNAL_SOD_EVAL_JSON_DETAIL,omitempty"`
	// Property for LOGS_TABLE_FILTER
	LOGS_TABLE_FILTER *string `json:"LOGS_TABLE_FILTER,omitempty"`
	// JSON for PAM Bootstrap Configuration 
	PAM_CONFIG *string `json:"PAM_CONFIG,omitempty"`
	// Property for SAPTABLE_FILTER_LANG
	SAPTABLE_FILTER_LANG *string `json:"SAPTABLE_FILTER_LANG,omitempty"`
	// Based on the flag ''USE_ET_DATA_4_RETURN'' in SAP, set this value to make use of export parameter ET_DATA
	ALTERNATE_OUTPUT_PARAMETER_ET_DATA *string `json:"ALTERNATE_OUTPUT_PARAMETER_ET_DATA,omitempty"`
	// Property for AUDIT_LOG_JSON
	AUDIT_LOG_JSON *string `json:"AUDIT_LOG_JSON,omitempty"`
	// Property for ECC_OR_S4HANA
	ECCORS4HANA *string `json:"ECC_OR_S4HANA,omitempty"`
	// Property for DATA_IMPORT_FILTER
	DATA_IMPORT_FILTER *string `json:"DATA_IMPORT_FILTER,omitempty"`
	// Property for ConfigJSON
	ConfigJSON *string `json:"ConfigJSON,omitempty"`
}

type _SAPConnector SAPConnector

// NewSAPConnector instantiates a new SAPConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSAPConnector(connectiontype string) *SAPConnector {
	this := SAPConnector{}
	this.Connectiontype = connectiontype
	return &this
}

// NewSAPConnectorWithDefaults instantiates a new SAPConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSAPConnectorWithDefaults() *SAPConnector {
	this := SAPConnector{}
	return &this
}

// GetMESSAGESERVER returns the MESSAGESERVER field value if set, zero value otherwise.
func (o *SAPConnector) GetMESSAGESERVER() string {
	if o == nil || IsNil(o.MESSAGESERVER) {
		var ret string
		return ret
	}
	return *o.MESSAGESERVER
}

// GetMESSAGESERVEROk returns a tuple with the MESSAGESERVER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetMESSAGESERVEROk() (*string, bool) {
	if o == nil || IsNil(o.MESSAGESERVER) {
		return nil, false
	}
	return o.MESSAGESERVER, true
}

// HasMESSAGESERVER returns a boolean if a field has been set.
func (o *SAPConnector) HasMESSAGESERVER() bool {
	if o != nil && !IsNil(o.MESSAGESERVER) {
		return true
	}

	return false
}

// SetMESSAGESERVER gets a reference to the given string and assigns it to the MESSAGESERVER field.
func (o *SAPConnector) SetMESSAGESERVER(v string) {
	o.MESSAGESERVER = &v
}

// GetJCO_ASHOST returns the JCO_ASHOST field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_ASHOST() string {
	if o == nil || IsNil(o.JCO_ASHOST) {
		var ret string
		return ret
	}
	return *o.JCO_ASHOST
}

// GetJCO_ASHOSTOk returns a tuple with the JCO_ASHOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_ASHOSTOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_ASHOST) {
		return nil, false
	}
	return o.JCO_ASHOST, true
}

// HasJCO_ASHOST returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_ASHOST() bool {
	if o != nil && !IsNil(o.JCO_ASHOST) {
		return true
	}

	return false
}

// SetJCO_ASHOST gets a reference to the given string and assigns it to the JCO_ASHOST field.
func (o *SAPConnector) SetJCO_ASHOST(v string) {
	o.JCO_ASHOST = &v
}

// GetJCO_SYSNR returns the JCO_SYSNR field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SYSNR() string {
	if o == nil || IsNil(o.JCO_SYSNR) {
		var ret string
		return ret
	}
	return *o.JCO_SYSNR
}

// GetJCO_SYSNROk returns a tuple with the JCO_SYSNR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SYSNROk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SYSNR) {
		return nil, false
	}
	return o.JCO_SYSNR, true
}

// HasJCO_SYSNR returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SYSNR() bool {
	if o != nil && !IsNil(o.JCO_SYSNR) {
		return true
	}

	return false
}

// SetJCO_SYSNR gets a reference to the given string and assigns it to the JCO_SYSNR field.
func (o *SAPConnector) SetJCO_SYSNR(v string) {
	o.JCO_SYSNR = &v
}

// GetJCO_CLIENT returns the JCO_CLIENT field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_CLIENT() string {
	if o == nil || IsNil(o.JCO_CLIENT) {
		var ret string
		return ret
	}
	return *o.JCO_CLIENT
}

// GetJCO_CLIENTOk returns a tuple with the JCO_CLIENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_CLIENTOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_CLIENT) {
		return nil, false
	}
	return o.JCO_CLIENT, true
}

// HasJCO_CLIENT returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_CLIENT() bool {
	if o != nil && !IsNil(o.JCO_CLIENT) {
		return true
	}

	return false
}

// SetJCO_CLIENT gets a reference to the given string and assigns it to the JCO_CLIENT field.
func (o *SAPConnector) SetJCO_CLIENT(v string) {
	o.JCO_CLIENT = &v
}

// GetJCO_USER returns the JCO_USER field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_USER() string {
	if o == nil || IsNil(o.JCO_USER) {
		var ret string
		return ret
	}
	return *o.JCO_USER
}

// GetJCO_USEROk returns a tuple with the JCO_USER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_USEROk() (*string, bool) {
	if o == nil || IsNil(o.JCO_USER) {
		return nil, false
	}
	return o.JCO_USER, true
}

// HasJCO_USER returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_USER() bool {
	if o != nil && !IsNil(o.JCO_USER) {
		return true
	}

	return false
}

// SetJCO_USER gets a reference to the given string and assigns it to the JCO_USER field.
func (o *SAPConnector) SetJCO_USER(v string) {
	o.JCO_USER = &v
}

// GetPASSWORD returns the PASSWORD field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD() string {
	if o == nil || IsNil(o.PASSWORD) {
		var ret string
		return ret
	}
	return *o.PASSWORD
}

// GetPASSWORDOk returns a tuple with the PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORDOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD) {
		return nil, false
	}
	return o.PASSWORD, true
}

// HasPASSWORD returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD() bool {
	if o != nil && !IsNil(o.PASSWORD) {
		return true
	}

	return false
}

// SetPASSWORD gets a reference to the given string and assigns it to the PASSWORD field.
func (o *SAPConnector) SetPASSWORD(v string) {
	o.PASSWORD = &v
}

// GetJCO_LANG returns the JCO_LANG field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_LANG() string {
	if o == nil || IsNil(o.JCO_LANG) {
		var ret string
		return ret
	}
	return *o.JCO_LANG
}

// GetJCO_LANGOk returns a tuple with the JCO_LANG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_LANGOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_LANG) {
		return nil, false
	}
	return o.JCO_LANG, true
}

// HasJCO_LANG returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_LANG() bool {
	if o != nil && !IsNil(o.JCO_LANG) {
		return true
	}

	return false
}

// SetJCO_LANG gets a reference to the given string and assigns it to the JCO_LANG field.
func (o *SAPConnector) SetJCO_LANG(v string) {
	o.JCO_LANG = &v
}

// GetJCOR3NAME returns the JCOR3NAME field value if set, zero value otherwise.
func (o *SAPConnector) GetJCOR3NAME() string {
	if o == nil || IsNil(o.JCOR3NAME) {
		var ret string
		return ret
	}
	return *o.JCOR3NAME
}

// GetJCOR3NAMEOk returns a tuple with the JCOR3NAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCOR3NAMEOk() (*string, bool) {
	if o == nil || IsNil(o.JCOR3NAME) {
		return nil, false
	}
	return o.JCOR3NAME, true
}

// HasJCOR3NAME returns a boolean if a field has been set.
func (o *SAPConnector) HasJCOR3NAME() bool {
	if o != nil && !IsNil(o.JCOR3NAME) {
		return true
	}

	return false
}

// SetJCOR3NAME gets a reference to the given string and assigns it to the JCOR3NAME field.
func (o *SAPConnector) SetJCOR3NAME(v string) {
	o.JCOR3NAME = &v
}

// GetJCO_MSHOST returns the JCO_MSHOST field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_MSHOST() string {
	if o == nil || IsNil(o.JCO_MSHOST) {
		var ret string
		return ret
	}
	return *o.JCO_MSHOST
}

// GetJCO_MSHOSTOk returns a tuple with the JCO_MSHOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_MSHOSTOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_MSHOST) {
		return nil, false
	}
	return o.JCO_MSHOST, true
}

// HasJCO_MSHOST returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_MSHOST() bool {
	if o != nil && !IsNil(o.JCO_MSHOST) {
		return true
	}

	return false
}

// SetJCO_MSHOST gets a reference to the given string and assigns it to the JCO_MSHOST field.
func (o *SAPConnector) SetJCO_MSHOST(v string) {
	o.JCO_MSHOST = &v
}

// GetJCO_MSSERV returns the JCO_MSSERV field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_MSSERV() string {
	if o == nil || IsNil(o.JCO_MSSERV) {
		var ret string
		return ret
	}
	return *o.JCO_MSSERV
}

// GetJCO_MSSERVOk returns a tuple with the JCO_MSSERV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_MSSERVOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_MSSERV) {
		return nil, false
	}
	return o.JCO_MSSERV, true
}

// HasJCO_MSSERV returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_MSSERV() bool {
	if o != nil && !IsNil(o.JCO_MSSERV) {
		return true
	}

	return false
}

// SetJCO_MSSERV gets a reference to the given string and assigns it to the JCO_MSSERV field.
func (o *SAPConnector) SetJCO_MSSERV(v string) {
	o.JCO_MSSERV = &v
}

// GetJCO_GROUP returns the JCO_GROUP field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_GROUP() string {
	if o == nil || IsNil(o.JCO_GROUP) {
		var ret string
		return ret
	}
	return *o.JCO_GROUP
}

// GetJCO_GROUPOk returns a tuple with the JCO_GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_GROUPOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_GROUP) {
		return nil, false
	}
	return o.JCO_GROUP, true
}

// HasJCO_GROUP returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_GROUP() bool {
	if o != nil && !IsNil(o.JCO_GROUP) {
		return true
	}

	return false
}

// SetJCO_GROUP gets a reference to the given string and assigns it to the JCO_GROUP field.
func (o *SAPConnector) SetJCO_GROUP(v string) {
	o.JCO_GROUP = &v
}

// GetSNC returns the SNC field value if set, zero value otherwise.
func (o *SAPConnector) GetSNC() string {
	if o == nil || IsNil(o.SNC) {
		var ret string
		return ret
	}
	return *o.SNC
}

// GetSNCOk returns a tuple with the SNC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetSNCOk() (*string, bool) {
	if o == nil || IsNil(o.SNC) {
		return nil, false
	}
	return o.SNC, true
}

// HasSNC returns a boolean if a field has been set.
func (o *SAPConnector) HasSNC() bool {
	if o != nil && !IsNil(o.SNC) {
		return true
	}

	return false
}

// SetSNC gets a reference to the given string and assigns it to the SNC field.
func (o *SAPConnector) SetSNC(v string) {
	o.SNC = &v
}

// GetJCO_SNC_MODE returns the JCO_SNC_MODE field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SNC_MODE() string {
	if o == nil || IsNil(o.JCO_SNC_MODE) {
		var ret string
		return ret
	}
	return *o.JCO_SNC_MODE
}

// GetJCO_SNC_MODEOk returns a tuple with the JCO_SNC_MODE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SNC_MODEOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SNC_MODE) {
		return nil, false
	}
	return o.JCO_SNC_MODE, true
}

// HasJCO_SNC_MODE returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SNC_MODE() bool {
	if o != nil && !IsNil(o.JCO_SNC_MODE) {
		return true
	}

	return false
}

// SetJCO_SNC_MODE gets a reference to the given string and assigns it to the JCO_SNC_MODE field.
func (o *SAPConnector) SetJCO_SNC_MODE(v string) {
	o.JCO_SNC_MODE = &v
}

// GetJCO_SNC_PARTNERNAME returns the JCO_SNC_PARTNERNAME field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SNC_PARTNERNAME() string {
	if o == nil || IsNil(o.JCO_SNC_PARTNERNAME) {
		var ret string
		return ret
	}
	return *o.JCO_SNC_PARTNERNAME
}

// GetJCO_SNC_PARTNERNAMEOk returns a tuple with the JCO_SNC_PARTNERNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SNC_PARTNERNAMEOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SNC_PARTNERNAME) {
		return nil, false
	}
	return o.JCO_SNC_PARTNERNAME, true
}

// HasJCO_SNC_PARTNERNAME returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SNC_PARTNERNAME() bool {
	if o != nil && !IsNil(o.JCO_SNC_PARTNERNAME) {
		return true
	}

	return false
}

// SetJCO_SNC_PARTNERNAME gets a reference to the given string and assigns it to the JCO_SNC_PARTNERNAME field.
func (o *SAPConnector) SetJCO_SNC_PARTNERNAME(v string) {
	o.JCO_SNC_PARTNERNAME = &v
}

// GetJCO_SNC_MYNAME returns the JCO_SNC_MYNAME field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SNC_MYNAME() string {
	if o == nil || IsNil(o.JCO_SNC_MYNAME) {
		var ret string
		return ret
	}
	return *o.JCO_SNC_MYNAME
}

// GetJCO_SNC_MYNAMEOk returns a tuple with the JCO_SNC_MYNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SNC_MYNAMEOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SNC_MYNAME) {
		return nil, false
	}
	return o.JCO_SNC_MYNAME, true
}

// HasJCO_SNC_MYNAME returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SNC_MYNAME() bool {
	if o != nil && !IsNil(o.JCO_SNC_MYNAME) {
		return true
	}

	return false
}

// SetJCO_SNC_MYNAME gets a reference to the given string and assigns it to the JCO_SNC_MYNAME field.
func (o *SAPConnector) SetJCO_SNC_MYNAME(v string) {
	o.JCO_SNC_MYNAME = &v
}

// GetJCO_SNC_LIBRARY returns the JCO_SNC_LIBRARY field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SNC_LIBRARY() string {
	if o == nil || IsNil(o.JCO_SNC_LIBRARY) {
		var ret string
		return ret
	}
	return *o.JCO_SNC_LIBRARY
}

// GetJCO_SNC_LIBRARYOk returns a tuple with the JCO_SNC_LIBRARY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SNC_LIBRARYOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SNC_LIBRARY) {
		return nil, false
	}
	return o.JCO_SNC_LIBRARY, true
}

// HasJCO_SNC_LIBRARY returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SNC_LIBRARY() bool {
	if o != nil && !IsNil(o.JCO_SNC_LIBRARY) {
		return true
	}

	return false
}

// SetJCO_SNC_LIBRARY gets a reference to the given string and assigns it to the JCO_SNC_LIBRARY field.
func (o *SAPConnector) SetJCO_SNC_LIBRARY(v string) {
	o.JCO_SNC_LIBRARY = &v
}

// GetJCO_SNC_QOP returns the JCO_SNC_QOP field value if set, zero value otherwise.
func (o *SAPConnector) GetJCO_SNC_QOP() string {
	if o == nil || IsNil(o.JCO_SNC_QOP) {
		var ret string
		return ret
	}
	return *o.JCO_SNC_QOP
}

// GetJCO_SNC_QOPOk returns a tuple with the JCO_SNC_QOP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetJCO_SNC_QOPOk() (*string, bool) {
	if o == nil || IsNil(o.JCO_SNC_QOP) {
		return nil, false
	}
	return o.JCO_SNC_QOP, true
}

// HasJCO_SNC_QOP returns a boolean if a field has been set.
func (o *SAPConnector) HasJCO_SNC_QOP() bool {
	if o != nil && !IsNil(o.JCO_SNC_QOP) {
		return true
	}

	return false
}

// SetJCO_SNC_QOP gets a reference to the given string and assigns it to the JCO_SNC_QOP field.
func (o *SAPConnector) SetJCO_SNC_QOP(v string) {
	o.JCO_SNC_QOP = &v
}

// GetTABLES returns the TABLES field value if set, zero value otherwise.
func (o *SAPConnector) GetTABLES() string {
	if o == nil || IsNil(o.TABLES) {
		var ret string
		return ret
	}
	return *o.TABLES
}

// GetTABLESOk returns a tuple with the TABLES field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetTABLESOk() (*string, bool) {
	if o == nil || IsNil(o.TABLES) {
		return nil, false
	}
	return o.TABLES, true
}

// HasTABLES returns a boolean if a field has been set.
func (o *SAPConnector) HasTABLES() bool {
	if o != nil && !IsNil(o.TABLES) {
		return true
	}

	return false
}

// SetTABLES gets a reference to the given string and assigns it to the TABLES field.
func (o *SAPConnector) SetTABLES(v string) {
	o.TABLES = &v
}

// GetSYSTEMNAME returns the SYSTEMNAME field value if set, zero value otherwise.
func (o *SAPConnector) GetSYSTEMNAME() string {
	if o == nil || IsNil(o.SYSTEMNAME) {
		var ret string
		return ret
	}
	return *o.SYSTEMNAME
}

// GetSYSTEMNAMEOk returns a tuple with the SYSTEMNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetSYSTEMNAMEOk() (*string, bool) {
	if o == nil || IsNil(o.SYSTEMNAME) {
		return nil, false
	}
	return o.SYSTEMNAME, true
}

// HasSYSTEMNAME returns a boolean if a field has been set.
func (o *SAPConnector) HasSYSTEMNAME() bool {
	if o != nil && !IsNil(o.SYSTEMNAME) {
		return true
	}

	return false
}

// SetSYSTEMNAME gets a reference to the given string and assigns it to the SYSTEMNAME field.
func (o *SAPConnector) SetSYSTEMNAME(v string) {
	o.SYSTEMNAME = &v
}

// GetTERMINATEDUSERGROUP returns the TERMINATEDUSERGROUP field value if set, zero value otherwise.
func (o *SAPConnector) GetTERMINATEDUSERGROUP() string {
	if o == nil || IsNil(o.TERMINATEDUSERGROUP) {
		var ret string
		return ret
	}
	return *o.TERMINATEDUSERGROUP
}

// GetTERMINATEDUSERGROUPOk returns a tuple with the TERMINATEDUSERGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetTERMINATEDUSERGROUPOk() (*string, bool) {
	if o == nil || IsNil(o.TERMINATEDUSERGROUP) {
		return nil, false
	}
	return o.TERMINATEDUSERGROUP, true
}

// HasTERMINATEDUSERGROUP returns a boolean if a field has been set.
func (o *SAPConnector) HasTERMINATEDUSERGROUP() bool {
	if o != nil && !IsNil(o.TERMINATEDUSERGROUP) {
		return true
	}

	return false
}

// SetTERMINATEDUSERGROUP gets a reference to the given string and assigns it to the TERMINATEDUSERGROUP field.
func (o *SAPConnector) SetTERMINATEDUSERGROUP(v string) {
	o.TERMINATEDUSERGROUP = &v
}

// GetTERMINATED_USER_ROLE_ACTION returns the TERMINATED_USER_ROLE_ACTION field value if set, zero value otherwise.
func (o *SAPConnector) GetTERMINATED_USER_ROLE_ACTION() string {
	if o == nil || IsNil(o.TERMINATED_USER_ROLE_ACTION) {
		var ret string
		return ret
	}
	return *o.TERMINATED_USER_ROLE_ACTION
}

// GetTERMINATED_USER_ROLE_ACTIONOk returns a tuple with the TERMINATED_USER_ROLE_ACTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetTERMINATED_USER_ROLE_ACTIONOk() (*string, bool) {
	if o == nil || IsNil(o.TERMINATED_USER_ROLE_ACTION) {
		return nil, false
	}
	return o.TERMINATED_USER_ROLE_ACTION, true
}

// HasTERMINATED_USER_ROLE_ACTION returns a boolean if a field has been set.
func (o *SAPConnector) HasTERMINATED_USER_ROLE_ACTION() bool {
	if o != nil && !IsNil(o.TERMINATED_USER_ROLE_ACTION) {
		return true
	}

	return false
}

// SetTERMINATED_USER_ROLE_ACTION gets a reference to the given string and assigns it to the TERMINATED_USER_ROLE_ACTION field.
func (o *SAPConnector) SetTERMINATED_USER_ROLE_ACTION(v string) {
	o.TERMINATED_USER_ROLE_ACTION = &v
}

// GetCREATEACCOUNTJSON returns the CREATEACCOUNTJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetCREATEACCOUNTJSON() string {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.CREATEACCOUNTJSON
}

// GetCREATEACCOUNTJSONOk returns a tuple with the CREATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetCREATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		return nil, false
	}
	return o.CREATEACCOUNTJSON, true
}

// HasCREATEACCOUNTJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasCREATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.CREATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetCREATEACCOUNTJSON gets a reference to the given string and assigns it to the CREATEACCOUNTJSON field.
func (o *SAPConnector) SetCREATEACCOUNTJSON(v string) {
	o.CREATEACCOUNTJSON = &v
}

// GetPROV_JCO_ASHOST returns the PROV_JCO_ASHOST field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_ASHOST() string {
	if o == nil || IsNil(o.PROV_JCO_ASHOST) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_ASHOST
}

// GetPROV_JCO_ASHOSTOk returns a tuple with the PROV_JCO_ASHOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_ASHOSTOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_ASHOST) {
		return nil, false
	}
	return o.PROV_JCO_ASHOST, true
}

// HasPROV_JCO_ASHOST returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_ASHOST() bool {
	if o != nil && !IsNil(o.PROV_JCO_ASHOST) {
		return true
	}

	return false
}

// SetPROV_JCO_ASHOST gets a reference to the given string and assigns it to the PROV_JCO_ASHOST field.
func (o *SAPConnector) SetPROV_JCO_ASHOST(v string) {
	o.PROV_JCO_ASHOST = &v
}

// GetPROV_JCO_SYSNR returns the PROV_JCO_SYSNR field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_SYSNR() string {
	if o == nil || IsNil(o.PROV_JCO_SYSNR) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_SYSNR
}

// GetPROV_JCO_SYSNROk returns a tuple with the PROV_JCO_SYSNR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_SYSNROk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_SYSNR) {
		return nil, false
	}
	return o.PROV_JCO_SYSNR, true
}

// HasPROV_JCO_SYSNR returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_SYSNR() bool {
	if o != nil && !IsNil(o.PROV_JCO_SYSNR) {
		return true
	}

	return false
}

// SetPROV_JCO_SYSNR gets a reference to the given string and assigns it to the PROV_JCO_SYSNR field.
func (o *SAPConnector) SetPROV_JCO_SYSNR(v string) {
	o.PROV_JCO_SYSNR = &v
}

// GetPROV_JCO_CLIENT returns the PROV_JCO_CLIENT field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_CLIENT() string {
	if o == nil || IsNil(o.PROV_JCO_CLIENT) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_CLIENT
}

// GetPROV_JCO_CLIENTOk returns a tuple with the PROV_JCO_CLIENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_CLIENTOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_CLIENT) {
		return nil, false
	}
	return o.PROV_JCO_CLIENT, true
}

// HasPROV_JCO_CLIENT returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_CLIENT() bool {
	if o != nil && !IsNil(o.PROV_JCO_CLIENT) {
		return true
	}

	return false
}

// SetPROV_JCO_CLIENT gets a reference to the given string and assigns it to the PROV_JCO_CLIENT field.
func (o *SAPConnector) SetPROV_JCO_CLIENT(v string) {
	o.PROV_JCO_CLIENT = &v
}

// GetPROV_JCO_USER returns the PROV_JCO_USER field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_USER() string {
	if o == nil || IsNil(o.PROV_JCO_USER) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_USER
}

// GetPROV_JCO_USEROk returns a tuple with the PROV_JCO_USER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_USEROk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_USER) {
		return nil, false
	}
	return o.PROV_JCO_USER, true
}

// HasPROV_JCO_USER returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_USER() bool {
	if o != nil && !IsNil(o.PROV_JCO_USER) {
		return true
	}

	return false
}

// SetPROV_JCO_USER gets a reference to the given string and assigns it to the PROV_JCO_USER field.
func (o *SAPConnector) SetPROV_JCO_USER(v string) {
	o.PROV_JCO_USER = &v
}

// GetPROV_PASSWORD returns the PROV_PASSWORD field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_PASSWORD() string {
	if o == nil || IsNil(o.PROV_PASSWORD) {
		var ret string
		return ret
	}
	return *o.PROV_PASSWORD
}

// GetPROV_PASSWORDOk returns a tuple with the PROV_PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_PASSWORDOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_PASSWORD) {
		return nil, false
	}
	return o.PROV_PASSWORD, true
}

// HasPROV_PASSWORD returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_PASSWORD() bool {
	if o != nil && !IsNil(o.PROV_PASSWORD) {
		return true
	}

	return false
}

// SetPROV_PASSWORD gets a reference to the given string and assigns it to the PROV_PASSWORD field.
func (o *SAPConnector) SetPROV_PASSWORD(v string) {
	o.PROV_PASSWORD = &v
}

// GetPROV_JCO_LANG returns the PROV_JCO_LANG field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_LANG() string {
	if o == nil || IsNil(o.PROV_JCO_LANG) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_LANG
}

// GetPROV_JCO_LANGOk returns a tuple with the PROV_JCO_LANG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_LANGOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_LANG) {
		return nil, false
	}
	return o.PROV_JCO_LANG, true
}

// HasPROV_JCO_LANG returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_LANG() bool {
	if o != nil && !IsNil(o.PROV_JCO_LANG) {
		return true
	}

	return false
}

// SetPROV_JCO_LANG gets a reference to the given string and assigns it to the PROV_JCO_LANG field.
func (o *SAPConnector) SetPROV_JCO_LANG(v string) {
	o.PROV_JCO_LANG = &v
}

// GetPROVJCOR3NAME returns the PROVJCOR3NAME field value if set, zero value otherwise.
func (o *SAPConnector) GetPROVJCOR3NAME() string {
	if o == nil || IsNil(o.PROVJCOR3NAME) {
		var ret string
		return ret
	}
	return *o.PROVJCOR3NAME
}

// GetPROVJCOR3NAMEOk returns a tuple with the PROVJCOR3NAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROVJCOR3NAMEOk() (*string, bool) {
	if o == nil || IsNil(o.PROVJCOR3NAME) {
		return nil, false
	}
	return o.PROVJCOR3NAME, true
}

// HasPROVJCOR3NAME returns a boolean if a field has been set.
func (o *SAPConnector) HasPROVJCOR3NAME() bool {
	if o != nil && !IsNil(o.PROVJCOR3NAME) {
		return true
	}

	return false
}

// SetPROVJCOR3NAME gets a reference to the given string and assigns it to the PROVJCOR3NAME field.
func (o *SAPConnector) SetPROVJCOR3NAME(v string) {
	o.PROVJCOR3NAME = &v
}

// GetPROV_JCO_MSHOST returns the PROV_JCO_MSHOST field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_MSHOST() string {
	if o == nil || IsNil(o.PROV_JCO_MSHOST) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_MSHOST
}

// GetPROV_JCO_MSHOSTOk returns a tuple with the PROV_JCO_MSHOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_MSHOSTOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_MSHOST) {
		return nil, false
	}
	return o.PROV_JCO_MSHOST, true
}

// HasPROV_JCO_MSHOST returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_MSHOST() bool {
	if o != nil && !IsNil(o.PROV_JCO_MSHOST) {
		return true
	}

	return false
}

// SetPROV_JCO_MSHOST gets a reference to the given string and assigns it to the PROV_JCO_MSHOST field.
func (o *SAPConnector) SetPROV_JCO_MSHOST(v string) {
	o.PROV_JCO_MSHOST = &v
}

// GetPROV_JCO_MSSERV returns the PROV_JCO_MSSERV field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_MSSERV() string {
	if o == nil || IsNil(o.PROV_JCO_MSSERV) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_MSSERV
}

// GetPROV_JCO_MSSERVOk returns a tuple with the PROV_JCO_MSSERV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_MSSERVOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_MSSERV) {
		return nil, false
	}
	return o.PROV_JCO_MSSERV, true
}

// HasPROV_JCO_MSSERV returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_MSSERV() bool {
	if o != nil && !IsNil(o.PROV_JCO_MSSERV) {
		return true
	}

	return false
}

// SetPROV_JCO_MSSERV gets a reference to the given string and assigns it to the PROV_JCO_MSSERV field.
func (o *SAPConnector) SetPROV_JCO_MSSERV(v string) {
	o.PROV_JCO_MSSERV = &v
}

// GetPROV_JCO_GROUP returns the PROV_JCO_GROUP field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_JCO_GROUP() string {
	if o == nil || IsNil(o.PROV_JCO_GROUP) {
		var ret string
		return ret
	}
	return *o.PROV_JCO_GROUP
}

// GetPROV_JCO_GROUPOk returns a tuple with the PROV_JCO_GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_JCO_GROUPOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_JCO_GROUP) {
		return nil, false
	}
	return o.PROV_JCO_GROUP, true
}

// HasPROV_JCO_GROUP returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_JCO_GROUP() bool {
	if o != nil && !IsNil(o.PROV_JCO_GROUP) {
		return true
	}

	return false
}

// SetPROV_JCO_GROUP gets a reference to the given string and assigns it to the PROV_JCO_GROUP field.
func (o *SAPConnector) SetPROV_JCO_GROUP(v string) {
	o.PROV_JCO_GROUP = &v
}

// GetPROV_CUA_ENABLED returns the PROV_CUA_ENABLED field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_CUA_ENABLED() string {
	if o == nil || IsNil(o.PROV_CUA_ENABLED) {
		var ret string
		return ret
	}
	return *o.PROV_CUA_ENABLED
}

// GetPROV_CUA_ENABLEDOk returns a tuple with the PROV_CUA_ENABLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_CUA_ENABLEDOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_CUA_ENABLED) {
		return nil, false
	}
	return o.PROV_CUA_ENABLED, true
}

// HasPROV_CUA_ENABLED returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_CUA_ENABLED() bool {
	if o != nil && !IsNil(o.PROV_CUA_ENABLED) {
		return true
	}

	return false
}

// SetPROV_CUA_ENABLED gets a reference to the given string and assigns it to the PROV_CUA_ENABLED field.
func (o *SAPConnector) SetPROV_CUA_ENABLED(v string) {
	o.PROV_CUA_ENABLED = &v
}

// GetPROV_CUA_SNC returns the PROV_CUA_SNC field value if set, zero value otherwise.
func (o *SAPConnector) GetPROV_CUA_SNC() string {
	if o == nil || IsNil(o.PROV_CUA_SNC) {
		var ret string
		return ret
	}
	return *o.PROV_CUA_SNC
}

// GetPROV_CUA_SNCOk returns a tuple with the PROV_CUA_SNC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPROV_CUA_SNCOk() (*string, bool) {
	if o == nil || IsNil(o.PROV_CUA_SNC) {
		return nil, false
	}
	return o.PROV_CUA_SNC, true
}

// HasPROV_CUA_SNC returns a boolean if a field has been set.
func (o *SAPConnector) HasPROV_CUA_SNC() bool {
	if o != nil && !IsNil(o.PROV_CUA_SNC) {
		return true
	}

	return false
}

// SetPROV_CUA_SNC gets a reference to the given string and assigns it to the PROV_CUA_SNC field.
func (o *SAPConnector) SetPROV_CUA_SNC(v string) {
	o.PROV_CUA_SNC = &v
}

// GetRESET_PWD_FOR_NEWACCOUNT returns the RESET_PWD_FOR_NEWACCOUNT field value if set, zero value otherwise.
func (o *SAPConnector) GetRESET_PWD_FOR_NEWACCOUNT() string {
	if o == nil || IsNil(o.RESET_PWD_FOR_NEWACCOUNT) {
		var ret string
		return ret
	}
	return *o.RESET_PWD_FOR_NEWACCOUNT
}

// GetRESET_PWD_FOR_NEWACCOUNTOk returns a tuple with the RESET_PWD_FOR_NEWACCOUNT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetRESET_PWD_FOR_NEWACCOUNTOk() (*string, bool) {
	if o == nil || IsNil(o.RESET_PWD_FOR_NEWACCOUNT) {
		return nil, false
	}
	return o.RESET_PWD_FOR_NEWACCOUNT, true
}

// HasRESET_PWD_FOR_NEWACCOUNT returns a boolean if a field has been set.
func (o *SAPConnector) HasRESET_PWD_FOR_NEWACCOUNT() bool {
	if o != nil && !IsNil(o.RESET_PWD_FOR_NEWACCOUNT) {
		return true
	}

	return false
}

// SetRESET_PWD_FOR_NEWACCOUNT gets a reference to the given string and assigns it to the RESET_PWD_FOR_NEWACCOUNT field.
func (o *SAPConnector) SetRESET_PWD_FOR_NEWACCOUNT(v string) {
	o.RESET_PWD_FOR_NEWACCOUNT = &v
}

// GetENFORCEPASSWORDCHANGE returns the ENFORCEPASSWORDCHANGE field value if set, zero value otherwise.
func (o *SAPConnector) GetENFORCEPASSWORDCHANGE() string {
	if o == nil || IsNil(o.ENFORCEPASSWORDCHANGE) {
		var ret string
		return ret
	}
	return *o.ENFORCEPASSWORDCHANGE
}

// GetENFORCEPASSWORDCHANGEOk returns a tuple with the ENFORCEPASSWORDCHANGE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetENFORCEPASSWORDCHANGEOk() (*string, bool) {
	if o == nil || IsNil(o.ENFORCEPASSWORDCHANGE) {
		return nil, false
	}
	return o.ENFORCEPASSWORDCHANGE, true
}

// HasENFORCEPASSWORDCHANGE returns a boolean if a field has been set.
func (o *SAPConnector) HasENFORCEPASSWORDCHANGE() bool {
	if o != nil && !IsNil(o.ENFORCEPASSWORDCHANGE) {
		return true
	}

	return false
}

// SetENFORCEPASSWORDCHANGE gets a reference to the given string and assigns it to the ENFORCEPASSWORDCHANGE field.
func (o *SAPConnector) SetENFORCEPASSWORDCHANGE(v string) {
	o.ENFORCEPASSWORDCHANGE = &v
}

// GetPASSWORD_MIN_LENGTH returns the PASSWORD_MIN_LENGTH field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD_MIN_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MIN_LENGTH
}

// GetPASSWORD_MIN_LENGTHOk returns a tuple with the PASSWORD_MIN_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORD_MIN_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MIN_LENGTH, true
}

// HasPASSWORD_MIN_LENGTH returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD_MIN_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MIN_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MIN_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MIN_LENGTH field.
func (o *SAPConnector) SetPASSWORD_MIN_LENGTH(v string) {
	o.PASSWORD_MIN_LENGTH = &v
}

// GetPASSWORD_MAX_LENGTH returns the PASSWORD_MAX_LENGTH field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD_MAX_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MAX_LENGTH
}

// GetPASSWORD_MAX_LENGTHOk returns a tuple with the PASSWORD_MAX_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORD_MAX_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MAX_LENGTH, true
}

// HasPASSWORD_MAX_LENGTH returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD_MAX_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MAX_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MAX_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MAX_LENGTH field.
func (o *SAPConnector) SetPASSWORD_MAX_LENGTH(v string) {
	o.PASSWORD_MAX_LENGTH = &v
}

// GetPASSWORD_NOOFCAPSALPHA returns the PASSWORD_NOOFCAPSALPHA field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD_NOOFCAPSALPHA() string {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFCAPSALPHA
}

// GetPASSWORD_NOOFCAPSALPHAOk returns a tuple with the PASSWORD_NOOFCAPSALPHA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORD_NOOFCAPSALPHAOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return nil, false
	}
	return o.PASSWORD_NOOFCAPSALPHA, true
}

// HasPASSWORD_NOOFCAPSALPHA returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD_NOOFCAPSALPHA() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFCAPSALPHA gets a reference to the given string and assigns it to the PASSWORD_NOOFCAPSALPHA field.
func (o *SAPConnector) SetPASSWORD_NOOFCAPSALPHA(v string) {
	o.PASSWORD_NOOFCAPSALPHA = &v
}

// GetPASSWORD_NOOFDIGITS returns the PASSWORD_NOOFDIGITS field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD_NOOFDIGITS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFDIGITS
}

// GetPASSWORD_NOOFDIGITSOk returns a tuple with the PASSWORD_NOOFDIGITS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORD_NOOFDIGITSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		return nil, false
	}
	return o.PASSWORD_NOOFDIGITS, true
}

// HasPASSWORD_NOOFDIGITS returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD_NOOFDIGITS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFDIGITS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFDIGITS gets a reference to the given string and assigns it to the PASSWORD_NOOFDIGITS field.
func (o *SAPConnector) SetPASSWORD_NOOFDIGITS(v string) {
	o.PASSWORD_NOOFDIGITS = &v
}

// GetPASSWORD_NOOFSPLCHARS returns the PASSWORD_NOOFSPLCHARS field value if set, zero value otherwise.
func (o *SAPConnector) GetPASSWORD_NOOFSPLCHARS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFSPLCHARS
}

// GetPASSWORD_NOOFSPLCHARSOk returns a tuple with the PASSWORD_NOOFSPLCHARS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPASSWORD_NOOFSPLCHARSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return nil, false
	}
	return o.PASSWORD_NOOFSPLCHARS, true
}

// HasPASSWORD_NOOFSPLCHARS returns a boolean if a field has been set.
func (o *SAPConnector) HasPASSWORD_NOOFSPLCHARS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFSPLCHARS gets a reference to the given string and assigns it to the PASSWORD_NOOFSPLCHARS field.
func (o *SAPConnector) SetPASSWORD_NOOFSPLCHARS(v string) {
	o.PASSWORD_NOOFSPLCHARS = &v
}

// GetHANAREFTABLEJSON returns the HANAREFTABLEJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetHANAREFTABLEJSON() string {
	if o == nil || IsNil(o.HANAREFTABLEJSON) {
		var ret string
		return ret
	}
	return *o.HANAREFTABLEJSON
}

// GetHANAREFTABLEJSONOk returns a tuple with the HANAREFTABLEJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetHANAREFTABLEJSONOk() (*string, bool) {
	if o == nil || IsNil(o.HANAREFTABLEJSON) {
		return nil, false
	}
	return o.HANAREFTABLEJSON, true
}

// HasHANAREFTABLEJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasHANAREFTABLEJSON() bool {
	if o != nil && !IsNil(o.HANAREFTABLEJSON) {
		return true
	}

	return false
}

// SetHANAREFTABLEJSON gets a reference to the given string and assigns it to the HANAREFTABLEJSON field.
func (o *SAPConnector) SetHANAREFTABLEJSON(v string) {
	o.HANAREFTABLEJSON = &v
}

// GetENABLEACCOUNTJSON returns the ENABLEACCOUNTJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetENABLEACCOUNTJSON() string {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.ENABLEACCOUNTJSON
}

// GetENABLEACCOUNTJSONOk returns a tuple with the ENABLEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetENABLEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		return nil, false
	}
	return o.ENABLEACCOUNTJSON, true
}

// HasENABLEACCOUNTJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasENABLEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.ENABLEACCOUNTJSON) {
		return true
	}

	return false
}

// SetENABLEACCOUNTJSON gets a reference to the given string and assigns it to the ENABLEACCOUNTJSON field.
func (o *SAPConnector) SetENABLEACCOUNTJSON(v string) {
	o.ENABLEACCOUNTJSON = &v
}

// GetUPDATEACCOUNTJSON returns the UPDATEACCOUNTJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetUPDATEACCOUNTJSON() string {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.UPDATEACCOUNTJSON
}

// GetUPDATEACCOUNTJSONOk returns a tuple with the UPDATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetUPDATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		return nil, false
	}
	return o.UPDATEACCOUNTJSON, true
}

// HasUPDATEACCOUNTJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasUPDATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.UPDATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetUPDATEACCOUNTJSON gets a reference to the given string and assigns it to the UPDATEACCOUNTJSON field.
func (o *SAPConnector) SetUPDATEACCOUNTJSON(v string) {
	o.UPDATEACCOUNTJSON = &v
}

// GetUSERIMPORTJSON returns the USERIMPORTJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetUSERIMPORTJSON() string {
	if o == nil || IsNil(o.USERIMPORTJSON) {
		var ret string
		return ret
	}
	return *o.USERIMPORTJSON
}

// GetUSERIMPORTJSONOk returns a tuple with the USERIMPORTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetUSERIMPORTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.USERIMPORTJSON) {
		return nil, false
	}
	return o.USERIMPORTJSON, true
}

// HasUSERIMPORTJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasUSERIMPORTJSON() bool {
	if o != nil && !IsNil(o.USERIMPORTJSON) {
		return true
	}

	return false
}

// SetUSERIMPORTJSON gets a reference to the given string and assigns it to the USERIMPORTJSON field.
func (o *SAPConnector) SetUSERIMPORTJSON(v string) {
	o.USERIMPORTJSON = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *SAPConnector) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *SAPConnector) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *SAPConnector) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetSETCUASYSTEM returns the SETCUASYSTEM field value if set, zero value otherwise.
func (o *SAPConnector) GetSETCUASYSTEM() string {
	if o == nil || IsNil(o.SETCUASYSTEM) {
		var ret string
		return ret
	}
	return *o.SETCUASYSTEM
}

// GetSETCUASYSTEMOk returns a tuple with the SETCUASYSTEM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetSETCUASYSTEMOk() (*string, bool) {
	if o == nil || IsNil(o.SETCUASYSTEM) {
		return nil, false
	}
	return o.SETCUASYSTEM, true
}

// HasSETCUASYSTEM returns a boolean if a field has been set.
func (o *SAPConnector) HasSETCUASYSTEM() bool {
	if o != nil && !IsNil(o.SETCUASYSTEM) {
		return true
	}

	return false
}

// SetSETCUASYSTEM gets a reference to the given string and assigns it to the SETCUASYSTEM field.
func (o *SAPConnector) SetSETCUASYSTEM(v string) {
	o.SETCUASYSTEM = &v
}

// GetFIREFIGHTERID_GRANT_ACCESS_JSON returns the FIREFIGHTERID_GRANT_ACCESS_JSON field value if set, zero value otherwise.
func (o *SAPConnector) GetFIREFIGHTERID_GRANT_ACCESS_JSON() string {
	if o == nil || IsNil(o.FIREFIGHTERID_GRANT_ACCESS_JSON) {
		var ret string
		return ret
	}
	return *o.FIREFIGHTERID_GRANT_ACCESS_JSON
}

// GetFIREFIGHTERID_GRANT_ACCESS_JSONOk returns a tuple with the FIREFIGHTERID_GRANT_ACCESS_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetFIREFIGHTERID_GRANT_ACCESS_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.FIREFIGHTERID_GRANT_ACCESS_JSON) {
		return nil, false
	}
	return o.FIREFIGHTERID_GRANT_ACCESS_JSON, true
}

// HasFIREFIGHTERID_GRANT_ACCESS_JSON returns a boolean if a field has been set.
func (o *SAPConnector) HasFIREFIGHTERID_GRANT_ACCESS_JSON() bool {
	if o != nil && !IsNil(o.FIREFIGHTERID_GRANT_ACCESS_JSON) {
		return true
	}

	return false
}

// SetFIREFIGHTERID_GRANT_ACCESS_JSON gets a reference to the given string and assigns it to the FIREFIGHTERID_GRANT_ACCESS_JSON field.
func (o *SAPConnector) SetFIREFIGHTERID_GRANT_ACCESS_JSON(v string) {
	o.FIREFIGHTERID_GRANT_ACCESS_JSON = &v
}

// GetFIREFIGHTERID_REVOKE_ACCESS_JSON returns the FIREFIGHTERID_REVOKE_ACCESS_JSON field value if set, zero value otherwise.
func (o *SAPConnector) GetFIREFIGHTERID_REVOKE_ACCESS_JSON() string {
	if o == nil || IsNil(o.FIREFIGHTERID_REVOKE_ACCESS_JSON) {
		var ret string
		return ret
	}
	return *o.FIREFIGHTERID_REVOKE_ACCESS_JSON
}

// GetFIREFIGHTERID_REVOKE_ACCESS_JSONOk returns a tuple with the FIREFIGHTERID_REVOKE_ACCESS_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetFIREFIGHTERID_REVOKE_ACCESS_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.FIREFIGHTERID_REVOKE_ACCESS_JSON) {
		return nil, false
	}
	return o.FIREFIGHTERID_REVOKE_ACCESS_JSON, true
}

// HasFIREFIGHTERID_REVOKE_ACCESS_JSON returns a boolean if a field has been set.
func (o *SAPConnector) HasFIREFIGHTERID_REVOKE_ACCESS_JSON() bool {
	if o != nil && !IsNil(o.FIREFIGHTERID_REVOKE_ACCESS_JSON) {
		return true
	}

	return false
}

// SetFIREFIGHTERID_REVOKE_ACCESS_JSON gets a reference to the given string and assigns it to the FIREFIGHTERID_REVOKE_ACCESS_JSON field.
func (o *SAPConnector) SetFIREFIGHTERID_REVOKE_ACCESS_JSON(v string) {
	o.FIREFIGHTERID_REVOKE_ACCESS_JSON = &v
}

// GetMODIFYUSERDATAJSON returns the MODIFYUSERDATAJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetMODIFYUSERDATAJSON() string {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		var ret string
		return ret
	}
	return *o.MODIFYUSERDATAJSON
}

// GetMODIFYUSERDATAJSONOk returns a tuple with the MODIFYUSERDATAJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetMODIFYUSERDATAJSONOk() (*string, bool) {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		return nil, false
	}
	return o.MODIFYUSERDATAJSON, true
}

// HasMODIFYUSERDATAJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasMODIFYUSERDATAJSON() bool {
	if o != nil && !IsNil(o.MODIFYUSERDATAJSON) {
		return true
	}

	return false
}

// SetMODIFYUSERDATAJSON gets a reference to the given string and assigns it to the MODIFYUSERDATAJSON field.
func (o *SAPConnector) SetMODIFYUSERDATAJSON(v string) {
	o.MODIFYUSERDATAJSON = &v
}

// GetEXTERNAL_SOD_EVAL_JSON returns the EXTERNAL_SOD_EVAL_JSON field value if set, zero value otherwise.
func (o *SAPConnector) GetEXTERNAL_SOD_EVAL_JSON() string {
	if o == nil || IsNil(o.EXTERNAL_SOD_EVAL_JSON) {
		var ret string
		return ret
	}
	return *o.EXTERNAL_SOD_EVAL_JSON
}

// GetEXTERNAL_SOD_EVAL_JSONOk returns a tuple with the EXTERNAL_SOD_EVAL_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetEXTERNAL_SOD_EVAL_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.EXTERNAL_SOD_EVAL_JSON) {
		return nil, false
	}
	return o.EXTERNAL_SOD_EVAL_JSON, true
}

// HasEXTERNAL_SOD_EVAL_JSON returns a boolean if a field has been set.
func (o *SAPConnector) HasEXTERNAL_SOD_EVAL_JSON() bool {
	if o != nil && !IsNil(o.EXTERNAL_SOD_EVAL_JSON) {
		return true
	}

	return false
}

// SetEXTERNAL_SOD_EVAL_JSON gets a reference to the given string and assigns it to the EXTERNAL_SOD_EVAL_JSON field.
func (o *SAPConnector) SetEXTERNAL_SOD_EVAL_JSON(v string) {
	o.EXTERNAL_SOD_EVAL_JSON = &v
}

// GetEXTERNAL_SOD_EVAL_JSON_DETAIL returns the EXTERNAL_SOD_EVAL_JSON_DETAIL field value if set, zero value otherwise.
func (o *SAPConnector) GetEXTERNAL_SOD_EVAL_JSON_DETAIL() string {
	if o == nil || IsNil(o.EXTERNAL_SOD_EVAL_JSON_DETAIL) {
		var ret string
		return ret
	}
	return *o.EXTERNAL_SOD_EVAL_JSON_DETAIL
}

// GetEXTERNAL_SOD_EVAL_JSON_DETAILOk returns a tuple with the EXTERNAL_SOD_EVAL_JSON_DETAIL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetEXTERNAL_SOD_EVAL_JSON_DETAILOk() (*string, bool) {
	if o == nil || IsNil(o.EXTERNAL_SOD_EVAL_JSON_DETAIL) {
		return nil, false
	}
	return o.EXTERNAL_SOD_EVAL_JSON_DETAIL, true
}

// HasEXTERNAL_SOD_EVAL_JSON_DETAIL returns a boolean if a field has been set.
func (o *SAPConnector) HasEXTERNAL_SOD_EVAL_JSON_DETAIL() bool {
	if o != nil && !IsNil(o.EXTERNAL_SOD_EVAL_JSON_DETAIL) {
		return true
	}

	return false
}

// SetEXTERNAL_SOD_EVAL_JSON_DETAIL gets a reference to the given string and assigns it to the EXTERNAL_SOD_EVAL_JSON_DETAIL field.
func (o *SAPConnector) SetEXTERNAL_SOD_EVAL_JSON_DETAIL(v string) {
	o.EXTERNAL_SOD_EVAL_JSON_DETAIL = &v
}

// GetLOGS_TABLE_FILTER returns the LOGS_TABLE_FILTER field value if set, zero value otherwise.
func (o *SAPConnector) GetLOGS_TABLE_FILTER() string {
	if o == nil || IsNil(o.LOGS_TABLE_FILTER) {
		var ret string
		return ret
	}
	return *o.LOGS_TABLE_FILTER
}

// GetLOGS_TABLE_FILTEROk returns a tuple with the LOGS_TABLE_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetLOGS_TABLE_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.LOGS_TABLE_FILTER) {
		return nil, false
	}
	return o.LOGS_TABLE_FILTER, true
}

// HasLOGS_TABLE_FILTER returns a boolean if a field has been set.
func (o *SAPConnector) HasLOGS_TABLE_FILTER() bool {
	if o != nil && !IsNil(o.LOGS_TABLE_FILTER) {
		return true
	}

	return false
}

// SetLOGS_TABLE_FILTER gets a reference to the given string and assigns it to the LOGS_TABLE_FILTER field.
func (o *SAPConnector) SetLOGS_TABLE_FILTER(v string) {
	o.LOGS_TABLE_FILTER = &v
}

// GetPAM_CONFIG returns the PAM_CONFIG field value if set, zero value otherwise.
func (o *SAPConnector) GetPAM_CONFIG() string {
	if o == nil || IsNil(o.PAM_CONFIG) {
		var ret string
		return ret
	}
	return *o.PAM_CONFIG
}

// GetPAM_CONFIGOk returns a tuple with the PAM_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetPAM_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.PAM_CONFIG) {
		return nil, false
	}
	return o.PAM_CONFIG, true
}

// HasPAM_CONFIG returns a boolean if a field has been set.
func (o *SAPConnector) HasPAM_CONFIG() bool {
	if o != nil && !IsNil(o.PAM_CONFIG) {
		return true
	}

	return false
}

// SetPAM_CONFIG gets a reference to the given string and assigns it to the PAM_CONFIG field.
func (o *SAPConnector) SetPAM_CONFIG(v string) {
	o.PAM_CONFIG = &v
}

// GetSAPTABLE_FILTER_LANG returns the SAPTABLE_FILTER_LANG field value if set, zero value otherwise.
func (o *SAPConnector) GetSAPTABLE_FILTER_LANG() string {
	if o == nil || IsNil(o.SAPTABLE_FILTER_LANG) {
		var ret string
		return ret
	}
	return *o.SAPTABLE_FILTER_LANG
}

// GetSAPTABLE_FILTER_LANGOk returns a tuple with the SAPTABLE_FILTER_LANG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetSAPTABLE_FILTER_LANGOk() (*string, bool) {
	if o == nil || IsNil(o.SAPTABLE_FILTER_LANG) {
		return nil, false
	}
	return o.SAPTABLE_FILTER_LANG, true
}

// HasSAPTABLE_FILTER_LANG returns a boolean if a field has been set.
func (o *SAPConnector) HasSAPTABLE_FILTER_LANG() bool {
	if o != nil && !IsNil(o.SAPTABLE_FILTER_LANG) {
		return true
	}

	return false
}

// SetSAPTABLE_FILTER_LANG gets a reference to the given string and assigns it to the SAPTABLE_FILTER_LANG field.
func (o *SAPConnector) SetSAPTABLE_FILTER_LANG(v string) {
	o.SAPTABLE_FILTER_LANG = &v
}

// GetALTERNATE_OUTPUT_PARAMETER_ET_DATA returns the ALTERNATE_OUTPUT_PARAMETER_ET_DATA field value if set, zero value otherwise.
func (o *SAPConnector) GetALTERNATE_OUTPUT_PARAMETER_ET_DATA() string {
	if o == nil || IsNil(o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA) {
		var ret string
		return ret
	}
	return *o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA
}

// GetALTERNATE_OUTPUT_PARAMETER_ET_DATAOk returns a tuple with the ALTERNATE_OUTPUT_PARAMETER_ET_DATA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetALTERNATE_OUTPUT_PARAMETER_ET_DATAOk() (*string, bool) {
	if o == nil || IsNil(o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA) {
		return nil, false
	}
	return o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA, true
}

// HasALTERNATE_OUTPUT_PARAMETER_ET_DATA returns a boolean if a field has been set.
func (o *SAPConnector) HasALTERNATE_OUTPUT_PARAMETER_ET_DATA() bool {
	if o != nil && !IsNil(o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA) {
		return true
	}

	return false
}

// SetALTERNATE_OUTPUT_PARAMETER_ET_DATA gets a reference to the given string and assigns it to the ALTERNATE_OUTPUT_PARAMETER_ET_DATA field.
func (o *SAPConnector) SetALTERNATE_OUTPUT_PARAMETER_ET_DATA(v string) {
	o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA = &v
}

// GetAUDIT_LOG_JSON returns the AUDIT_LOG_JSON field value if set, zero value otherwise.
func (o *SAPConnector) GetAUDIT_LOG_JSON() string {
	if o == nil || IsNil(o.AUDIT_LOG_JSON) {
		var ret string
		return ret
	}
	return *o.AUDIT_LOG_JSON
}

// GetAUDIT_LOG_JSONOk returns a tuple with the AUDIT_LOG_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetAUDIT_LOG_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.AUDIT_LOG_JSON) {
		return nil, false
	}
	return o.AUDIT_LOG_JSON, true
}

// HasAUDIT_LOG_JSON returns a boolean if a field has been set.
func (o *SAPConnector) HasAUDIT_LOG_JSON() bool {
	if o != nil && !IsNil(o.AUDIT_LOG_JSON) {
		return true
	}

	return false
}

// SetAUDIT_LOG_JSON gets a reference to the given string and assigns it to the AUDIT_LOG_JSON field.
func (o *SAPConnector) SetAUDIT_LOG_JSON(v string) {
	o.AUDIT_LOG_JSON = &v
}

// GetECCORS4HANA returns the ECCORS4HANA field value if set, zero value otherwise.
func (o *SAPConnector) GetECCORS4HANA() string {
	if o == nil || IsNil(o.ECCORS4HANA) {
		var ret string
		return ret
	}
	return *o.ECCORS4HANA
}

// GetECCORS4HANAOk returns a tuple with the ECCORS4HANA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetECCORS4HANAOk() (*string, bool) {
	if o == nil || IsNil(o.ECCORS4HANA) {
		return nil, false
	}
	return o.ECCORS4HANA, true
}

// HasECCORS4HANA returns a boolean if a field has been set.
func (o *SAPConnector) HasECCORS4HANA() bool {
	if o != nil && !IsNil(o.ECCORS4HANA) {
		return true
	}

	return false
}

// SetECCORS4HANA gets a reference to the given string and assigns it to the ECCORS4HANA field.
func (o *SAPConnector) SetECCORS4HANA(v string) {
	o.ECCORS4HANA = &v
}

// GetDATA_IMPORT_FILTER returns the DATA_IMPORT_FILTER field value if set, zero value otherwise.
func (o *SAPConnector) GetDATA_IMPORT_FILTER() string {
	if o == nil || IsNil(o.DATA_IMPORT_FILTER) {
		var ret string
		return ret
	}
	return *o.DATA_IMPORT_FILTER
}

// GetDATA_IMPORT_FILTEROk returns a tuple with the DATA_IMPORT_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetDATA_IMPORT_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.DATA_IMPORT_FILTER) {
		return nil, false
	}
	return o.DATA_IMPORT_FILTER, true
}

// HasDATA_IMPORT_FILTER returns a boolean if a field has been set.
func (o *SAPConnector) HasDATA_IMPORT_FILTER() bool {
	if o != nil && !IsNil(o.DATA_IMPORT_FILTER) {
		return true
	}

	return false
}

// SetDATA_IMPORT_FILTER gets a reference to the given string and assigns it to the DATA_IMPORT_FILTER field.
func (o *SAPConnector) SetDATA_IMPORT_FILTER(v string) {
	o.DATA_IMPORT_FILTER = &v
}

// GetConfigJSON returns the ConfigJSON field value if set, zero value otherwise.
func (o *SAPConnector) GetConfigJSON() string {
	if o == nil || IsNil(o.ConfigJSON) {
		var ret string
		return ret
	}
	return *o.ConfigJSON
}

// GetConfigJSONOk returns a tuple with the ConfigJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAPConnector) GetConfigJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigJSON) {
		return nil, false
	}
	return o.ConfigJSON, true
}

// HasConfigJSON returns a boolean if a field has been set.
func (o *SAPConnector) HasConfigJSON() bool {
	if o != nil && !IsNil(o.ConfigJSON) {
		return true
	}

	return false
}

// SetConfigJSON gets a reference to the given string and assigns it to the ConfigJSON field.
func (o *SAPConnector) SetConfigJSON(v string) {
	o.ConfigJSON = &v
}

func (o SAPConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SAPConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseConnector, errBaseConnector := json.Marshal(o.BaseConnector)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	errBaseConnector = json.Unmarshal([]byte(serializedBaseConnector), &toSerialize)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	if !IsNil(o.MESSAGESERVER) {
		toSerialize["MESSAGESERVER"] = o.MESSAGESERVER
	}
	if !IsNil(o.JCO_ASHOST) {
		toSerialize["JCO_ASHOST"] = o.JCO_ASHOST
	}
	if !IsNil(o.JCO_SYSNR) {
		toSerialize["JCO_SYSNR"] = o.JCO_SYSNR
	}
	if !IsNil(o.JCO_CLIENT) {
		toSerialize["JCO_CLIENT"] = o.JCO_CLIENT
	}
	if !IsNil(o.JCO_USER) {
		toSerialize["JCO_USER"] = o.JCO_USER
	}
	if !IsNil(o.PASSWORD) {
		toSerialize["PASSWORD"] = o.PASSWORD
	}
	if !IsNil(o.JCO_LANG) {
		toSerialize["JCO_LANG"] = o.JCO_LANG
	}
	if !IsNil(o.JCOR3NAME) {
		toSerialize["JCO_R3NAME"] = o.JCOR3NAME
	}
	if !IsNil(o.JCO_MSHOST) {
		toSerialize["JCO_MSHOST"] = o.JCO_MSHOST
	}
	if !IsNil(o.JCO_MSSERV) {
		toSerialize["JCO_MSSERV"] = o.JCO_MSSERV
	}
	if !IsNil(o.JCO_GROUP) {
		toSerialize["JCO_GROUP"] = o.JCO_GROUP
	}
	if !IsNil(o.SNC) {
		toSerialize["SNC"] = o.SNC
	}
	if !IsNil(o.JCO_SNC_MODE) {
		toSerialize["JCO_SNC_MODE"] = o.JCO_SNC_MODE
	}
	if !IsNil(o.JCO_SNC_PARTNERNAME) {
		toSerialize["JCO_SNC_PARTNERNAME"] = o.JCO_SNC_PARTNERNAME
	}
	if !IsNil(o.JCO_SNC_MYNAME) {
		toSerialize["JCO_SNC_MYNAME"] = o.JCO_SNC_MYNAME
	}
	if !IsNil(o.JCO_SNC_LIBRARY) {
		toSerialize["JCO_SNC_LIBRARY"] = o.JCO_SNC_LIBRARY
	}
	if !IsNil(o.JCO_SNC_QOP) {
		toSerialize["JCO_SNC_QOP"] = o.JCO_SNC_QOP
	}
	if !IsNil(o.TABLES) {
		toSerialize["TABLES"] = o.TABLES
	}
	if !IsNil(o.SYSTEMNAME) {
		toSerialize["SYSTEMNAME"] = o.SYSTEMNAME
	}
	if !IsNil(o.TERMINATEDUSERGROUP) {
		toSerialize["TERMINATEDUSERGROUP"] = o.TERMINATEDUSERGROUP
	}
	if !IsNil(o.TERMINATED_USER_ROLE_ACTION) {
		toSerialize["TERMINATED_USER_ROLE_ACTION"] = o.TERMINATED_USER_ROLE_ACTION
	}
	if !IsNil(o.CREATEACCOUNTJSON) {
		toSerialize["CREATEACCOUNTJSON"] = o.CREATEACCOUNTJSON
	}
	if !IsNil(o.PROV_JCO_ASHOST) {
		toSerialize["PROV_JCO_ASHOST"] = o.PROV_JCO_ASHOST
	}
	if !IsNil(o.PROV_JCO_SYSNR) {
		toSerialize["PROV_JCO_SYSNR"] = o.PROV_JCO_SYSNR
	}
	if !IsNil(o.PROV_JCO_CLIENT) {
		toSerialize["PROV_JCO_CLIENT"] = o.PROV_JCO_CLIENT
	}
	if !IsNil(o.PROV_JCO_USER) {
		toSerialize["PROV_JCO_USER"] = o.PROV_JCO_USER
	}
	if !IsNil(o.PROV_PASSWORD) {
		toSerialize["PROV_PASSWORD"] = o.PROV_PASSWORD
	}
	if !IsNil(o.PROV_JCO_LANG) {
		toSerialize["PROV_JCO_LANG"] = o.PROV_JCO_LANG
	}
	if !IsNil(o.PROVJCOR3NAME) {
		toSerialize["PROV_JCO_R3NAME"] = o.PROVJCOR3NAME
	}
	if !IsNil(o.PROV_JCO_MSHOST) {
		toSerialize["PROV_JCO_MSHOST"] = o.PROV_JCO_MSHOST
	}
	if !IsNil(o.PROV_JCO_MSSERV) {
		toSerialize["PROV_JCO_MSSERV"] = o.PROV_JCO_MSSERV
	}
	if !IsNil(o.PROV_JCO_GROUP) {
		toSerialize["PROV_JCO_GROUP"] = o.PROV_JCO_GROUP
	}
	if !IsNil(o.PROV_CUA_ENABLED) {
		toSerialize["PROV_CUA_ENABLED"] = o.PROV_CUA_ENABLED
	}
	if !IsNil(o.PROV_CUA_SNC) {
		toSerialize["PROV_CUA_SNC"] = o.PROV_CUA_SNC
	}
	if !IsNil(o.RESET_PWD_FOR_NEWACCOUNT) {
		toSerialize["RESET_PWD_FOR_NEWACCOUNT"] = o.RESET_PWD_FOR_NEWACCOUNT
	}
	if !IsNil(o.ENFORCEPASSWORDCHANGE) {
		toSerialize["ENFORCEPASSWORDCHANGE"] = o.ENFORCEPASSWORDCHANGE
	}
	if !IsNil(o.PASSWORD_MIN_LENGTH) {
		toSerialize["PASSWORD_MIN_LENGTH"] = o.PASSWORD_MIN_LENGTH
	}
	if !IsNil(o.PASSWORD_MAX_LENGTH) {
		toSerialize["PASSWORD_MAX_LENGTH"] = o.PASSWORD_MAX_LENGTH
	}
	if !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		toSerialize["PASSWORD_NOOFCAPSALPHA"] = o.PASSWORD_NOOFCAPSALPHA
	}
	if !IsNil(o.PASSWORD_NOOFDIGITS) {
		toSerialize["PASSWORD_NOOFDIGITS"] = o.PASSWORD_NOOFDIGITS
	}
	if !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		toSerialize["PASSWORD_NOOFSPLCHARS"] = o.PASSWORD_NOOFSPLCHARS
	}
	if !IsNil(o.HANAREFTABLEJSON) {
		toSerialize["HANAREFTABLEJSON"] = o.HANAREFTABLEJSON
	}
	if !IsNil(o.ENABLEACCOUNTJSON) {
		toSerialize["ENABLEACCOUNTJSON"] = o.ENABLEACCOUNTJSON
	}
	if !IsNil(o.UPDATEACCOUNTJSON) {
		toSerialize["UPDATEACCOUNTJSON"] = o.UPDATEACCOUNTJSON
	}
	if !IsNil(o.USERIMPORTJSON) {
		toSerialize["USERIMPORTJSON"] = o.USERIMPORTJSON
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.SETCUASYSTEM) {
		toSerialize["SETCUASYSTEM"] = o.SETCUASYSTEM
	}
	if !IsNil(o.FIREFIGHTERID_GRANT_ACCESS_JSON) {
		toSerialize["FIREFIGHTERID_GRANT_ACCESS_JSON"] = o.FIREFIGHTERID_GRANT_ACCESS_JSON
	}
	if !IsNil(o.FIREFIGHTERID_REVOKE_ACCESS_JSON) {
		toSerialize["FIREFIGHTERID_REVOKE_ACCESS_JSON"] = o.FIREFIGHTERID_REVOKE_ACCESS_JSON
	}
	if !IsNil(o.MODIFYUSERDATAJSON) {
		toSerialize["MODIFYUSERDATAJSON"] = o.MODIFYUSERDATAJSON
	}
	if !IsNil(o.EXTERNAL_SOD_EVAL_JSON) {
		toSerialize["EXTERNAL_SOD_EVAL_JSON"] = o.EXTERNAL_SOD_EVAL_JSON
	}
	if !IsNil(o.EXTERNAL_SOD_EVAL_JSON_DETAIL) {
		toSerialize["EXTERNAL_SOD_EVAL_JSON_DETAIL"] = o.EXTERNAL_SOD_EVAL_JSON_DETAIL
	}
	if !IsNil(o.LOGS_TABLE_FILTER) {
		toSerialize["LOGS_TABLE_FILTER"] = o.LOGS_TABLE_FILTER
	}
	if !IsNil(o.PAM_CONFIG) {
		toSerialize["PAM_CONFIG"] = o.PAM_CONFIG
	}
	if !IsNil(o.SAPTABLE_FILTER_LANG) {
		toSerialize["SAPTABLE_FILTER_LANG"] = o.SAPTABLE_FILTER_LANG
	}
	if !IsNil(o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA) {
		toSerialize["ALTERNATE_OUTPUT_PARAMETER_ET_DATA"] = o.ALTERNATE_OUTPUT_PARAMETER_ET_DATA
	}
	if !IsNil(o.AUDIT_LOG_JSON) {
		toSerialize["AUDIT_LOG_JSON"] = o.AUDIT_LOG_JSON
	}
	if !IsNil(o.ECCORS4HANA) {
		toSerialize["ECC_OR_S4HANA"] = o.ECCORS4HANA
	}
	if !IsNil(o.DATA_IMPORT_FILTER) {
		toSerialize["DATA_IMPORT_FILTER"] = o.DATA_IMPORT_FILTER
	}
	if !IsNil(o.ConfigJSON) {
		toSerialize["ConfigJSON"] = o.ConfigJSON
	}
	return toSerialize, nil
}

func (o *SAPConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSAPConnector := _SAPConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSAPConnector)

	if err != nil {
		return err
	}

	*o = SAPConnector(varSAPConnector)

	return err
}

type NullableSAPConnector struct {
	value *SAPConnector
	isSet bool
}

func (v NullableSAPConnector) Get() *SAPConnector {
	return v.value
}

func (v *NullableSAPConnector) Set(val *SAPConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableSAPConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableSAPConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAPConnector(val *SAPConnector) *NullableSAPConnector {
	return &NullableSAPConnector{value: val, isSet: true}
}

func (v NullableSAPConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAPConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


