/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
)

// checks if the RESTConnectionAttributesConnectionTimeoutConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RESTConnectionAttributesConnectionTimeoutConfig{}

// RESTConnectionAttributesConnectionTimeoutConfig struct for RESTConnectionAttributesConnectionTimeoutConfig
type RESTConnectionAttributesConnectionTimeoutConfig struct {
	RetryWait               *int32 `json:"retryWait,omitempty"`
	TokenRefreshMaxTryCount *int32 `json:"tokenRefreshMaxTryCount,omitempty"`
	RetryFailureStatusCode  *int32 `json:"retryFailureStatusCode,omitempty"`
	RetryWaitMaxValue       *int32 `json:"retryWaitMaxValue,omitempty"`
	RetryCount              *int32 `json:"retryCount,omitempty"`
	ReadTimeout             *int32 `json:"readTimeout,omitempty"`
	ConnectionTimeout       *int32 `json:"connectionTimeout,omitempty"`
}

// NewRESTConnectionAttributesConnectionTimeoutConfig instantiates a new RESTConnectionAttributesConnectionTimeoutConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRESTConnectionAttributesConnectionTimeoutConfig() *RESTConnectionAttributesConnectionTimeoutConfig {
	this := RESTConnectionAttributesConnectionTimeoutConfig{}
	return &this
}

// NewRESTConnectionAttributesConnectionTimeoutConfigWithDefaults instantiates a new RESTConnectionAttributesConnectionTimeoutConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRESTConnectionAttributesConnectionTimeoutConfigWithDefaults() *RESTConnectionAttributesConnectionTimeoutConfig {
	this := RESTConnectionAttributesConnectionTimeoutConfig{}
	return &this
}

// GetRetryWait returns the RetryWait field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryWait() int32 {
	if o == nil || IsNil(o.RetryWait) {
		var ret int32
		return ret
	}
	return *o.RetryWait
}

// GetRetryWaitOk returns a tuple with the RetryWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryWaitOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryWait) {
		return nil, false
	}
	return o.RetryWait, true
}

// HasRetryWait returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasRetryWait() bool {
	if o != nil && !IsNil(o.RetryWait) {
		return true
	}

	return false
}

// SetRetryWait gets a reference to the given int32 and assigns it to the RetryWait field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetRetryWait(v int32) {
	o.RetryWait = &v
}

// GetTokenRefreshMaxTryCount returns the TokenRefreshMaxTryCount field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetTokenRefreshMaxTryCount() int32 {
	if o == nil || IsNil(o.TokenRefreshMaxTryCount) {
		var ret int32
		return ret
	}
	return *o.TokenRefreshMaxTryCount
}

// GetTokenRefreshMaxTryCountOk returns a tuple with the TokenRefreshMaxTryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetTokenRefreshMaxTryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenRefreshMaxTryCount) {
		return nil, false
	}
	return o.TokenRefreshMaxTryCount, true
}

// HasTokenRefreshMaxTryCount returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasTokenRefreshMaxTryCount() bool {
	if o != nil && !IsNil(o.TokenRefreshMaxTryCount) {
		return true
	}

	return false
}

// SetTokenRefreshMaxTryCount gets a reference to the given int32 and assigns it to the TokenRefreshMaxTryCount field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetTokenRefreshMaxTryCount(v int32) {
	o.TokenRefreshMaxTryCount = &v
}

// GetRetryFailureStatusCode returns the RetryFailureStatusCode field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryFailureStatusCode() int32 {
	if o == nil || IsNil(o.RetryFailureStatusCode) {
		var ret int32
		return ret
	}
	return *o.RetryFailureStatusCode
}

// GetRetryFailureStatusCodeOk returns a tuple with the RetryFailureStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryFailureStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryFailureStatusCode) {
		return nil, false
	}
	return o.RetryFailureStatusCode, true
}

// HasRetryFailureStatusCode returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasRetryFailureStatusCode() bool {
	if o != nil && !IsNil(o.RetryFailureStatusCode) {
		return true
	}

	return false
}

// SetRetryFailureStatusCode gets a reference to the given int32 and assigns it to the RetryFailureStatusCode field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetRetryFailureStatusCode(v int32) {
	o.RetryFailureStatusCode = &v
}

// GetRetryWaitMaxValue returns the RetryWaitMaxValue field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryWaitMaxValue() int32 {
	if o == nil || IsNil(o.RetryWaitMaxValue) {
		var ret int32
		return ret
	}
	return *o.RetryWaitMaxValue
}

// GetRetryWaitMaxValueOk returns a tuple with the RetryWaitMaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryWaitMaxValueOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryWaitMaxValue) {
		return nil, false
	}
	return o.RetryWaitMaxValue, true
}

// HasRetryWaitMaxValue returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasRetryWaitMaxValue() bool {
	if o != nil && !IsNil(o.RetryWaitMaxValue) {
		return true
	}

	return false
}

// SetRetryWaitMaxValue gets a reference to the given int32 and assigns it to the RetryWaitMaxValue field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetRetryWaitMaxValue(v int32) {
	o.RetryWaitMaxValue = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetRetryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetRetryCount(v int32) {
	o.RetryCount = &v
}

// GetReadTimeout returns the ReadTimeout field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetReadTimeout() int32 {
	if o == nil || IsNil(o.ReadTimeout) {
		var ret int32
		return ret
	}
	return *o.ReadTimeout
}

// GetReadTimeoutOk returns a tuple with the ReadTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetReadTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ReadTimeout) {
		return nil, false
	}
	return o.ReadTimeout, true
}

// HasReadTimeout returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasReadTimeout() bool {
	if o != nil && !IsNil(o.ReadTimeout) {
		return true
	}

	return false
}

// SetReadTimeout gets a reference to the given int32 and assigns it to the ReadTimeout field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetReadTimeout(v int32) {
	o.ReadTimeout = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value if set, zero value otherwise.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetConnectionTimeout() int32 {
	if o == nil || IsNil(o.ConnectionTimeout) {
		var ret int32
		return ret
	}
	return *o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) GetConnectionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ConnectionTimeout) {
		return nil, false
	}
	return o.ConnectionTimeout, true
}

// HasConnectionTimeout returns a boolean if a field has been set.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) HasConnectionTimeout() bool {
	if o != nil && !IsNil(o.ConnectionTimeout) {
		return true
	}

	return false
}

// SetConnectionTimeout gets a reference to the given int32 and assigns it to the ConnectionTimeout field.
func (o *RESTConnectionAttributesConnectionTimeoutConfig) SetConnectionTimeout(v int32) {
	o.ConnectionTimeout = &v
}

func (o RESTConnectionAttributesConnectionTimeoutConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RESTConnectionAttributesConnectionTimeoutConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RetryWait) {
		toSerialize["retryWait"] = o.RetryWait
	}
	if !IsNil(o.TokenRefreshMaxTryCount) {
		toSerialize["tokenRefreshMaxTryCount"] = o.TokenRefreshMaxTryCount
	}
	if !IsNil(o.RetryFailureStatusCode) {
		toSerialize["retryFailureStatusCode"] = o.RetryFailureStatusCode
	}
	if !IsNil(o.RetryWaitMaxValue) {
		toSerialize["retryWaitMaxValue"] = o.RetryWaitMaxValue
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.ReadTimeout) {
		toSerialize["readTimeout"] = o.ReadTimeout
	}
	if !IsNil(o.ConnectionTimeout) {
		toSerialize["connectionTimeout"] = o.ConnectionTimeout
	}
	return toSerialize, nil
}

type NullableRESTConnectionAttributesConnectionTimeoutConfig struct {
	value *RESTConnectionAttributesConnectionTimeoutConfig
	isSet bool
}

func (v NullableRESTConnectionAttributesConnectionTimeoutConfig) Get() *RESTConnectionAttributesConnectionTimeoutConfig {
	return v.value
}

func (v *NullableRESTConnectionAttributesConnectionTimeoutConfig) Set(val *RESTConnectionAttributesConnectionTimeoutConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRESTConnectionAttributesConnectionTimeoutConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRESTConnectionAttributesConnectionTimeoutConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRESTConnectionAttributesConnectionTimeoutConfig(val *RESTConnectionAttributesConnectionTimeoutConfig) *NullableRESTConnectionAttributesConnectionTimeoutConfig {
	return &NullableRESTConnectionAttributesConnectionTimeoutConfig{value: val, isSet: true}
}

func (v NullableRESTConnectionAttributesConnectionTimeoutConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRESTConnectionAttributesConnectionTimeoutConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
