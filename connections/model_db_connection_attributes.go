/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
)

// checks if the DBConnectionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBConnectionAttributes{}

// DBConnectionAttributes struct for DBConnectionAttributes
type DBConnectionAttributes struct {
	// Minimum length of password
	PASSWORD_MIN_LENGTH *string `json:"PASSWORD_MIN_LENGTH,omitempty"`
	CHANGEPASSJSON *string `json:"CHANGEPASSJSON,omitempty"`
	ACCOUNTEXISTSJSON *string `json:"ACCOUNTEXISTSJSON,omitempty"`
	ROLESIMPORT *string `json:"ROLESIMPORT,omitempty"`
	ROLEOWNERIMPORT *string `json:"ROLEOWNERIMPORT,omitempty"`
	CREATEACCOUNTJSON *string `json:"CREATEACCOUNTJSON,omitempty"`
	USERIMPORT *string `json:"USERIMPORT,omitempty"`
	DISABLEACCOUNTJSON *string `json:"DISABLEACCOUNTJSON,omitempty"`
	ENTITLEMENTVALUEIMPORT *string `json:"ENTITLEMENTVALUEIMPORT,omitempty"`
	ConnectionTimeoutConfig *ConnectionTimeoutConfig `json:"connectionTimeoutConfig,omitempty"`
	UPDATEUSERJSON *string `json:"UPDATEUSERJSON,omitempty"`
	PASSWORD_NOOFSPLCHARS *string `json:"PASSWORD_NOOFSPLCHARS,omitempty"`
	REVOKEACCESSJSON *string `json:"REVOKEACCESSJSON,omitempty"`
	ConnectionType *string `json:"connectionType,omitempty"`
	URL *string `json:"URL,omitempty"`
	SYSTEMIMPORT *string `json:"SYSTEMIMPORT,omitempty"`
	DRIVERNAME *string `json:"DRIVERNAME,omitempty"`
	DELETEACCOUNTJSON *string `json:"DELETEACCOUNTJSON,omitempty"`
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	USERNAME *string `json:"USERNAME,omitempty"`
	IsTimeoutSupported *bool `json:"isTimeoutSupported,omitempty"`
	PASSWORD_NOOFCAPSALPHA *string `json:"PASSWORD_NOOFCAPSALPHA,omitempty"`
	PASSWORD_NOOFDIGITS *string `json:"PASSWORD_NOOFDIGITS,omitempty"`
	CONNECTIONPROPERTIES *string `json:"CONNECTIONPROPERTIES,omitempty"`
	MODIFYUSERDATAJSON *string `json:"MODIFYUSERDATAJSON,omitempty"`
	IsTimeoutConfigValidated *bool `json:"isTimeoutConfigValidated,omitempty"`
	ACCOUNTSIMPORT *string `json:"ACCOUNTSIMPORT,omitempty"`
	PASSWORD *string `json:"PASSWORD,omitempty"`
	ENABLEACCOUNTJSON *string `json:"ENABLEACCOUNTJSON,omitempty"`
	PASSWORD_MAX_LENGTH *string `json:"PASSWORD_MAX_LENGTH,omitempty"`
	MAX_PAGINATION_SIZE *string `json:"MAX_PAGINATION_SIZE,omitempty"`
	UPDATEACCOUNTJSON *string `json:"UPDATEACCOUNTJSON,omitempty"`
	GRANTACCESSJSON *string `json:"GRANTACCESSJSON,omitempty"`
	CLI_COMMAND_JSON *string `json:"CLI_COMMAND_JSON,omitempty"`
}

// NewDBConnectionAttributes instantiates a new DBConnectionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBConnectionAttributes() *DBConnectionAttributes {
	this := DBConnectionAttributes{}
	return &this
}

// NewDBConnectionAttributesWithDefaults instantiates a new DBConnectionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBConnectionAttributesWithDefaults() *DBConnectionAttributes {
	this := DBConnectionAttributes{}
	return &this
}

// GetPASSWORD_MIN_LENGTH returns the PASSWORD_MIN_LENGTH field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD_MIN_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MIN_LENGTH
}

// GetPASSWORD_MIN_LENGTHOk returns a tuple with the PASSWORD_MIN_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORD_MIN_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MIN_LENGTH, true
}

// HasPASSWORD_MIN_LENGTH returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD_MIN_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MIN_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MIN_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MIN_LENGTH field.
func (o *DBConnectionAttributes) SetPASSWORD_MIN_LENGTH(v string) {
	o.PASSWORD_MIN_LENGTH = &v
}

// GetCHANGEPASSJSON returns the CHANGEPASSJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetCHANGEPASSJSON() string {
	if o == nil || IsNil(o.CHANGEPASSJSON) {
		var ret string
		return ret
	}
	return *o.CHANGEPASSJSON
}

// GetCHANGEPASSJSONOk returns a tuple with the CHANGEPASSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetCHANGEPASSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CHANGEPASSJSON) {
		return nil, false
	}
	return o.CHANGEPASSJSON, true
}

// HasCHANGEPASSJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasCHANGEPASSJSON() bool {
	if o != nil && !IsNil(o.CHANGEPASSJSON) {
		return true
	}

	return false
}

// SetCHANGEPASSJSON gets a reference to the given string and assigns it to the CHANGEPASSJSON field.
func (o *DBConnectionAttributes) SetCHANGEPASSJSON(v string) {
	o.CHANGEPASSJSON = &v
}

// GetACCOUNTEXISTSJSON returns the ACCOUNTEXISTSJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetACCOUNTEXISTSJSON() string {
	if o == nil || IsNil(o.ACCOUNTEXISTSJSON) {
		var ret string
		return ret
	}
	return *o.ACCOUNTEXISTSJSON
}

// GetACCOUNTEXISTSJSONOk returns a tuple with the ACCOUNTEXISTSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetACCOUNTEXISTSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTEXISTSJSON) {
		return nil, false
	}
	return o.ACCOUNTEXISTSJSON, true
}

// HasACCOUNTEXISTSJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasACCOUNTEXISTSJSON() bool {
	if o != nil && !IsNil(o.ACCOUNTEXISTSJSON) {
		return true
	}

	return false
}

// SetACCOUNTEXISTSJSON gets a reference to the given string and assigns it to the ACCOUNTEXISTSJSON field.
func (o *DBConnectionAttributes) SetACCOUNTEXISTSJSON(v string) {
	o.ACCOUNTEXISTSJSON = &v
}

// GetROLESIMPORT returns the ROLESIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetROLESIMPORT() string {
	if o == nil || IsNil(o.ROLESIMPORT) {
		var ret string
		return ret
	}
	return *o.ROLESIMPORT
}

// GetROLESIMPORTOk returns a tuple with the ROLESIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetROLESIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ROLESIMPORT) {
		return nil, false
	}
	return o.ROLESIMPORT, true
}

// HasROLESIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasROLESIMPORT() bool {
	if o != nil && !IsNil(o.ROLESIMPORT) {
		return true
	}

	return false
}

// SetROLESIMPORT gets a reference to the given string and assigns it to the ROLESIMPORT field.
func (o *DBConnectionAttributes) SetROLESIMPORT(v string) {
	o.ROLESIMPORT = &v
}

// GetROLEOWNERIMPORT returns the ROLEOWNERIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetROLEOWNERIMPORT() string {
	if o == nil || IsNil(o.ROLEOWNERIMPORT) {
		var ret string
		return ret
	}
	return *o.ROLEOWNERIMPORT
}

// GetROLEOWNERIMPORTOk returns a tuple with the ROLEOWNERIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetROLEOWNERIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ROLEOWNERIMPORT) {
		return nil, false
	}
	return o.ROLEOWNERIMPORT, true
}

// HasROLEOWNERIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasROLEOWNERIMPORT() bool {
	if o != nil && !IsNil(o.ROLEOWNERIMPORT) {
		return true
	}

	return false
}

// SetROLEOWNERIMPORT gets a reference to the given string and assigns it to the ROLEOWNERIMPORT field.
func (o *DBConnectionAttributes) SetROLEOWNERIMPORT(v string) {
	o.ROLEOWNERIMPORT = &v
}

// GetCREATEACCOUNTJSON returns the CREATEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetCREATEACCOUNTJSON() string {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.CREATEACCOUNTJSON
}

// GetCREATEACCOUNTJSONOk returns a tuple with the CREATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetCREATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		return nil, false
	}
	return o.CREATEACCOUNTJSON, true
}

// HasCREATEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasCREATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.CREATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetCREATEACCOUNTJSON gets a reference to the given string and assigns it to the CREATEACCOUNTJSON field.
func (o *DBConnectionAttributes) SetCREATEACCOUNTJSON(v string) {
	o.CREATEACCOUNTJSON = &v
}

// GetUSERIMPORT returns the USERIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetUSERIMPORT() string {
	if o == nil || IsNil(o.USERIMPORT) {
		var ret string
		return ret
	}
	return *o.USERIMPORT
}

// GetUSERIMPORTOk returns a tuple with the USERIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetUSERIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.USERIMPORT) {
		return nil, false
	}
	return o.USERIMPORT, true
}

// HasUSERIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasUSERIMPORT() bool {
	if o != nil && !IsNil(o.USERIMPORT) {
		return true
	}

	return false
}

// SetUSERIMPORT gets a reference to the given string and assigns it to the USERIMPORT field.
func (o *DBConnectionAttributes) SetUSERIMPORT(v string) {
	o.USERIMPORT = &v
}

// GetDISABLEACCOUNTJSON returns the DISABLEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetDISABLEACCOUNTJSON() string {
	if o == nil || IsNil(o.DISABLEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.DISABLEACCOUNTJSON
}

// GetDISABLEACCOUNTJSONOk returns a tuple with the DISABLEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetDISABLEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.DISABLEACCOUNTJSON) {
		return nil, false
	}
	return o.DISABLEACCOUNTJSON, true
}

// HasDISABLEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasDISABLEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.DISABLEACCOUNTJSON) {
		return true
	}

	return false
}

// SetDISABLEACCOUNTJSON gets a reference to the given string and assigns it to the DISABLEACCOUNTJSON field.
func (o *DBConnectionAttributes) SetDISABLEACCOUNTJSON(v string) {
	o.DISABLEACCOUNTJSON = &v
}

// GetENTITLEMENTVALUEIMPORT returns the ENTITLEMENTVALUEIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetENTITLEMENTVALUEIMPORT() string {
	if o == nil || IsNil(o.ENTITLEMENTVALUEIMPORT) {
		var ret string
		return ret
	}
	return *o.ENTITLEMENTVALUEIMPORT
}

// GetENTITLEMENTVALUEIMPORTOk returns a tuple with the ENTITLEMENTVALUEIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetENTITLEMENTVALUEIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ENTITLEMENTVALUEIMPORT) {
		return nil, false
	}
	return o.ENTITLEMENTVALUEIMPORT, true
}

// HasENTITLEMENTVALUEIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasENTITLEMENTVALUEIMPORT() bool {
	if o != nil && !IsNil(o.ENTITLEMENTVALUEIMPORT) {
		return true
	}

	return false
}

// SetENTITLEMENTVALUEIMPORT gets a reference to the given string and assigns it to the ENTITLEMENTVALUEIMPORT field.
func (o *DBConnectionAttributes) SetENTITLEMENTVALUEIMPORT(v string) {
	o.ENTITLEMENTVALUEIMPORT = &v
}

// GetConnectionTimeoutConfig returns the ConnectionTimeoutConfig field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetConnectionTimeoutConfig() ConnectionTimeoutConfig {
	if o == nil || IsNil(o.ConnectionTimeoutConfig) {
		var ret ConnectionTimeoutConfig
		return ret
	}
	return *o.ConnectionTimeoutConfig
}

// GetConnectionTimeoutConfigOk returns a tuple with the ConnectionTimeoutConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetConnectionTimeoutConfigOk() (*ConnectionTimeoutConfig, bool) {
	if o == nil || IsNil(o.ConnectionTimeoutConfig) {
		return nil, false
	}
	return o.ConnectionTimeoutConfig, true
}

// HasConnectionTimeoutConfig returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasConnectionTimeoutConfig() bool {
	if o != nil && !IsNil(o.ConnectionTimeoutConfig) {
		return true
	}

	return false
}

// SetConnectionTimeoutConfig gets a reference to the given ConnectionTimeoutConfig and assigns it to the ConnectionTimeoutConfig field.
func (o *DBConnectionAttributes) SetConnectionTimeoutConfig(v ConnectionTimeoutConfig) {
	o.ConnectionTimeoutConfig = &v
}

// GetUPDATEUSERJSON returns the UPDATEUSERJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetUPDATEUSERJSON() string {
	if o == nil || IsNil(o.UPDATEUSERJSON) {
		var ret string
		return ret
	}
	return *o.UPDATEUSERJSON
}

// GetUPDATEUSERJSONOk returns a tuple with the UPDATEUSERJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetUPDATEUSERJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEUSERJSON) {
		return nil, false
	}
	return o.UPDATEUSERJSON, true
}

// HasUPDATEUSERJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasUPDATEUSERJSON() bool {
	if o != nil && !IsNil(o.UPDATEUSERJSON) {
		return true
	}

	return false
}

// SetUPDATEUSERJSON gets a reference to the given string and assigns it to the UPDATEUSERJSON field.
func (o *DBConnectionAttributes) SetUPDATEUSERJSON(v string) {
	o.UPDATEUSERJSON = &v
}

// GetPASSWORD_NOOFSPLCHARS returns the PASSWORD_NOOFSPLCHARS field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFSPLCHARS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFSPLCHARS
}

// GetPASSWORD_NOOFSPLCHARSOk returns a tuple with the PASSWORD_NOOFSPLCHARS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFSPLCHARSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return nil, false
	}
	return o.PASSWORD_NOOFSPLCHARS, true
}

// HasPASSWORD_NOOFSPLCHARS returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD_NOOFSPLCHARS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFSPLCHARS gets a reference to the given string and assigns it to the PASSWORD_NOOFSPLCHARS field.
func (o *DBConnectionAttributes) SetPASSWORD_NOOFSPLCHARS(v string) {
	o.PASSWORD_NOOFSPLCHARS = &v
}

// GetREVOKEACCESSJSON returns the REVOKEACCESSJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetREVOKEACCESSJSON() string {
	if o == nil || IsNil(o.REVOKEACCESSJSON) {
		var ret string
		return ret
	}
	return *o.REVOKEACCESSJSON
}

// GetREVOKEACCESSJSONOk returns a tuple with the REVOKEACCESSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetREVOKEACCESSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.REVOKEACCESSJSON) {
		return nil, false
	}
	return o.REVOKEACCESSJSON, true
}

// HasREVOKEACCESSJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasREVOKEACCESSJSON() bool {
	if o != nil && !IsNil(o.REVOKEACCESSJSON) {
		return true
	}

	return false
}

// SetREVOKEACCESSJSON gets a reference to the given string and assigns it to the REVOKEACCESSJSON field.
func (o *DBConnectionAttributes) SetREVOKEACCESSJSON(v string) {
	o.REVOKEACCESSJSON = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *DBConnectionAttributes) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetURL() string {
	if o == nil || IsNil(o.URL) {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetURLOk() (*string, bool) {
	if o == nil || IsNil(o.URL) {
		return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasURL() bool {
	if o != nil && !IsNil(o.URL) {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *DBConnectionAttributes) SetURL(v string) {
	o.URL = &v
}

// GetSYSTEMIMPORT returns the SYSTEMIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetSYSTEMIMPORT() string {
	if o == nil || IsNil(o.SYSTEMIMPORT) {
		var ret string
		return ret
	}
	return *o.SYSTEMIMPORT
}

// GetSYSTEMIMPORTOk returns a tuple with the SYSTEMIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetSYSTEMIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.SYSTEMIMPORT) {
		return nil, false
	}
	return o.SYSTEMIMPORT, true
}

// HasSYSTEMIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasSYSTEMIMPORT() bool {
	if o != nil && !IsNil(o.SYSTEMIMPORT) {
		return true
	}

	return false
}

// SetSYSTEMIMPORT gets a reference to the given string and assigns it to the SYSTEMIMPORT field.
func (o *DBConnectionAttributes) SetSYSTEMIMPORT(v string) {
	o.SYSTEMIMPORT = &v
}

// GetDRIVERNAME returns the DRIVERNAME field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetDRIVERNAME() string {
	if o == nil || IsNil(o.DRIVERNAME) {
		var ret string
		return ret
	}
	return *o.DRIVERNAME
}

// GetDRIVERNAMEOk returns a tuple with the DRIVERNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetDRIVERNAMEOk() (*string, bool) {
	if o == nil || IsNil(o.DRIVERNAME) {
		return nil, false
	}
	return o.DRIVERNAME, true
}

// HasDRIVERNAME returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasDRIVERNAME() bool {
	if o != nil && !IsNil(o.DRIVERNAME) {
		return true
	}

	return false
}

// SetDRIVERNAME gets a reference to the given string and assigns it to the DRIVERNAME field.
func (o *DBConnectionAttributes) SetDRIVERNAME(v string) {
	o.DRIVERNAME = &v
}

// GetDELETEACCOUNTJSON returns the DELETEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetDELETEACCOUNTJSON() string {
	if o == nil || IsNil(o.DELETEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.DELETEACCOUNTJSON
}

// GetDELETEACCOUNTJSONOk returns a tuple with the DELETEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetDELETEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.DELETEACCOUNTJSON) {
		return nil, false
	}
	return o.DELETEACCOUNTJSON, true
}

// HasDELETEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasDELETEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.DELETEACCOUNTJSON) {
		return true
	}

	return false
}

// SetDELETEACCOUNTJSON gets a reference to the given string and assigns it to the DELETEACCOUNTJSON field.
func (o *DBConnectionAttributes) SetDELETEACCOUNTJSON(v string) {
	o.DELETEACCOUNTJSON = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *DBConnectionAttributes) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetUSERNAME returns the USERNAME field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetUSERNAME() string {
	if o == nil || IsNil(o.USERNAME) {
		var ret string
		return ret
	}
	return *o.USERNAME
}

// GetUSERNAMEOk returns a tuple with the USERNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetUSERNAMEOk() (*string, bool) {
	if o == nil || IsNil(o.USERNAME) {
		return nil, false
	}
	return o.USERNAME, true
}

// HasUSERNAME returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasUSERNAME() bool {
	if o != nil && !IsNil(o.USERNAME) {
		return true
	}

	return false
}

// SetUSERNAME gets a reference to the given string and assigns it to the USERNAME field.
func (o *DBConnectionAttributes) SetUSERNAME(v string) {
	o.USERNAME = &v
}

// GetIsTimeoutSupported returns the IsTimeoutSupported field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetIsTimeoutSupported() bool {
	if o == nil || IsNil(o.IsTimeoutSupported) {
		var ret bool
		return ret
	}
	return *o.IsTimeoutSupported
}

// GetIsTimeoutSupportedOk returns a tuple with the IsTimeoutSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetIsTimeoutSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTimeoutSupported) {
		return nil, false
	}
	return o.IsTimeoutSupported, true
}

// HasIsTimeoutSupported returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasIsTimeoutSupported() bool {
	if o != nil && !IsNil(o.IsTimeoutSupported) {
		return true
	}

	return false
}

// SetIsTimeoutSupported gets a reference to the given bool and assigns it to the IsTimeoutSupported field.
func (o *DBConnectionAttributes) SetIsTimeoutSupported(v bool) {
	o.IsTimeoutSupported = &v
}

// GetPASSWORD_NOOFCAPSALPHA returns the PASSWORD_NOOFCAPSALPHA field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFCAPSALPHA() string {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFCAPSALPHA
}

// GetPASSWORD_NOOFCAPSALPHAOk returns a tuple with the PASSWORD_NOOFCAPSALPHA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFCAPSALPHAOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return nil, false
	}
	return o.PASSWORD_NOOFCAPSALPHA, true
}

// HasPASSWORD_NOOFCAPSALPHA returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD_NOOFCAPSALPHA() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFCAPSALPHA gets a reference to the given string and assigns it to the PASSWORD_NOOFCAPSALPHA field.
func (o *DBConnectionAttributes) SetPASSWORD_NOOFCAPSALPHA(v string) {
	o.PASSWORD_NOOFCAPSALPHA = &v
}

// GetPASSWORD_NOOFDIGITS returns the PASSWORD_NOOFDIGITS field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFDIGITS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFDIGITS
}

// GetPASSWORD_NOOFDIGITSOk returns a tuple with the PASSWORD_NOOFDIGITS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORD_NOOFDIGITSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		return nil, false
	}
	return o.PASSWORD_NOOFDIGITS, true
}

// HasPASSWORD_NOOFDIGITS returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD_NOOFDIGITS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFDIGITS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFDIGITS gets a reference to the given string and assigns it to the PASSWORD_NOOFDIGITS field.
func (o *DBConnectionAttributes) SetPASSWORD_NOOFDIGITS(v string) {
	o.PASSWORD_NOOFDIGITS = &v
}

// GetCONNECTIONPROPERTIES returns the CONNECTIONPROPERTIES field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetCONNECTIONPROPERTIES() string {
	if o == nil || IsNil(o.CONNECTIONPROPERTIES) {
		var ret string
		return ret
	}
	return *o.CONNECTIONPROPERTIES
}

// GetCONNECTIONPROPERTIESOk returns a tuple with the CONNECTIONPROPERTIES field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetCONNECTIONPROPERTIESOk() (*string, bool) {
	if o == nil || IsNil(o.CONNECTIONPROPERTIES) {
		return nil, false
	}
	return o.CONNECTIONPROPERTIES, true
}

// HasCONNECTIONPROPERTIES returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasCONNECTIONPROPERTIES() bool {
	if o != nil && !IsNil(o.CONNECTIONPROPERTIES) {
		return true
	}

	return false
}

// SetCONNECTIONPROPERTIES gets a reference to the given string and assigns it to the CONNECTIONPROPERTIES field.
func (o *DBConnectionAttributes) SetCONNECTIONPROPERTIES(v string) {
	o.CONNECTIONPROPERTIES = &v
}

// GetMODIFYUSERDATAJSON returns the MODIFYUSERDATAJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetMODIFYUSERDATAJSON() string {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		var ret string
		return ret
	}
	return *o.MODIFYUSERDATAJSON
}

// GetMODIFYUSERDATAJSONOk returns a tuple with the MODIFYUSERDATAJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetMODIFYUSERDATAJSONOk() (*string, bool) {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		return nil, false
	}
	return o.MODIFYUSERDATAJSON, true
}

// HasMODIFYUSERDATAJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasMODIFYUSERDATAJSON() bool {
	if o != nil && !IsNil(o.MODIFYUSERDATAJSON) {
		return true
	}

	return false
}

// SetMODIFYUSERDATAJSON gets a reference to the given string and assigns it to the MODIFYUSERDATAJSON field.
func (o *DBConnectionAttributes) SetMODIFYUSERDATAJSON(v string) {
	o.MODIFYUSERDATAJSON = &v
}

// GetIsTimeoutConfigValidated returns the IsTimeoutConfigValidated field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetIsTimeoutConfigValidated() bool {
	if o == nil || IsNil(o.IsTimeoutConfigValidated) {
		var ret bool
		return ret
	}
	return *o.IsTimeoutConfigValidated
}

// GetIsTimeoutConfigValidatedOk returns a tuple with the IsTimeoutConfigValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetIsTimeoutConfigValidatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTimeoutConfigValidated) {
		return nil, false
	}
	return o.IsTimeoutConfigValidated, true
}

// HasIsTimeoutConfigValidated returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasIsTimeoutConfigValidated() bool {
	if o != nil && !IsNil(o.IsTimeoutConfigValidated) {
		return true
	}

	return false
}

// SetIsTimeoutConfigValidated gets a reference to the given bool and assigns it to the IsTimeoutConfigValidated field.
func (o *DBConnectionAttributes) SetIsTimeoutConfigValidated(v bool) {
	o.IsTimeoutConfigValidated = &v
}

// GetACCOUNTSIMPORT returns the ACCOUNTSIMPORT field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetACCOUNTSIMPORT() string {
	if o == nil || IsNil(o.ACCOUNTSIMPORT) {
		var ret string
		return ret
	}
	return *o.ACCOUNTSIMPORT
}

// GetACCOUNTSIMPORTOk returns a tuple with the ACCOUNTSIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetACCOUNTSIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTSIMPORT) {
		return nil, false
	}
	return o.ACCOUNTSIMPORT, true
}

// HasACCOUNTSIMPORT returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasACCOUNTSIMPORT() bool {
	if o != nil && !IsNil(o.ACCOUNTSIMPORT) {
		return true
	}

	return false
}

// SetACCOUNTSIMPORT gets a reference to the given string and assigns it to the ACCOUNTSIMPORT field.
func (o *DBConnectionAttributes) SetACCOUNTSIMPORT(v string) {
	o.ACCOUNTSIMPORT = &v
}

// GetPASSWORD returns the PASSWORD field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD() string {
	if o == nil || IsNil(o.PASSWORD) {
		var ret string
		return ret
	}
	return *o.PASSWORD
}

// GetPASSWORDOk returns a tuple with the PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORDOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD) {
		return nil, false
	}
	return o.PASSWORD, true
}

// HasPASSWORD returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD() bool {
	if o != nil && !IsNil(o.PASSWORD) {
		return true
	}

	return false
}

// SetPASSWORD gets a reference to the given string and assigns it to the PASSWORD field.
func (o *DBConnectionAttributes) SetPASSWORD(v string) {
	o.PASSWORD = &v
}

// GetENABLEACCOUNTJSON returns the ENABLEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetENABLEACCOUNTJSON() string {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.ENABLEACCOUNTJSON
}

// GetENABLEACCOUNTJSONOk returns a tuple with the ENABLEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetENABLEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		return nil, false
	}
	return o.ENABLEACCOUNTJSON, true
}

// HasENABLEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasENABLEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.ENABLEACCOUNTJSON) {
		return true
	}

	return false
}

// SetENABLEACCOUNTJSON gets a reference to the given string and assigns it to the ENABLEACCOUNTJSON field.
func (o *DBConnectionAttributes) SetENABLEACCOUNTJSON(v string) {
	o.ENABLEACCOUNTJSON = &v
}

// GetPASSWORD_MAX_LENGTH returns the PASSWORD_MAX_LENGTH field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetPASSWORD_MAX_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MAX_LENGTH
}

// GetPASSWORD_MAX_LENGTHOk returns a tuple with the PASSWORD_MAX_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetPASSWORD_MAX_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MAX_LENGTH, true
}

// HasPASSWORD_MAX_LENGTH returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasPASSWORD_MAX_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MAX_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MAX_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MAX_LENGTH field.
func (o *DBConnectionAttributes) SetPASSWORD_MAX_LENGTH(v string) {
	o.PASSWORD_MAX_LENGTH = &v
}

// GetMAX_PAGINATION_SIZE returns the MAX_PAGINATION_SIZE field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetMAX_PAGINATION_SIZE() string {
	if o == nil || IsNil(o.MAX_PAGINATION_SIZE) {
		var ret string
		return ret
	}
	return *o.MAX_PAGINATION_SIZE
}

// GetMAX_PAGINATION_SIZEOk returns a tuple with the MAX_PAGINATION_SIZE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetMAX_PAGINATION_SIZEOk() (*string, bool) {
	if o == nil || IsNil(o.MAX_PAGINATION_SIZE) {
		return nil, false
	}
	return o.MAX_PAGINATION_SIZE, true
}

// HasMAX_PAGINATION_SIZE returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasMAX_PAGINATION_SIZE() bool {
	if o != nil && !IsNil(o.MAX_PAGINATION_SIZE) {
		return true
	}

	return false
}

// SetMAX_PAGINATION_SIZE gets a reference to the given string and assigns it to the MAX_PAGINATION_SIZE field.
func (o *DBConnectionAttributes) SetMAX_PAGINATION_SIZE(v string) {
	o.MAX_PAGINATION_SIZE = &v
}

// GetUPDATEACCOUNTJSON returns the UPDATEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetUPDATEACCOUNTJSON() string {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.UPDATEACCOUNTJSON
}

// GetUPDATEACCOUNTJSONOk returns a tuple with the UPDATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetUPDATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		return nil, false
	}
	return o.UPDATEACCOUNTJSON, true
}

// HasUPDATEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasUPDATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.UPDATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetUPDATEACCOUNTJSON gets a reference to the given string and assigns it to the UPDATEACCOUNTJSON field.
func (o *DBConnectionAttributes) SetUPDATEACCOUNTJSON(v string) {
	o.UPDATEACCOUNTJSON = &v
}

// GetGRANTACCESSJSON returns the GRANTACCESSJSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetGRANTACCESSJSON() string {
	if o == nil || IsNil(o.GRANTACCESSJSON) {
		var ret string
		return ret
	}
	return *o.GRANTACCESSJSON
}

// GetGRANTACCESSJSONOk returns a tuple with the GRANTACCESSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetGRANTACCESSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.GRANTACCESSJSON) {
		return nil, false
	}
	return o.GRANTACCESSJSON, true
}

// HasGRANTACCESSJSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasGRANTACCESSJSON() bool {
	if o != nil && !IsNil(o.GRANTACCESSJSON) {
		return true
	}

	return false
}

// SetGRANTACCESSJSON gets a reference to the given string and assigns it to the GRANTACCESSJSON field.
func (o *DBConnectionAttributes) SetGRANTACCESSJSON(v string) {
	o.GRANTACCESSJSON = &v
}

// GetCLI_COMMAND_JSON returns the CLI_COMMAND_JSON field value if set, zero value otherwise.
func (o *DBConnectionAttributes) GetCLI_COMMAND_JSON() string {
	if o == nil || IsNil(o.CLI_COMMAND_JSON) {
		var ret string
		return ret
	}
	return *o.CLI_COMMAND_JSON
}

// GetCLI_COMMAND_JSONOk returns a tuple with the CLI_COMMAND_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnectionAttributes) GetCLI_COMMAND_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.CLI_COMMAND_JSON) {
		return nil, false
	}
	return o.CLI_COMMAND_JSON, true
}

// HasCLI_COMMAND_JSON returns a boolean if a field has been set.
func (o *DBConnectionAttributes) HasCLI_COMMAND_JSON() bool {
	if o != nil && !IsNil(o.CLI_COMMAND_JSON) {
		return true
	}

	return false
}

// SetCLI_COMMAND_JSON gets a reference to the given string and assigns it to the CLI_COMMAND_JSON field.
func (o *DBConnectionAttributes) SetCLI_COMMAND_JSON(v string) {
	o.CLI_COMMAND_JSON = &v
}

func (o DBConnectionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBConnectionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PASSWORD_MIN_LENGTH) {
		toSerialize["PASSWORD_MIN_LENGTH"] = o.PASSWORD_MIN_LENGTH
	}
	if !IsNil(o.CHANGEPASSJSON) {
		toSerialize["CHANGEPASSJSON"] = o.CHANGEPASSJSON
	}
	if !IsNil(o.ACCOUNTEXISTSJSON) {
		toSerialize["ACCOUNTEXISTSJSON"] = o.ACCOUNTEXISTSJSON
	}
	if !IsNil(o.ROLESIMPORT) {
		toSerialize["ROLESIMPORT"] = o.ROLESIMPORT
	}
	if !IsNil(o.ROLEOWNERIMPORT) {
		toSerialize["ROLEOWNERIMPORT"] = o.ROLEOWNERIMPORT
	}
	if !IsNil(o.CREATEACCOUNTJSON) {
		toSerialize["CREATEACCOUNTJSON"] = o.CREATEACCOUNTJSON
	}
	if !IsNil(o.USERIMPORT) {
		toSerialize["USERIMPORT"] = o.USERIMPORT
	}
	if !IsNil(o.DISABLEACCOUNTJSON) {
		toSerialize["DISABLEACCOUNTJSON"] = o.DISABLEACCOUNTJSON
	}
	if !IsNil(o.ENTITLEMENTVALUEIMPORT) {
		toSerialize["ENTITLEMENTVALUEIMPORT"] = o.ENTITLEMENTVALUEIMPORT
	}
	if !IsNil(o.ConnectionTimeoutConfig) {
		toSerialize["connectionTimeoutConfig"] = o.ConnectionTimeoutConfig
	}
	if !IsNil(o.UPDATEUSERJSON) {
		toSerialize["UPDATEUSERJSON"] = o.UPDATEUSERJSON
	}
	if !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		toSerialize["PASSWORD_NOOFSPLCHARS"] = o.PASSWORD_NOOFSPLCHARS
	}
	if !IsNil(o.REVOKEACCESSJSON) {
		toSerialize["REVOKEACCESSJSON"] = o.REVOKEACCESSJSON
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !IsNil(o.URL) {
		toSerialize["URL"] = o.URL
	}
	if !IsNil(o.SYSTEMIMPORT) {
		toSerialize["SYSTEMIMPORT"] = o.SYSTEMIMPORT
	}
	if !IsNil(o.DRIVERNAME) {
		toSerialize["DRIVERNAME"] = o.DRIVERNAME
	}
	if !IsNil(o.DELETEACCOUNTJSON) {
		toSerialize["DELETEACCOUNTJSON"] = o.DELETEACCOUNTJSON
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.USERNAME) {
		toSerialize["USERNAME"] = o.USERNAME
	}
	if !IsNil(o.IsTimeoutSupported) {
		toSerialize["isTimeoutSupported"] = o.IsTimeoutSupported
	}
	if !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		toSerialize["PASSWORD_NOOFCAPSALPHA"] = o.PASSWORD_NOOFCAPSALPHA
	}
	if !IsNil(o.PASSWORD_NOOFDIGITS) {
		toSerialize["PASSWORD_NOOFDIGITS"] = o.PASSWORD_NOOFDIGITS
	}
	if !IsNil(o.CONNECTIONPROPERTIES) {
		toSerialize["CONNECTIONPROPERTIES"] = o.CONNECTIONPROPERTIES
	}
	if !IsNil(o.MODIFYUSERDATAJSON) {
		toSerialize["MODIFYUSERDATAJSON"] = o.MODIFYUSERDATAJSON
	}
	if !IsNil(o.IsTimeoutConfigValidated) {
		toSerialize["isTimeoutConfigValidated"] = o.IsTimeoutConfigValidated
	}
	if !IsNil(o.ACCOUNTSIMPORT) {
		toSerialize["ACCOUNTSIMPORT"] = o.ACCOUNTSIMPORT
	}
	if !IsNil(o.PASSWORD) {
		toSerialize["PASSWORD"] = o.PASSWORD
	}
	if !IsNil(o.ENABLEACCOUNTJSON) {
		toSerialize["ENABLEACCOUNTJSON"] = o.ENABLEACCOUNTJSON
	}
	if !IsNil(o.PASSWORD_MAX_LENGTH) {
		toSerialize["PASSWORD_MAX_LENGTH"] = o.PASSWORD_MAX_LENGTH
	}
	if !IsNil(o.MAX_PAGINATION_SIZE) {
		toSerialize["MAX_PAGINATION_SIZE"] = o.MAX_PAGINATION_SIZE
	}
	if !IsNil(o.UPDATEACCOUNTJSON) {
		toSerialize["UPDATEACCOUNTJSON"] = o.UPDATEACCOUNTJSON
	}
	if !IsNil(o.GRANTACCESSJSON) {
		toSerialize["GRANTACCESSJSON"] = o.GRANTACCESSJSON
	}
	if !IsNil(o.CLI_COMMAND_JSON) {
		toSerialize["CLI_COMMAND_JSON"] = o.CLI_COMMAND_JSON
	}
	return toSerialize, nil
}

type NullableDBConnectionAttributes struct {
	value *DBConnectionAttributes
	isSet bool
}

func (v NullableDBConnectionAttributes) Get() *DBConnectionAttributes {
	return v.value
}

func (v *NullableDBConnectionAttributes) Set(val *DBConnectionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDBConnectionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDBConnectionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBConnectionAttributes(val *DBConnectionAttributes) *NullableDBConnectionAttributes {
	return &NullableDBConnectionAttributes{value: val, isSet: true}
}

func (v NullableDBConnectionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBConnectionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


