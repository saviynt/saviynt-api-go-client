/*
testConnection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BaseConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseConnector{}

// BaseConnector struct for BaseConnector
type BaseConnector struct {
	// Name of the connection
	ConnectionName string `json:"connectionName"`
	// Connection type (e.g., 'AD' for Active Directory).
	Connectiontype string `json:"connectiontype"`
	// Description for the connection.
	Description *string `json:"description,omitempty"`
	// Default SAV roles for managing the connection.
	Defaultsavroles *string `json:"defaultsavroles,omitempty"`
	// Email template for notifications.
	EmailTemplate *string `json:"emailTemplate,omitempty"`
	// SSL certificates to secure the connection.
	SslCertificate *string `json:"sslCertificate,omitempty"`
	// Specifies the type of vault connection being used (e.g., Hashicorp, AWS Secrets Manager).
	VaultConnection *string `json:"vaultConnection,omitempty"`
	// JSON string specifying vault configuration
	VaultConfiguration *string `json:"vaultConfiguration,omitempty"`
	// Flag indicating whether the encrypted attribute should be saved in the configured vault.
	Saveinvault *string `json:"saveinvault,omitempty"`
}

type _BaseConnector BaseConnector

// NewBaseConnector instantiates a new BaseConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseConnector(connectionName string, connectiontype string) *BaseConnector {
	this := BaseConnector{}
	this.ConnectionName = connectionName
	this.Connectiontype = connectiontype
	return &this
}

// NewBaseConnectorWithDefaults instantiates a new BaseConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseConnectorWithDefaults() *BaseConnector {
	this := BaseConnector{}
	return &this
}

// GetConnectionName returns the ConnectionName field value
func (o *BaseConnector) GetConnectionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetConnectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionName, true
}

// SetConnectionName sets field value
func (o *BaseConnector) SetConnectionName(v string) {
	o.ConnectionName = v
}

// GetConnectiontype returns the Connectiontype field value
func (o *BaseConnector) GetConnectiontype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connectiontype
}

// GetConnectiontypeOk returns a tuple with the Connectiontype field value
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetConnectiontypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connectiontype, true
}

// SetConnectiontype sets field value
func (o *BaseConnector) SetConnectiontype(v string) {
	o.Connectiontype = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseConnector) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseConnector) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseConnector) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultsavroles returns the Defaultsavroles field value if set, zero value otherwise.
func (o *BaseConnector) GetDefaultsavroles() string {
	if o == nil || IsNil(o.Defaultsavroles) {
		var ret string
		return ret
	}
	return *o.Defaultsavroles
}

// GetDefaultsavrolesOk returns a tuple with the Defaultsavroles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetDefaultsavrolesOk() (*string, bool) {
	if o == nil || IsNil(o.Defaultsavroles) {
		return nil, false
	}
	return o.Defaultsavroles, true
}

// HasDefaultsavroles returns a boolean if a field has been set.
func (o *BaseConnector) HasDefaultsavroles() bool {
	if o != nil && !IsNil(o.Defaultsavroles) {
		return true
	}

	return false
}

// SetDefaultsavroles gets a reference to the given string and assigns it to the Defaultsavroles field.
func (o *BaseConnector) SetDefaultsavroles(v string) {
	o.Defaultsavroles = &v
}

// GetEmailTemplate returns the EmailTemplate field value if set, zero value otherwise.
func (o *BaseConnector) GetEmailTemplate() string {
	if o == nil || IsNil(o.EmailTemplate) {
		var ret string
		return ret
	}
	return *o.EmailTemplate
}

// GetEmailTemplateOk returns a tuple with the EmailTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetEmailTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.EmailTemplate) {
		return nil, false
	}
	return o.EmailTemplate, true
}

// HasEmailTemplate returns a boolean if a field has been set.
func (o *BaseConnector) HasEmailTemplate() bool {
	if o != nil && !IsNil(o.EmailTemplate) {
		return true
	}

	return false
}

// SetEmailTemplate gets a reference to the given string and assigns it to the EmailTemplate field.
func (o *BaseConnector) SetEmailTemplate(v string) {
	o.EmailTemplate = &v
}

// GetSslCertificate returns the SslCertificate field value if set, zero value otherwise.
func (o *BaseConnector) GetSslCertificate() string {
	if o == nil || IsNil(o.SslCertificate) {
		var ret string
		return ret
	}
	return *o.SslCertificate
}

// GetSslCertificateOk returns a tuple with the SslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetSslCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.SslCertificate) {
		return nil, false
	}
	return o.SslCertificate, true
}

// HasSslCertificate returns a boolean if a field has been set.
func (o *BaseConnector) HasSslCertificate() bool {
	if o != nil && !IsNil(o.SslCertificate) {
		return true
	}

	return false
}

// SetSslCertificate gets a reference to the given string and assigns it to the SslCertificate field.
func (o *BaseConnector) SetSslCertificate(v string) {
	o.SslCertificate = &v
}

// GetVaultConnection returns the VaultConnection field value if set, zero value otherwise.
func (o *BaseConnector) GetVaultConnection() string {
	if o == nil || IsNil(o.VaultConnection) {
		var ret string
		return ret
	}
	return *o.VaultConnection
}

// GetVaultConnectionOk returns a tuple with the VaultConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetVaultConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.VaultConnection) {
		return nil, false
	}
	return o.VaultConnection, true
}

// HasVaultConnection returns a boolean if a field has been set.
func (o *BaseConnector) HasVaultConnection() bool {
	if o != nil && !IsNil(o.VaultConnection) {
		return true
	}

	return false
}

// SetVaultConnection gets a reference to the given string and assigns it to the VaultConnection field.
func (o *BaseConnector) SetVaultConnection(v string) {
	o.VaultConnection = &v
}

// GetVaultConfiguration returns the VaultConfiguration field value if set, zero value otherwise.
func (o *BaseConnector) GetVaultConfiguration() string {
	if o == nil || IsNil(o.VaultConfiguration) {
		var ret string
		return ret
	}
	return *o.VaultConfiguration
}

// GetVaultConfigurationOk returns a tuple with the VaultConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetVaultConfigurationOk() (*string, bool) {
	if o == nil || IsNil(o.VaultConfiguration) {
		return nil, false
	}
	return o.VaultConfiguration, true
}

// HasVaultConfiguration returns a boolean if a field has been set.
func (o *BaseConnector) HasVaultConfiguration() bool {
	if o != nil && !IsNil(o.VaultConfiguration) {
		return true
	}

	return false
}

// SetVaultConfiguration gets a reference to the given string and assigns it to the VaultConfiguration field.
func (o *BaseConnector) SetVaultConfiguration(v string) {
	o.VaultConfiguration = &v
}

// GetSaveinvault returns the Saveinvault field value if set, zero value otherwise.
func (o *BaseConnector) GetSaveinvault() string {
	if o == nil || IsNil(o.Saveinvault) {
		var ret string
		return ret
	}
	return *o.Saveinvault
}

// GetSaveinvaultOk returns a tuple with the Saveinvault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnector) GetSaveinvaultOk() (*string, bool) {
	if o == nil || IsNil(o.Saveinvault) {
		return nil, false
	}
	return o.Saveinvault, true
}

// HasSaveinvault returns a boolean if a field has been set.
func (o *BaseConnector) HasSaveinvault() bool {
	if o != nil && !IsNil(o.Saveinvault) {
		return true
	}

	return false
}

// SetSaveinvault gets a reference to the given string and assigns it to the Saveinvault field.
func (o *BaseConnector) SetSaveinvault(v string) {
	o.Saveinvault = &v
}

func (o BaseConnector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionName"] = o.ConnectionName
	toSerialize["connectiontype"] = o.Connectiontype
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Defaultsavroles) {
		toSerialize["defaultsavroles"] = o.Defaultsavroles
	}
	if !IsNil(o.EmailTemplate) {
		toSerialize["emailTemplate"] = o.EmailTemplate
	}
	if !IsNil(o.SslCertificate) {
		toSerialize["sslCertificate"] = o.SslCertificate
	}
	if !IsNil(o.VaultConnection) {
		toSerialize["vaultConnection"] = o.VaultConnection
	}
	if !IsNil(o.VaultConfiguration) {
		toSerialize["vaultConfiguration"] = o.VaultConfiguration
	}
	if !IsNil(o.Saveinvault) {
		toSerialize["saveinvault"] = o.Saveinvault
	}
	return toSerialize, nil
}

func (o *BaseConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionName",
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseConnector := _BaseConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseConnector)

	if err != nil {
		return err
	}

	*o = BaseConnector(varBaseConnector)

	return err
}

type NullableBaseConnector struct {
	value *BaseConnector
	isSet bool
}

func (v NullableBaseConnector) Get() *BaseConnector {
	return v.value
}

func (v *NullableBaseConnector) Set(val *BaseConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseConnector(val *BaseConnector) *NullableBaseConnector {
	return &NullableBaseConnector{value: val, isSet: true}
}

func (v NullableBaseConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
