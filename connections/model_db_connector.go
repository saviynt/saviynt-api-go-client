/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DBConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBConnector{}

// DBConnector struct for DBConnector
type DBConnector struct {
	BaseConnector
	// Host Name for connection
	URL string `json:"URL"`
	// Username for connection
	USERNAME string `json:"USERNAME"`
	// Password for connection
	PASSWORD string `json:"PASSWORD"`
	// Driver name for the connection
	DRIVERNAME string `json:"DRIVERNAME"`
	// Properties that needs to be added when connecting to the database
	CONNECTIONPROPERTIES *string `json:"CONNECTIONPROPERTIES,omitempty"`
	// Specify the Min length for the random password
	PASSWORD_MIN_LENGTH *string `json:"PASSWORD_MIN_LENGTH,omitempty"`
	// Specify the Max length for the random password
	PASSWORD_MAX_LENGTH *string `json:"PASSWORD_MAX_LENGTH,omitempty"`
	// Specify the Number of Upper case alphabets required for the random password
	PASSWORD_NOOFCAPSALPHA *string `json:"PASSWORD_NOOFCAPSALPHA,omitempty"`
	// Specify the Number of digits required for the random password
	PASSWORD_NOOFDIGITS *string `json:"PASSWORD_NOOFDIGITS,omitempty"`
	// Specify the Number of special chars required for the random password
	PASSWORD_NOOFSPLCHARS *string `json:"PASSWORD_NOOFSPLCHARS,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to Create the New Account,Objects Exposed-(randomPassword,task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes )
	CREATEACCOUNTJSON *string `json:"CREATEACCOUNTJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to Update an existing Account,Objects Exposed-(randomPassword,task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	UPDATEACCOUNTJSON *string `json:"UPDATEACCOUNTJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to provide acccess,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	GRANTACCESSJSON *string `json:"GRANTACCESSJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to revoke access,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	REVOKEACCESSJSON *string `json:"REVOKEACCESSJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to change password,Objects Exposed-(randomPassword,task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	CHANGEPASSJSON *string `json:"CHANGEPASSJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to delete an account,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	DELETEACCOUNTJSON *string `json:"DELETEACCOUNTJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to Enable,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	ENABLEACCOUNTJSON *string `json:"ENABLEACCOUNTJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to Disable Account,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	DISABLEACCOUNTJSON *string `json:"DISABLEACCOUNTJSON,omitempty"`
	// JSON to specify the Query which will be used to check whether an account exists,Objects Exposed-(task,user,accountName,role,endpoint and all the objects defined in Dynamic Attributes ).
	ACCOUNTEXISTSJSON *string `json:"ACCOUNTEXISTSJSON,omitempty"`
	// JSON to specify the Queries/stored procedures which will be used to Update an existing Account,Objects Exposed-(randomPassword,task,user,accountName,role,updatetaskuser,endpoint and all the objects defined in Dynamic Attributes ).
	UPDATEUSERJSON *string `json:"UPDATEUSERJSON,omitempty"`
	// Accounts Import XML file content
	ACCOUNTSIMPORT *string `json:"ACCOUNTSIMPORT,omitempty"`
	// Entitlement Value Import XML file content
	ENTITLEMENTVALUEIMPORT *string `json:"ENTITLEMENTVALUEIMPORT,omitempty"`
	// Role Owner Import XML file contentT
	ROLEOWNERIMPORT *string `json:"ROLEOWNERIMPORT,omitempty"`
	// Roles Import XML file content
	ROLESIMPORT *string `json:"ROLESIMPORT,omitempty"`
	// System Import XML file content
	SYSTEMIMPORT *string `json:"SYSTEMIMPORT,omitempty"`
	// User Import XML file content
	USERIMPORT *string `json:"USERIMPORT,omitempty"`
	// Property for MODIFYUSERDATAJSON
	MODIFYUSERDATAJSON *string `json:"MODIFYUSERDATAJSON,omitempty"`
	// Applicable for Accounts full import only.If this config isdefined with status/threshold values, it will take precedence over account_not_in_file_action defined in ACCOUNTIMPORT xml.If this config is defined with only correlateInactiveAccounts, then account_not_in_file_action will used as normal.The attributes of statusAndThresholdConfig json are:statusColumn: Property in saviynt which stores the status of target system.activeStatus:All possible values that denotes the Active status of the target system.accountThresholdValue: No. of accounts to be deleted in Saviynt >= accountThresholdValue, it performs NO ACTION, else it disables the accounts.inactivateAccountsNotInFile: If true,accounts not in file are marked as Inactive. If false, accounts not in file are marked as SUSPENDED FROM IMPORT SERVICE.CorrelateInactiveAccounts: If true, correlates disabled accounts as well with the users.
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	// Defines the max number of records from the target to be processed in each page
	MAX_PAGINATION_SIZE *string `json:"MAX_PAGINATION_SIZE,omitempty"`
	// JSON to specify the commands which can be executed in target server.
	CLI_COMMAND_JSON *string `json:"CLI_COMMAND_JSON,omitempty"`
}

type _DBConnector DBConnector

// NewDBConnector instantiates a new DBConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBConnector(uRL string, uSERNAME string, pASSWORD string, dRIVERNAME string, connectionName string, connectiontype string) *DBConnector {
	this := DBConnector{}
	this.ConnectionName = connectionName
	this.Connectiontype = connectiontype
	this.URL = uRL
	this.USERNAME = uSERNAME
	this.PASSWORD = pASSWORD
	this.DRIVERNAME = dRIVERNAME
	return &this
}

// NewDBConnectorWithDefaults instantiates a new DBConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBConnectorWithDefaults() *DBConnector {
	this := DBConnector{}
	return &this
}

// GetURL returns the URL field value
func (o *DBConnector) GetURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.URL
}

// GetURLOk returns a tuple with the URL field value
// and a boolean to check if the value has been set.
func (o *DBConnector) GetURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.URL, true
}

// SetURL sets field value
func (o *DBConnector) SetURL(v string) {
	o.URL = v
}

// GetUSERNAME returns the USERNAME field value
func (o *DBConnector) GetUSERNAME() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.USERNAME
}

// GetUSERNAMEOk returns a tuple with the USERNAME field value
// and a boolean to check if the value has been set.
func (o *DBConnector) GetUSERNAMEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.USERNAME, true
}

// SetUSERNAME sets field value
func (o *DBConnector) SetUSERNAME(v string) {
	o.USERNAME = v
}

// GetPASSWORD returns the PASSWORD field value
func (o *DBConnector) GetPASSWORD() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PASSWORD
}

// GetPASSWORDOk returns a tuple with the PASSWORD field value
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PASSWORD, true
}

// SetPASSWORD sets field value
func (o *DBConnector) SetPASSWORD(v string) {
	o.PASSWORD = v
}

// GetDRIVERNAME returns the DRIVERNAME field value
func (o *DBConnector) GetDRIVERNAME() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DRIVERNAME
}

// GetDRIVERNAMEOk returns a tuple with the DRIVERNAME field value
// and a boolean to check if the value has been set.
func (o *DBConnector) GetDRIVERNAMEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DRIVERNAME, true
}

// SetDRIVERNAME sets field value
func (o *DBConnector) SetDRIVERNAME(v string) {
	o.DRIVERNAME = v
}

// GetCONNECTIONPROPERTIES returns the CONNECTIONPROPERTIES field value if set, zero value otherwise.
func (o *DBConnector) GetCONNECTIONPROPERTIES() string {
	if o == nil || IsNil(o.CONNECTIONPROPERTIES) {
		var ret string
		return ret
	}
	return *o.CONNECTIONPROPERTIES
}

// GetCONNECTIONPROPERTIESOk returns a tuple with the CONNECTIONPROPERTIES field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetCONNECTIONPROPERTIESOk() (*string, bool) {
	if o == nil || IsNil(o.CONNECTIONPROPERTIES) {
		return nil, false
	}
	return o.CONNECTIONPROPERTIES, true
}

// HasCONNECTIONPROPERTIES returns a boolean if a field has been set.
func (o *DBConnector) HasCONNECTIONPROPERTIES() bool {
	if o != nil && !IsNil(o.CONNECTIONPROPERTIES) {
		return true
	}

	return false
}

// SetCONNECTIONPROPERTIES gets a reference to the given string and assigns it to the CONNECTIONPROPERTIES field.
func (o *DBConnector) SetCONNECTIONPROPERTIES(v string) {
	o.CONNECTIONPROPERTIES = &v
}

// GetPASSWORD_MIN_LENGTH returns the PASSWORD_MIN_LENGTH field value if set, zero value otherwise.
func (o *DBConnector) GetPASSWORD_MIN_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MIN_LENGTH
}

// GetPASSWORD_MIN_LENGTHOk returns a tuple with the PASSWORD_MIN_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORD_MIN_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MIN_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MIN_LENGTH, true
}

// HasPASSWORD_MIN_LENGTH returns a boolean if a field has been set.
func (o *DBConnector) HasPASSWORD_MIN_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MIN_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MIN_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MIN_LENGTH field.
func (o *DBConnector) SetPASSWORD_MIN_LENGTH(v string) {
	o.PASSWORD_MIN_LENGTH = &v
}

// GetPASSWORD_MAX_LENGTH returns the PASSWORD_MAX_LENGTH field value if set, zero value otherwise.
func (o *DBConnector) GetPASSWORD_MAX_LENGTH() string {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		var ret string
		return ret
	}
	return *o.PASSWORD_MAX_LENGTH
}

// GetPASSWORD_MAX_LENGTHOk returns a tuple with the PASSWORD_MAX_LENGTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORD_MAX_LENGTHOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_MAX_LENGTH) {
		return nil, false
	}
	return o.PASSWORD_MAX_LENGTH, true
}

// HasPASSWORD_MAX_LENGTH returns a boolean if a field has been set.
func (o *DBConnector) HasPASSWORD_MAX_LENGTH() bool {
	if o != nil && !IsNil(o.PASSWORD_MAX_LENGTH) {
		return true
	}

	return false
}

// SetPASSWORD_MAX_LENGTH gets a reference to the given string and assigns it to the PASSWORD_MAX_LENGTH field.
func (o *DBConnector) SetPASSWORD_MAX_LENGTH(v string) {
	o.PASSWORD_MAX_LENGTH = &v
}

// GetPASSWORD_NOOFCAPSALPHA returns the PASSWORD_NOOFCAPSALPHA field value if set, zero value otherwise.
func (o *DBConnector) GetPASSWORD_NOOFCAPSALPHA() string {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFCAPSALPHA
}

// GetPASSWORD_NOOFCAPSALPHAOk returns a tuple with the PASSWORD_NOOFCAPSALPHA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORD_NOOFCAPSALPHAOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return nil, false
	}
	return o.PASSWORD_NOOFCAPSALPHA, true
}

// HasPASSWORD_NOOFCAPSALPHA returns a boolean if a field has been set.
func (o *DBConnector) HasPASSWORD_NOOFCAPSALPHA() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFCAPSALPHA gets a reference to the given string and assigns it to the PASSWORD_NOOFCAPSALPHA field.
func (o *DBConnector) SetPASSWORD_NOOFCAPSALPHA(v string) {
	o.PASSWORD_NOOFCAPSALPHA = &v
}

// GetPASSWORD_NOOFDIGITS returns the PASSWORD_NOOFDIGITS field value if set, zero value otherwise.
func (o *DBConnector) GetPASSWORD_NOOFDIGITS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFDIGITS
}

// GetPASSWORD_NOOFDIGITSOk returns a tuple with the PASSWORD_NOOFDIGITS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORD_NOOFDIGITSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFDIGITS) {
		return nil, false
	}
	return o.PASSWORD_NOOFDIGITS, true
}

// HasPASSWORD_NOOFDIGITS returns a boolean if a field has been set.
func (o *DBConnector) HasPASSWORD_NOOFDIGITS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFDIGITS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFDIGITS gets a reference to the given string and assigns it to the PASSWORD_NOOFDIGITS field.
func (o *DBConnector) SetPASSWORD_NOOFDIGITS(v string) {
	o.PASSWORD_NOOFDIGITS = &v
}

// GetPASSWORD_NOOFSPLCHARS returns the PASSWORD_NOOFSPLCHARS field value if set, zero value otherwise.
func (o *DBConnector) GetPASSWORD_NOOFSPLCHARS() string {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		var ret string
		return ret
	}
	return *o.PASSWORD_NOOFSPLCHARS
}

// GetPASSWORD_NOOFSPLCHARSOk returns a tuple with the PASSWORD_NOOFSPLCHARS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetPASSWORD_NOOFSPLCHARSOk() (*string, bool) {
	if o == nil || IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return nil, false
	}
	return o.PASSWORD_NOOFSPLCHARS, true
}

// HasPASSWORD_NOOFSPLCHARS returns a boolean if a field has been set.
func (o *DBConnector) HasPASSWORD_NOOFSPLCHARS() bool {
	if o != nil && !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		return true
	}

	return false
}

// SetPASSWORD_NOOFSPLCHARS gets a reference to the given string and assigns it to the PASSWORD_NOOFSPLCHARS field.
func (o *DBConnector) SetPASSWORD_NOOFSPLCHARS(v string) {
	o.PASSWORD_NOOFSPLCHARS = &v
}

// GetCREATEACCOUNTJSON returns the CREATEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnector) GetCREATEACCOUNTJSON() string {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.CREATEACCOUNTJSON
}

// GetCREATEACCOUNTJSONOk returns a tuple with the CREATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetCREATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CREATEACCOUNTJSON) {
		return nil, false
	}
	return o.CREATEACCOUNTJSON, true
}

// HasCREATEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnector) HasCREATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.CREATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetCREATEACCOUNTJSON gets a reference to the given string and assigns it to the CREATEACCOUNTJSON field.
func (o *DBConnector) SetCREATEACCOUNTJSON(v string) {
	o.CREATEACCOUNTJSON = &v
}

// GetUPDATEACCOUNTJSON returns the UPDATEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnector) GetUPDATEACCOUNTJSON() string {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.UPDATEACCOUNTJSON
}

// GetUPDATEACCOUNTJSONOk returns a tuple with the UPDATEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetUPDATEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEACCOUNTJSON) {
		return nil, false
	}
	return o.UPDATEACCOUNTJSON, true
}

// HasUPDATEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnector) HasUPDATEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.UPDATEACCOUNTJSON) {
		return true
	}

	return false
}

// SetUPDATEACCOUNTJSON gets a reference to the given string and assigns it to the UPDATEACCOUNTJSON field.
func (o *DBConnector) SetUPDATEACCOUNTJSON(v string) {
	o.UPDATEACCOUNTJSON = &v
}

// GetGRANTACCESSJSON returns the GRANTACCESSJSON field value if set, zero value otherwise.
func (o *DBConnector) GetGRANTACCESSJSON() string {
	if o == nil || IsNil(o.GRANTACCESSJSON) {
		var ret string
		return ret
	}
	return *o.GRANTACCESSJSON
}

// GetGRANTACCESSJSONOk returns a tuple with the GRANTACCESSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetGRANTACCESSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.GRANTACCESSJSON) {
		return nil, false
	}
	return o.GRANTACCESSJSON, true
}

// HasGRANTACCESSJSON returns a boolean if a field has been set.
func (o *DBConnector) HasGRANTACCESSJSON() bool {
	if o != nil && !IsNil(o.GRANTACCESSJSON) {
		return true
	}

	return false
}

// SetGRANTACCESSJSON gets a reference to the given string and assigns it to the GRANTACCESSJSON field.
func (o *DBConnector) SetGRANTACCESSJSON(v string) {
	o.GRANTACCESSJSON = &v
}

// GetREVOKEACCESSJSON returns the REVOKEACCESSJSON field value if set, zero value otherwise.
func (o *DBConnector) GetREVOKEACCESSJSON() string {
	if o == nil || IsNil(o.REVOKEACCESSJSON) {
		var ret string
		return ret
	}
	return *o.REVOKEACCESSJSON
}

// GetREVOKEACCESSJSONOk returns a tuple with the REVOKEACCESSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetREVOKEACCESSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.REVOKEACCESSJSON) {
		return nil, false
	}
	return o.REVOKEACCESSJSON, true
}

// HasREVOKEACCESSJSON returns a boolean if a field has been set.
func (o *DBConnector) HasREVOKEACCESSJSON() bool {
	if o != nil && !IsNil(o.REVOKEACCESSJSON) {
		return true
	}

	return false
}

// SetREVOKEACCESSJSON gets a reference to the given string and assigns it to the REVOKEACCESSJSON field.
func (o *DBConnector) SetREVOKEACCESSJSON(v string) {
	o.REVOKEACCESSJSON = &v
}

// GetCHANGEPASSJSON returns the CHANGEPASSJSON field value if set, zero value otherwise.
func (o *DBConnector) GetCHANGEPASSJSON() string {
	if o == nil || IsNil(o.CHANGEPASSJSON) {
		var ret string
		return ret
	}
	return *o.CHANGEPASSJSON
}

// GetCHANGEPASSJSONOk returns a tuple with the CHANGEPASSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetCHANGEPASSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CHANGEPASSJSON) {
		return nil, false
	}
	return o.CHANGEPASSJSON, true
}

// HasCHANGEPASSJSON returns a boolean if a field has been set.
func (o *DBConnector) HasCHANGEPASSJSON() bool {
	if o != nil && !IsNil(o.CHANGEPASSJSON) {
		return true
	}

	return false
}

// SetCHANGEPASSJSON gets a reference to the given string and assigns it to the CHANGEPASSJSON field.
func (o *DBConnector) SetCHANGEPASSJSON(v string) {
	o.CHANGEPASSJSON = &v
}

// GetDELETEACCOUNTJSON returns the DELETEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnector) GetDELETEACCOUNTJSON() string {
	if o == nil || IsNil(o.DELETEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.DELETEACCOUNTJSON
}

// GetDELETEACCOUNTJSONOk returns a tuple with the DELETEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetDELETEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.DELETEACCOUNTJSON) {
		return nil, false
	}
	return o.DELETEACCOUNTJSON, true
}

// HasDELETEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnector) HasDELETEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.DELETEACCOUNTJSON) {
		return true
	}

	return false
}

// SetDELETEACCOUNTJSON gets a reference to the given string and assigns it to the DELETEACCOUNTJSON field.
func (o *DBConnector) SetDELETEACCOUNTJSON(v string) {
	o.DELETEACCOUNTJSON = &v
}

// GetENABLEACCOUNTJSON returns the ENABLEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnector) GetENABLEACCOUNTJSON() string {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.ENABLEACCOUNTJSON
}

// GetENABLEACCOUNTJSONOk returns a tuple with the ENABLEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetENABLEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ENABLEACCOUNTJSON) {
		return nil, false
	}
	return o.ENABLEACCOUNTJSON, true
}

// HasENABLEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnector) HasENABLEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.ENABLEACCOUNTJSON) {
		return true
	}

	return false
}

// SetENABLEACCOUNTJSON gets a reference to the given string and assigns it to the ENABLEACCOUNTJSON field.
func (o *DBConnector) SetENABLEACCOUNTJSON(v string) {
	o.ENABLEACCOUNTJSON = &v
}

// GetDISABLEACCOUNTJSON returns the DISABLEACCOUNTJSON field value if set, zero value otherwise.
func (o *DBConnector) GetDISABLEACCOUNTJSON() string {
	if o == nil || IsNil(o.DISABLEACCOUNTJSON) {
		var ret string
		return ret
	}
	return *o.DISABLEACCOUNTJSON
}

// GetDISABLEACCOUNTJSONOk returns a tuple with the DISABLEACCOUNTJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetDISABLEACCOUNTJSONOk() (*string, bool) {
	if o == nil || IsNil(o.DISABLEACCOUNTJSON) {
		return nil, false
	}
	return o.DISABLEACCOUNTJSON, true
}

// HasDISABLEACCOUNTJSON returns a boolean if a field has been set.
func (o *DBConnector) HasDISABLEACCOUNTJSON() bool {
	if o != nil && !IsNil(o.DISABLEACCOUNTJSON) {
		return true
	}

	return false
}

// SetDISABLEACCOUNTJSON gets a reference to the given string and assigns it to the DISABLEACCOUNTJSON field.
func (o *DBConnector) SetDISABLEACCOUNTJSON(v string) {
	o.DISABLEACCOUNTJSON = &v
}

// GetACCOUNTEXISTSJSON returns the ACCOUNTEXISTSJSON field value if set, zero value otherwise.
func (o *DBConnector) GetACCOUNTEXISTSJSON() string {
	if o == nil || IsNil(o.ACCOUNTEXISTSJSON) {
		var ret string
		return ret
	}
	return *o.ACCOUNTEXISTSJSON
}

// GetACCOUNTEXISTSJSONOk returns a tuple with the ACCOUNTEXISTSJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetACCOUNTEXISTSJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTEXISTSJSON) {
		return nil, false
	}
	return o.ACCOUNTEXISTSJSON, true
}

// HasACCOUNTEXISTSJSON returns a boolean if a field has been set.
func (o *DBConnector) HasACCOUNTEXISTSJSON() bool {
	if o != nil && !IsNil(o.ACCOUNTEXISTSJSON) {
		return true
	}

	return false
}

// SetACCOUNTEXISTSJSON gets a reference to the given string and assigns it to the ACCOUNTEXISTSJSON field.
func (o *DBConnector) SetACCOUNTEXISTSJSON(v string) {
	o.ACCOUNTEXISTSJSON = &v
}

// GetUPDATEUSERJSON returns the UPDATEUSERJSON field value if set, zero value otherwise.
func (o *DBConnector) GetUPDATEUSERJSON() string {
	if o == nil || IsNil(o.UPDATEUSERJSON) {
		var ret string
		return ret
	}
	return *o.UPDATEUSERJSON
}

// GetUPDATEUSERJSONOk returns a tuple with the UPDATEUSERJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetUPDATEUSERJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEUSERJSON) {
		return nil, false
	}
	return o.UPDATEUSERJSON, true
}

// HasUPDATEUSERJSON returns a boolean if a field has been set.
func (o *DBConnector) HasUPDATEUSERJSON() bool {
	if o != nil && !IsNil(o.UPDATEUSERJSON) {
		return true
	}

	return false
}

// SetUPDATEUSERJSON gets a reference to the given string and assigns it to the UPDATEUSERJSON field.
func (o *DBConnector) SetUPDATEUSERJSON(v string) {
	o.UPDATEUSERJSON = &v
}

// GetACCOUNTSIMPORT returns the ACCOUNTSIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetACCOUNTSIMPORT() string {
	if o == nil || IsNil(o.ACCOUNTSIMPORT) {
		var ret string
		return ret
	}
	return *o.ACCOUNTSIMPORT
}

// GetACCOUNTSIMPORTOk returns a tuple with the ACCOUNTSIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetACCOUNTSIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTSIMPORT) {
		return nil, false
	}
	return o.ACCOUNTSIMPORT, true
}

// HasACCOUNTSIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasACCOUNTSIMPORT() bool {
	if o != nil && !IsNil(o.ACCOUNTSIMPORT) {
		return true
	}

	return false
}

// SetACCOUNTSIMPORT gets a reference to the given string and assigns it to the ACCOUNTSIMPORT field.
func (o *DBConnector) SetACCOUNTSIMPORT(v string) {
	o.ACCOUNTSIMPORT = &v
}

// GetENTITLEMENTVALUEIMPORT returns the ENTITLEMENTVALUEIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetENTITLEMENTVALUEIMPORT() string {
	if o == nil || IsNil(o.ENTITLEMENTVALUEIMPORT) {
		var ret string
		return ret
	}
	return *o.ENTITLEMENTVALUEIMPORT
}

// GetENTITLEMENTVALUEIMPORTOk returns a tuple with the ENTITLEMENTVALUEIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetENTITLEMENTVALUEIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ENTITLEMENTVALUEIMPORT) {
		return nil, false
	}
	return o.ENTITLEMENTVALUEIMPORT, true
}

// HasENTITLEMENTVALUEIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasENTITLEMENTVALUEIMPORT() bool {
	if o != nil && !IsNil(o.ENTITLEMENTVALUEIMPORT) {
		return true
	}

	return false
}

// SetENTITLEMENTVALUEIMPORT gets a reference to the given string and assigns it to the ENTITLEMENTVALUEIMPORT field.
func (o *DBConnector) SetENTITLEMENTVALUEIMPORT(v string) {
	o.ENTITLEMENTVALUEIMPORT = &v
}

// GetROLEOWNERIMPORT returns the ROLEOWNERIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetROLEOWNERIMPORT() string {
	if o == nil || IsNil(o.ROLEOWNERIMPORT) {
		var ret string
		return ret
	}
	return *o.ROLEOWNERIMPORT
}

// GetROLEOWNERIMPORTOk returns a tuple with the ROLEOWNERIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetROLEOWNERIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ROLEOWNERIMPORT) {
		return nil, false
	}
	return o.ROLEOWNERIMPORT, true
}

// HasROLEOWNERIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasROLEOWNERIMPORT() bool {
	if o != nil && !IsNil(o.ROLEOWNERIMPORT) {
		return true
	}

	return false
}

// SetROLEOWNERIMPORT gets a reference to the given string and assigns it to the ROLEOWNERIMPORT field.
func (o *DBConnector) SetROLEOWNERIMPORT(v string) {
	o.ROLEOWNERIMPORT = &v
}

// GetROLESIMPORT returns the ROLESIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetROLESIMPORT() string {
	if o == nil || IsNil(o.ROLESIMPORT) {
		var ret string
		return ret
	}
	return *o.ROLESIMPORT
}

// GetROLESIMPORTOk returns a tuple with the ROLESIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetROLESIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.ROLESIMPORT) {
		return nil, false
	}
	return o.ROLESIMPORT, true
}

// HasROLESIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasROLESIMPORT() bool {
	if o != nil && !IsNil(o.ROLESIMPORT) {
		return true
	}

	return false
}

// SetROLESIMPORT gets a reference to the given string and assigns it to the ROLESIMPORT field.
func (o *DBConnector) SetROLESIMPORT(v string) {
	o.ROLESIMPORT = &v
}

// GetSYSTEMIMPORT returns the SYSTEMIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetSYSTEMIMPORT() string {
	if o == nil || IsNil(o.SYSTEMIMPORT) {
		var ret string
		return ret
	}
	return *o.SYSTEMIMPORT
}

// GetSYSTEMIMPORTOk returns a tuple with the SYSTEMIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetSYSTEMIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.SYSTEMIMPORT) {
		return nil, false
	}
	return o.SYSTEMIMPORT, true
}

// HasSYSTEMIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasSYSTEMIMPORT() bool {
	if o != nil && !IsNil(o.SYSTEMIMPORT) {
		return true
	}

	return false
}

// SetSYSTEMIMPORT gets a reference to the given string and assigns it to the SYSTEMIMPORT field.
func (o *DBConnector) SetSYSTEMIMPORT(v string) {
	o.SYSTEMIMPORT = &v
}

// GetUSERIMPORT returns the USERIMPORT field value if set, zero value otherwise.
func (o *DBConnector) GetUSERIMPORT() string {
	if o == nil || IsNil(o.USERIMPORT) {
		var ret string
		return ret
	}
	return *o.USERIMPORT
}

// GetUSERIMPORTOk returns a tuple with the USERIMPORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetUSERIMPORTOk() (*string, bool) {
	if o == nil || IsNil(o.USERIMPORT) {
		return nil, false
	}
	return o.USERIMPORT, true
}

// HasUSERIMPORT returns a boolean if a field has been set.
func (o *DBConnector) HasUSERIMPORT() bool {
	if o != nil && !IsNil(o.USERIMPORT) {
		return true
	}

	return false
}

// SetUSERIMPORT gets a reference to the given string and assigns it to the USERIMPORT field.
func (o *DBConnector) SetUSERIMPORT(v string) {
	o.USERIMPORT = &v
}

// GetMODIFYUSERDATAJSON returns the MODIFYUSERDATAJSON field value if set, zero value otherwise.
func (o *DBConnector) GetMODIFYUSERDATAJSON() string {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		var ret string
		return ret
	}
	return *o.MODIFYUSERDATAJSON
}

// GetMODIFYUSERDATAJSONOk returns a tuple with the MODIFYUSERDATAJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetMODIFYUSERDATAJSONOk() (*string, bool) {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		return nil, false
	}
	return o.MODIFYUSERDATAJSON, true
}

// HasMODIFYUSERDATAJSON returns a boolean if a field has been set.
func (o *DBConnector) HasMODIFYUSERDATAJSON() bool {
	if o != nil && !IsNil(o.MODIFYUSERDATAJSON) {
		return true
	}

	return false
}

// SetMODIFYUSERDATAJSON gets a reference to the given string and assigns it to the MODIFYUSERDATAJSON field.
func (o *DBConnector) SetMODIFYUSERDATAJSON(v string) {
	o.MODIFYUSERDATAJSON = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *DBConnector) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *DBConnector) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *DBConnector) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetMAX_PAGINATION_SIZE returns the MAX_PAGINATION_SIZE field value if set, zero value otherwise.
func (o *DBConnector) GetMAX_PAGINATION_SIZE() string {
	if o == nil || IsNil(o.MAX_PAGINATION_SIZE) {
		var ret string
		return ret
	}
	return *o.MAX_PAGINATION_SIZE
}

// GetMAX_PAGINATION_SIZEOk returns a tuple with the MAX_PAGINATION_SIZE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetMAX_PAGINATION_SIZEOk() (*string, bool) {
	if o == nil || IsNil(o.MAX_PAGINATION_SIZE) {
		return nil, false
	}
	return o.MAX_PAGINATION_SIZE, true
}

// HasMAX_PAGINATION_SIZE returns a boolean if a field has been set.
func (o *DBConnector) HasMAX_PAGINATION_SIZE() bool {
	if o != nil && !IsNil(o.MAX_PAGINATION_SIZE) {
		return true
	}

	return false
}

// SetMAX_PAGINATION_SIZE gets a reference to the given string and assigns it to the MAX_PAGINATION_SIZE field.
func (o *DBConnector) SetMAX_PAGINATION_SIZE(v string) {
	o.MAX_PAGINATION_SIZE = &v
}

// GetCLI_COMMAND_JSON returns the CLI_COMMAND_JSON field value if set, zero value otherwise.
func (o *DBConnector) GetCLI_COMMAND_JSON() string {
	if o == nil || IsNil(o.CLI_COMMAND_JSON) {
		var ret string
		return ret
	}
	return *o.CLI_COMMAND_JSON
}

// GetCLI_COMMAND_JSONOk returns a tuple with the CLI_COMMAND_JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetCLI_COMMAND_JSONOk() (*string, bool) {
	if o == nil || IsNil(o.CLI_COMMAND_JSON) {
		return nil, false
	}
	return o.CLI_COMMAND_JSON, true
}

// HasCLI_COMMAND_JSON returns a boolean if a field has been set.
func (o *DBConnector) HasCLI_COMMAND_JSON() bool {
	if o != nil && !IsNil(o.CLI_COMMAND_JSON) {
		return true
	}

	return false
}

// SetCLI_COMMAND_JSON gets a reference to the given string and assigns it to the CLI_COMMAND_JSON field.
func (o *DBConnector) SetCLI_COMMAND_JSON(v string) {
	o.CLI_COMMAND_JSON = &v
}

func (o DBConnector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseConnector, errBaseConnector := json.Marshal(o.BaseConnector)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	errBaseConnector = json.Unmarshal([]byte(serializedBaseConnector), &toSerialize)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	toSerialize["URL"] = o.URL
	toSerialize["USERNAME"] = o.USERNAME
	toSerialize["PASSWORD"] = o.PASSWORD
	toSerialize["DRIVERNAME"] = o.DRIVERNAME
	if !IsNil(o.CONNECTIONPROPERTIES) {
		toSerialize["CONNECTIONPROPERTIES"] = o.CONNECTIONPROPERTIES
	}
	if !IsNil(o.PASSWORD_MIN_LENGTH) {
		toSerialize["PASSWORD_MIN_LENGTH"] = o.PASSWORD_MIN_LENGTH
	}
	if !IsNil(o.PASSWORD_MAX_LENGTH) {
		toSerialize["PASSWORD_MAX_LENGTH"] = o.PASSWORD_MAX_LENGTH
	}
	if !IsNil(o.PASSWORD_NOOFCAPSALPHA) {
		toSerialize["PASSWORD_NOOFCAPSALPHA"] = o.PASSWORD_NOOFCAPSALPHA
	}
	if !IsNil(o.PASSWORD_NOOFDIGITS) {
		toSerialize["PASSWORD_NOOFDIGITS"] = o.PASSWORD_NOOFDIGITS
	}
	if !IsNil(o.PASSWORD_NOOFSPLCHARS) {
		toSerialize["PASSWORD_NOOFSPLCHARS"] = o.PASSWORD_NOOFSPLCHARS
	}
	if !IsNil(o.CREATEACCOUNTJSON) {
		toSerialize["CREATEACCOUNTJSON"] = o.CREATEACCOUNTJSON
	}
	if !IsNil(o.UPDATEACCOUNTJSON) {
		toSerialize["UPDATEACCOUNTJSON"] = o.UPDATEACCOUNTJSON
	}
	if !IsNil(o.GRANTACCESSJSON) {
		toSerialize["GRANTACCESSJSON"] = o.GRANTACCESSJSON
	}
	if !IsNil(o.REVOKEACCESSJSON) {
		toSerialize["REVOKEACCESSJSON"] = o.REVOKEACCESSJSON
	}
	if !IsNil(o.CHANGEPASSJSON) {
		toSerialize["CHANGEPASSJSON"] = o.CHANGEPASSJSON
	}
	if !IsNil(o.DELETEACCOUNTJSON) {
		toSerialize["DELETEACCOUNTJSON"] = o.DELETEACCOUNTJSON
	}
	if !IsNil(o.ENABLEACCOUNTJSON) {
		toSerialize["ENABLEACCOUNTJSON"] = o.ENABLEACCOUNTJSON
	}
	if !IsNil(o.DISABLEACCOUNTJSON) {
		toSerialize["DISABLEACCOUNTJSON"] = o.DISABLEACCOUNTJSON
	}
	if !IsNil(o.ACCOUNTEXISTSJSON) {
		toSerialize["ACCOUNTEXISTSJSON"] = o.ACCOUNTEXISTSJSON
	}
	if !IsNil(o.UPDATEUSERJSON) {
		toSerialize["UPDATEUSERJSON"] = o.UPDATEUSERJSON
	}
	if !IsNil(o.ACCOUNTSIMPORT) {
		toSerialize["ACCOUNTSIMPORT"] = o.ACCOUNTSIMPORT
	}
	if !IsNil(o.ENTITLEMENTVALUEIMPORT) {
		toSerialize["ENTITLEMENTVALUEIMPORT"] = o.ENTITLEMENTVALUEIMPORT
	}
	if !IsNil(o.ROLEOWNERIMPORT) {
		toSerialize["ROLEOWNERIMPORT"] = o.ROLEOWNERIMPORT
	}
	if !IsNil(o.ROLESIMPORT) {
		toSerialize["ROLESIMPORT"] = o.ROLESIMPORT
	}
	if !IsNil(o.SYSTEMIMPORT) {
		toSerialize["SYSTEMIMPORT"] = o.SYSTEMIMPORT
	}
	if !IsNil(o.USERIMPORT) {
		toSerialize["USERIMPORT"] = o.USERIMPORT
	}
	if !IsNil(o.MODIFYUSERDATAJSON) {
		toSerialize["MODIFYUSERDATAJSON"] = o.MODIFYUSERDATAJSON
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.MAX_PAGINATION_SIZE) {
		toSerialize["MAX_PAGINATION_SIZE"] = o.MAX_PAGINATION_SIZE
	}
	if !IsNil(o.CLI_COMMAND_JSON) {
		toSerialize["CLI_COMMAND_JSON"] = o.CLI_COMMAND_JSON
	}
	return toSerialize, nil
}

func (o *DBConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"URL",
		"USERNAME",
		"PASSWORD",
		"DRIVERNAME",
		"connectionName",
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDBConnector := _DBConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDBConnector)

	if err != nil {
		return err
	}

	*o = DBConnector(varDBConnector)

	return err
}

type NullableDBConnector struct {
	value *DBConnector
	isSet bool
}

func (v NullableDBConnector) Get() *DBConnector {
	return v.value
}

func (v *NullableDBConnector) Set(val *DBConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableDBConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableDBConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBConnector(val *DBConnector) *NullableDBConnector {
	return &NullableDBConnector{value: val, isSet: true}
}

func (v NullableDBConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
