/*
testConnection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the D365Connector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &D365Connector{}

// D365Connector struct for D365Connector
type D365Connector struct {
	BaseConnector
	BASEURL string `json:"BASEURL"`
	TENANT_ID string `json:"TENANT_ID"`
	LOGIN_URL string `json:"LOGIN_URL"`
	CLIENT_ID string `json:"CLIENT_ID"`
	CLIENT_SECRET string `json:"CLIENT_SECRET"`
	// Property for USER_FILTER
	USER_FILTER *string `json:"USER_FILTER,omitempty"`
	// Property for USER_IMPORT_MAPPING
	USER_IMPORT_MAPPING *string `json:"USER_IMPORT_MAPPING,omitempty"`
	ACCOUNT_IMPORT_MAPPING *string `json:"ACCOUNT_IMPORT_MAPPING,omitempty"`
	ORGANIZATION_FILTER *string `json:"ORGANIZATION_FILTER,omitempty"`
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	ConfigJSON *string `json:"ConfigJSON,omitempty"`
	// If present - 2.0 API will be used. Accepts space separated values. If blank 1.0 API is used
	SCOPE *string `json:"SCOPE,omitempty"`
	// JSON to specify the Field Value which will be used to Create the New Account
	CreateAccountJSON *string `json:"CreateAccountJSON,omitempty"`
	// JSON to specify the Field Value which will be used to Update existing Account
	UpdateAccountJSON *string `json:"UpdateAccountJSON,omitempty"`
	// JSON to specify the different attributes to be checked and action to be performed for enabling a disabled account
	EnableAccountJSON *string `json:"EnableAccountJSON,omitempty"`
	// JSON to specify the different attributes to be checked and action to be performed for disabling a enabled account
	DisableAccountJSON *string `json:"DisableAccountJSON,omitempty"`
	// JSON to ADD Access to an account
	AddAccessJSON *string `json:"AddAccessJSON,omitempty"`
	// JSON to REMOVE Access from an account
	RemoveAccessJSON *string `json:"RemoveAccessJSON,omitempty"`
	// JSON to specify the different attributes to be checked and action to be performed for deleting/suspending an account
	RemoveAccountJSON *string `json:"RemoveAccountJSON,omitempty"`
}

type _D365Connector D365Connector

// NewD365Connector instantiates a new D365Connector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewD365Connector(bASEURL string, tENANTID string, lOGINURL string, cLIENTID string, cLIENTSECRET string, connectionName string, connectiontype string) *D365Connector {
	this := D365Connector{}
	this.ConnectionName = connectionName
	this.Connectiontype = connectiontype
	this.BASEURL = bASEURL
	this.TENANT_ID = tENANTID
	this.LOGIN_URL = lOGINURL
	this.CLIENT_ID = cLIENTID
	this.CLIENT_SECRET = cLIENTSECRET
	return &this
}

// NewD365ConnectorWithDefaults instantiates a new D365Connector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewD365ConnectorWithDefaults() *D365Connector {
	this := D365Connector{}
	return &this
}

// GetBASEURL returns the BASEURL field value
func (o *D365Connector) GetBASEURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BASEURL
}

// GetBASEURLOk returns a tuple with the BASEURL field value
// and a boolean to check if the value has been set.
func (o *D365Connector) GetBASEURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BASEURL, true
}

// SetBASEURL sets field value
func (o *D365Connector) SetBASEURL(v string) {
	o.BASEURL = v
}

// GetTENANT_ID returns the TENANT_ID field value
func (o *D365Connector) GetTENANT_ID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TENANT_ID
}

// GetTENANT_IDOk returns a tuple with the TENANT_ID field value
// and a boolean to check if the value has been set.
func (o *D365Connector) GetTENANT_IDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TENANT_ID, true
}

// SetTENANT_ID sets field value
func (o *D365Connector) SetTENANT_ID(v string) {
	o.TENANT_ID = v
}

// GetLOGIN_URL returns the LOGIN_URL field value
func (o *D365Connector) GetLOGIN_URL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LOGIN_URL
}

// GetLOGIN_URLOk returns a tuple with the LOGIN_URL field value
// and a boolean to check if the value has been set.
func (o *D365Connector) GetLOGIN_URLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LOGIN_URL, true
}

// SetLOGIN_URL sets field value
func (o *D365Connector) SetLOGIN_URL(v string) {
	o.LOGIN_URL = v
}

// GetCLIENT_ID returns the CLIENT_ID field value
func (o *D365Connector) GetCLIENT_ID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CLIENT_ID
}

// GetCLIENT_IDOk returns a tuple with the CLIENT_ID field value
// and a boolean to check if the value has been set.
func (o *D365Connector) GetCLIENT_IDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CLIENT_ID, true
}

// SetCLIENT_ID sets field value
func (o *D365Connector) SetCLIENT_ID(v string) {
	o.CLIENT_ID = v
}

// GetCLIENT_SECRET returns the CLIENT_SECRET field value
func (o *D365Connector) GetCLIENT_SECRET() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CLIENT_SECRET
}

// GetCLIENT_SECRETOk returns a tuple with the CLIENT_SECRET field value
// and a boolean to check if the value has been set.
func (o *D365Connector) GetCLIENT_SECRETOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CLIENT_SECRET, true
}

// SetCLIENT_SECRET sets field value
func (o *D365Connector) SetCLIENT_SECRET(v string) {
	o.CLIENT_SECRET = v
}

// GetUSER_FILTER returns the USER_FILTER field value if set, zero value otherwise.
func (o *D365Connector) GetUSER_FILTER() string {
	if o == nil || IsNil(o.USER_FILTER) {
		var ret string
		return ret
	}
	return *o.USER_FILTER
}

// GetUSER_FILTEROk returns a tuple with the USER_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetUSER_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.USER_FILTER) {
		return nil, false
	}
	return o.USER_FILTER, true
}

// HasUSER_FILTER returns a boolean if a field has been set.
func (o *D365Connector) HasUSER_FILTER() bool {
	if o != nil && !IsNil(o.USER_FILTER) {
		return true
	}

	return false
}

// SetUSER_FILTER gets a reference to the given string and assigns it to the USER_FILTER field.
func (o *D365Connector) SetUSER_FILTER(v string) {
	o.USER_FILTER = &v
}

// GetUSER_IMPORT_MAPPING returns the USER_IMPORT_MAPPING field value if set, zero value otherwise.
func (o *D365Connector) GetUSER_IMPORT_MAPPING() string {
	if o == nil || IsNil(o.USER_IMPORT_MAPPING) {
		var ret string
		return ret
	}
	return *o.USER_IMPORT_MAPPING
}

// GetUSER_IMPORT_MAPPINGOk returns a tuple with the USER_IMPORT_MAPPING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetUSER_IMPORT_MAPPINGOk() (*string, bool) {
	if o == nil || IsNil(o.USER_IMPORT_MAPPING) {
		return nil, false
	}
	return o.USER_IMPORT_MAPPING, true
}

// HasUSER_IMPORT_MAPPING returns a boolean if a field has been set.
func (o *D365Connector) HasUSER_IMPORT_MAPPING() bool {
	if o != nil && !IsNil(o.USER_IMPORT_MAPPING) {
		return true
	}

	return false
}

// SetUSER_IMPORT_MAPPING gets a reference to the given string and assigns it to the USER_IMPORT_MAPPING field.
func (o *D365Connector) SetUSER_IMPORT_MAPPING(v string) {
	o.USER_IMPORT_MAPPING = &v
}

// GetACCOUNT_IMPORT_MAPPING returns the ACCOUNT_IMPORT_MAPPING field value if set, zero value otherwise.
func (o *D365Connector) GetACCOUNT_IMPORT_MAPPING() string {
	if o == nil || IsNil(o.ACCOUNT_IMPORT_MAPPING) {
		var ret string
		return ret
	}
	return *o.ACCOUNT_IMPORT_MAPPING
}

// GetACCOUNT_IMPORT_MAPPINGOk returns a tuple with the ACCOUNT_IMPORT_MAPPING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetACCOUNT_IMPORT_MAPPINGOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNT_IMPORT_MAPPING) {
		return nil, false
	}
	return o.ACCOUNT_IMPORT_MAPPING, true
}

// HasACCOUNT_IMPORT_MAPPING returns a boolean if a field has been set.
func (o *D365Connector) HasACCOUNT_IMPORT_MAPPING() bool {
	if o != nil && !IsNil(o.ACCOUNT_IMPORT_MAPPING) {
		return true
	}

	return false
}

// SetACCOUNT_IMPORT_MAPPING gets a reference to the given string and assigns it to the ACCOUNT_IMPORT_MAPPING field.
func (o *D365Connector) SetACCOUNT_IMPORT_MAPPING(v string) {
	o.ACCOUNT_IMPORT_MAPPING = &v
}

// GetORGANIZATION_FILTER returns the ORGANIZATION_FILTER field value if set, zero value otherwise.
func (o *D365Connector) GetORGANIZATION_FILTER() string {
	if o == nil || IsNil(o.ORGANIZATION_FILTER) {
		var ret string
		return ret
	}
	return *o.ORGANIZATION_FILTER
}

// GetORGANIZATION_FILTEROk returns a tuple with the ORGANIZATION_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetORGANIZATION_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.ORGANIZATION_FILTER) {
		return nil, false
	}
	return o.ORGANIZATION_FILTER, true
}

// HasORGANIZATION_FILTER returns a boolean if a field has been set.
func (o *D365Connector) HasORGANIZATION_FILTER() bool {
	if o != nil && !IsNil(o.ORGANIZATION_FILTER) {
		return true
	}

	return false
}

// SetORGANIZATION_FILTER gets a reference to the given string and assigns it to the ORGANIZATION_FILTER field.
func (o *D365Connector) SetORGANIZATION_FILTER(v string) {
	o.ORGANIZATION_FILTER = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *D365Connector) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *D365Connector) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *D365Connector) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetConfigJSON returns the ConfigJSON field value if set, zero value otherwise.
func (o *D365Connector) GetConfigJSON() string {
	if o == nil || IsNil(o.ConfigJSON) {
		var ret string
		return ret
	}
	return *o.ConfigJSON
}

// GetConfigJSONOk returns a tuple with the ConfigJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetConfigJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigJSON) {
		return nil, false
	}
	return o.ConfigJSON, true
}

// HasConfigJSON returns a boolean if a field has been set.
func (o *D365Connector) HasConfigJSON() bool {
	if o != nil && !IsNil(o.ConfigJSON) {
		return true
	}

	return false
}

// SetConfigJSON gets a reference to the given string and assigns it to the ConfigJSON field.
func (o *D365Connector) SetConfigJSON(v string) {
	o.ConfigJSON = &v
}

// GetSCOPE returns the SCOPE field value if set, zero value otherwise.
func (o *D365Connector) GetSCOPE() string {
	if o == nil || IsNil(o.SCOPE) {
		var ret string
		return ret
	}
	return *o.SCOPE
}

// GetSCOPEOk returns a tuple with the SCOPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetSCOPEOk() (*string, bool) {
	if o == nil || IsNil(o.SCOPE) {
		return nil, false
	}
	return o.SCOPE, true
}

// HasSCOPE returns a boolean if a field has been set.
func (o *D365Connector) HasSCOPE() bool {
	if o != nil && !IsNil(o.SCOPE) {
		return true
	}

	return false
}

// SetSCOPE gets a reference to the given string and assigns it to the SCOPE field.
func (o *D365Connector) SetSCOPE(v string) {
	o.SCOPE = &v
}

// GetCreateAccountJSON returns the CreateAccountJSON field value if set, zero value otherwise.
func (o *D365Connector) GetCreateAccountJSON() string {
	if o == nil || IsNil(o.CreateAccountJSON) {
		var ret string
		return ret
	}
	return *o.CreateAccountJSON
}

// GetCreateAccountJSONOk returns a tuple with the CreateAccountJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetCreateAccountJSONOk() (*string, bool) {
	if o == nil || IsNil(o.CreateAccountJSON) {
		return nil, false
	}
	return o.CreateAccountJSON, true
}

// HasCreateAccountJSON returns a boolean if a field has been set.
func (o *D365Connector) HasCreateAccountJSON() bool {
	if o != nil && !IsNil(o.CreateAccountJSON) {
		return true
	}

	return false
}

// SetCreateAccountJSON gets a reference to the given string and assigns it to the CreateAccountJSON field.
func (o *D365Connector) SetCreateAccountJSON(v string) {
	o.CreateAccountJSON = &v
}

// GetUpdateAccountJSON returns the UpdateAccountJSON field value if set, zero value otherwise.
func (o *D365Connector) GetUpdateAccountJSON() string {
	if o == nil || IsNil(o.UpdateAccountJSON) {
		var ret string
		return ret
	}
	return *o.UpdateAccountJSON
}

// GetUpdateAccountJSONOk returns a tuple with the UpdateAccountJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetUpdateAccountJSONOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateAccountJSON) {
		return nil, false
	}
	return o.UpdateAccountJSON, true
}

// HasUpdateAccountJSON returns a boolean if a field has been set.
func (o *D365Connector) HasUpdateAccountJSON() bool {
	if o != nil && !IsNil(o.UpdateAccountJSON) {
		return true
	}

	return false
}

// SetUpdateAccountJSON gets a reference to the given string and assigns it to the UpdateAccountJSON field.
func (o *D365Connector) SetUpdateAccountJSON(v string) {
	o.UpdateAccountJSON = &v
}

// GetEnableAccountJSON returns the EnableAccountJSON field value if set, zero value otherwise.
func (o *D365Connector) GetEnableAccountJSON() string {
	if o == nil || IsNil(o.EnableAccountJSON) {
		var ret string
		return ret
	}
	return *o.EnableAccountJSON
}

// GetEnableAccountJSONOk returns a tuple with the EnableAccountJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetEnableAccountJSONOk() (*string, bool) {
	if o == nil || IsNil(o.EnableAccountJSON) {
		return nil, false
	}
	return o.EnableAccountJSON, true
}

// HasEnableAccountJSON returns a boolean if a field has been set.
func (o *D365Connector) HasEnableAccountJSON() bool {
	if o != nil && !IsNil(o.EnableAccountJSON) {
		return true
	}

	return false
}

// SetEnableAccountJSON gets a reference to the given string and assigns it to the EnableAccountJSON field.
func (o *D365Connector) SetEnableAccountJSON(v string) {
	o.EnableAccountJSON = &v
}

// GetDisableAccountJSON returns the DisableAccountJSON field value if set, zero value otherwise.
func (o *D365Connector) GetDisableAccountJSON() string {
	if o == nil || IsNil(o.DisableAccountJSON) {
		var ret string
		return ret
	}
	return *o.DisableAccountJSON
}

// GetDisableAccountJSONOk returns a tuple with the DisableAccountJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetDisableAccountJSONOk() (*string, bool) {
	if o == nil || IsNil(o.DisableAccountJSON) {
		return nil, false
	}
	return o.DisableAccountJSON, true
}

// HasDisableAccountJSON returns a boolean if a field has been set.
func (o *D365Connector) HasDisableAccountJSON() bool {
	if o != nil && !IsNil(o.DisableAccountJSON) {
		return true
	}

	return false
}

// SetDisableAccountJSON gets a reference to the given string and assigns it to the DisableAccountJSON field.
func (o *D365Connector) SetDisableAccountJSON(v string) {
	o.DisableAccountJSON = &v
}

// GetAddAccessJSON returns the AddAccessJSON field value if set, zero value otherwise.
func (o *D365Connector) GetAddAccessJSON() string {
	if o == nil || IsNil(o.AddAccessJSON) {
		var ret string
		return ret
	}
	return *o.AddAccessJSON
}

// GetAddAccessJSONOk returns a tuple with the AddAccessJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetAddAccessJSONOk() (*string, bool) {
	if o == nil || IsNil(o.AddAccessJSON) {
		return nil, false
	}
	return o.AddAccessJSON, true
}

// HasAddAccessJSON returns a boolean if a field has been set.
func (o *D365Connector) HasAddAccessJSON() bool {
	if o != nil && !IsNil(o.AddAccessJSON) {
		return true
	}

	return false
}

// SetAddAccessJSON gets a reference to the given string and assigns it to the AddAccessJSON field.
func (o *D365Connector) SetAddAccessJSON(v string) {
	o.AddAccessJSON = &v
}

// GetRemoveAccessJSON returns the RemoveAccessJSON field value if set, zero value otherwise.
func (o *D365Connector) GetRemoveAccessJSON() string {
	if o == nil || IsNil(o.RemoveAccessJSON) {
		var ret string
		return ret
	}
	return *o.RemoveAccessJSON
}

// GetRemoveAccessJSONOk returns a tuple with the RemoveAccessJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetRemoveAccessJSONOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveAccessJSON) {
		return nil, false
	}
	return o.RemoveAccessJSON, true
}

// HasRemoveAccessJSON returns a boolean if a field has been set.
func (o *D365Connector) HasRemoveAccessJSON() bool {
	if o != nil && !IsNil(o.RemoveAccessJSON) {
		return true
	}

	return false
}

// SetRemoveAccessJSON gets a reference to the given string and assigns it to the RemoveAccessJSON field.
func (o *D365Connector) SetRemoveAccessJSON(v string) {
	o.RemoveAccessJSON = &v
}

// GetRemoveAccountJSON returns the RemoveAccountJSON field value if set, zero value otherwise.
func (o *D365Connector) GetRemoveAccountJSON() string {
	if o == nil || IsNil(o.RemoveAccountJSON) {
		var ret string
		return ret
	}
	return *o.RemoveAccountJSON
}

// GetRemoveAccountJSONOk returns a tuple with the RemoveAccountJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D365Connector) GetRemoveAccountJSONOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveAccountJSON) {
		return nil, false
	}
	return o.RemoveAccountJSON, true
}

// HasRemoveAccountJSON returns a boolean if a field has been set.
func (o *D365Connector) HasRemoveAccountJSON() bool {
	if o != nil && !IsNil(o.RemoveAccountJSON) {
		return true
	}

	return false
}

// SetRemoveAccountJSON gets a reference to the given string and assigns it to the RemoveAccountJSON field.
func (o *D365Connector) SetRemoveAccountJSON(v string) {
	o.RemoveAccountJSON = &v
}

func (o D365Connector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o D365Connector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseConnector, errBaseConnector := json.Marshal(o.BaseConnector)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	errBaseConnector = json.Unmarshal([]byte(serializedBaseConnector), &toSerialize)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	toSerialize["BASEURL"] = o.BASEURL
	toSerialize["TENANT_ID"] = o.TENANT_ID
	toSerialize["LOGIN_URL"] = o.LOGIN_URL
	toSerialize["CLIENT_ID"] = o.CLIENT_ID
	toSerialize["CLIENT_SECRET"] = o.CLIENT_SECRET
	if !IsNil(o.USER_FILTER) {
		toSerialize["USER_FILTER"] = o.USER_FILTER
	}
	if !IsNil(o.USER_IMPORT_MAPPING) {
		toSerialize["USER_IMPORT_MAPPING"] = o.USER_IMPORT_MAPPING
	}
	if !IsNil(o.ACCOUNT_IMPORT_MAPPING) {
		toSerialize["ACCOUNT_IMPORT_MAPPING"] = o.ACCOUNT_IMPORT_MAPPING
	}
	if !IsNil(o.ORGANIZATION_FILTER) {
		toSerialize["ORGANIZATION_FILTER"] = o.ORGANIZATION_FILTER
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.ConfigJSON) {
		toSerialize["ConfigJSON"] = o.ConfigJSON
	}
	if !IsNil(o.SCOPE) {
		toSerialize["SCOPE"] = o.SCOPE
	}
	if !IsNil(o.CreateAccountJSON) {
		toSerialize["CreateAccountJSON"] = o.CreateAccountJSON
	}
	if !IsNil(o.UpdateAccountJSON) {
		toSerialize["UpdateAccountJSON"] = o.UpdateAccountJSON
	}
	if !IsNil(o.EnableAccountJSON) {
		toSerialize["EnableAccountJSON"] = o.EnableAccountJSON
	}
	if !IsNil(o.DisableAccountJSON) {
		toSerialize["DisableAccountJSON"] = o.DisableAccountJSON
	}
	if !IsNil(o.AddAccessJSON) {
		toSerialize["AddAccessJSON"] = o.AddAccessJSON
	}
	if !IsNil(o.RemoveAccessJSON) {
		toSerialize["RemoveAccessJSON"] = o.RemoveAccessJSON
	}
	if !IsNil(o.RemoveAccountJSON) {
		toSerialize["RemoveAccountJSON"] = o.RemoveAccountJSON
	}
	return toSerialize, nil
}

func (o *D365Connector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"BASEURL",
		"TENANT_ID",
		"LOGIN_URL",
		"CLIENT_ID",
		"CLIENT_SECRET",
		"connectionName",
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varD365Connector := _D365Connector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varD365Connector)

	if err != nil {
		return err
	}

	*o = D365Connector(varD365Connector)

	return err
}

type NullableD365Connector struct {
	value *D365Connector
	isSet bool
}

func (v NullableD365Connector) Get() *D365Connector {
	return v.value
}

func (v *NullableD365Connector) Set(val *D365Connector) {
	v.value = val
	v.isSet = true
}

func (v NullableD365Connector) IsSet() bool {
	return v.isSet
}

func (v *NullableD365Connector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableD365Connector(val *D365Connector) *NullableD365Connector {
	return &NullableD365Connector{value: val, isSet: true}
}

func (v NullableD365Connector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableD365Connector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


