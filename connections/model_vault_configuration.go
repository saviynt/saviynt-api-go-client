/*
Saviynt Connections API

Connections

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
)

// checks if the VaultConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultConfiguration{}

// VaultConfiguration struct for VaultConfiguration
type VaultConfiguration struct {
	// Vault secret path.
	Path *string `json:"path,omitempty"`
	KeyMapping *VaultConfigurationKeyMapping `json:"keyMapping,omitempty"`
}

// NewVaultConfiguration instantiates a new VaultConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultConfiguration() *VaultConfiguration {
	this := VaultConfiguration{}
	return &this
}

// NewVaultConfigurationWithDefaults instantiates a new VaultConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultConfigurationWithDefaults() *VaultConfiguration {
	this := VaultConfiguration{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *VaultConfiguration) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfiguration) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *VaultConfiguration) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *VaultConfiguration) SetPath(v string) {
	o.Path = &v
}

// GetKeyMapping returns the KeyMapping field value if set, zero value otherwise.
func (o *VaultConfiguration) GetKeyMapping() VaultConfigurationKeyMapping {
	if o == nil || IsNil(o.KeyMapping) {
		var ret VaultConfigurationKeyMapping
		return ret
	}
	return *o.KeyMapping
}

// GetKeyMappingOk returns a tuple with the KeyMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfiguration) GetKeyMappingOk() (*VaultConfigurationKeyMapping, bool) {
	if o == nil || IsNil(o.KeyMapping) {
		return nil, false
	}
	return o.KeyMapping, true
}

// HasKeyMapping returns a boolean if a field has been set.
func (o *VaultConfiguration) HasKeyMapping() bool {
	if o != nil && !IsNil(o.KeyMapping) {
		return true
	}

	return false
}

// SetKeyMapping gets a reference to the given VaultConfigurationKeyMapping and assigns it to the KeyMapping field.
func (o *VaultConfiguration) SetKeyMapping(v VaultConfigurationKeyMapping) {
	o.KeyMapping = &v
}

func (o VaultConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.KeyMapping) {
		toSerialize["keyMapping"] = o.KeyMapping
	}
	return toSerialize, nil
}

type NullableVaultConfiguration struct {
	value *VaultConfiguration
	isSet bool
}

func (v NullableVaultConfiguration) Get() *VaultConfiguration {
	return v.value
}

func (v *NullableVaultConfiguration) Set(val *VaultConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultConfiguration(val *VaultConfiguration) *NullableVaultConfiguration {
	return &NullableVaultConfiguration{value: val, isSet: true}
}

func (v NullableVaultConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


