/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateOrUpdateRequest - struct for CreateOrUpdateRequest
type CreateOrUpdateRequest struct {
	ADConnector         *ADConnector
	ADSIConnector       *ADSIConnector
	D365Connector       *D365Connector
	DBConnector         *DBConnector
	RESTConnector       *RESTConnector
	SAPConnector        *SAPConnector
	SalesforceConnector *SalesforceConnector
	WorkdayConnector    *WorkdayConnector
}

// ADConnectorAsCreateOrUpdateRequest is a convenience function that returns ADConnector wrapped in CreateOrUpdateRequest
func ADConnectorAsCreateOrUpdateRequest(v *ADConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		ADConnector: v,
	}
}

// ADSIConnectorAsCreateOrUpdateRequest is a convenience function that returns ADSIConnector wrapped in CreateOrUpdateRequest
func ADSIConnectorAsCreateOrUpdateRequest(v *ADSIConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		ADSIConnector: v,
	}
}

// D365ConnectorAsCreateOrUpdateRequest is a convenience function that returns D365Connector wrapped in CreateOrUpdateRequest
func D365ConnectorAsCreateOrUpdateRequest(v *D365Connector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		D365Connector: v,
	}
}

// DBConnectorAsCreateOrUpdateRequest is a convenience function that returns DBConnector wrapped in CreateOrUpdateRequest
func DBConnectorAsCreateOrUpdateRequest(v *DBConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		DBConnector: v,
	}
}

// RESTConnectorAsCreateOrUpdateRequest is a convenience function that returns RESTConnector wrapped in CreateOrUpdateRequest
func RESTConnectorAsCreateOrUpdateRequest(v *RESTConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		RESTConnector: v,
	}
}

// SAPConnectorAsCreateOrUpdateRequest is a convenience function that returns SAPConnector wrapped in CreateOrUpdateRequest
func SAPConnectorAsCreateOrUpdateRequest(v *SAPConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		SAPConnector: v,
	}
}

// SalesforceConnectorAsCreateOrUpdateRequest is a convenience function that returns SalesforceConnector wrapped in CreateOrUpdateRequest
func SalesforceConnectorAsCreateOrUpdateRequest(v *SalesforceConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		SalesforceConnector: v,
	}
}

// WorkdayConnectorAsCreateOrUpdateRequest is a convenience function that returns WorkdayConnector wrapped in CreateOrUpdateRequest
func WorkdayConnectorAsCreateOrUpdateRequest(v *WorkdayConnector) CreateOrUpdateRequest {
	return CreateOrUpdateRequest{
		WorkdayConnector: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateOrUpdateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ADConnector
	err = newStrictDecoder(data).Decode(&dst.ADConnector)
	if err == nil {
		jsonADConnector, _ := json.Marshal(dst.ADConnector)
		if string(jsonADConnector) == "{}" { // empty struct
			dst.ADConnector = nil
		} else {
			if err = validator.Validate(dst.ADConnector); err != nil {
				dst.ADConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.ADConnector = nil
	}

	// try to unmarshal data into ADSIConnector
	err = newStrictDecoder(data).Decode(&dst.ADSIConnector)
	if err == nil {
		jsonADSIConnector, _ := json.Marshal(dst.ADSIConnector)
		if string(jsonADSIConnector) == "{}" { // empty struct
			dst.ADSIConnector = nil
		} else {
			if err = validator.Validate(dst.ADSIConnector); err != nil {
				dst.ADSIConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.ADSIConnector = nil
	}

	// try to unmarshal data into D365Connector
	err = newStrictDecoder(data).Decode(&dst.D365Connector)
	if err == nil {
		jsonD365Connector, _ := json.Marshal(dst.D365Connector)
		if string(jsonD365Connector) == "{}" { // empty struct
			dst.D365Connector = nil
		} else {
			if err = validator.Validate(dst.D365Connector); err != nil {
				dst.D365Connector = nil
			} else {
				match++
			}
		}
	} else {
		dst.D365Connector = nil
	}

	// try to unmarshal data into DBConnector
	err = newStrictDecoder(data).Decode(&dst.DBConnector)
	if err == nil {
		jsonDBConnector, _ := json.Marshal(dst.DBConnector)
		if string(jsonDBConnector) == "{}" { // empty struct
			dst.DBConnector = nil
		} else {
			if err = validator.Validate(dst.DBConnector); err != nil {
				dst.DBConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.DBConnector = nil
	}

	// try to unmarshal data into RESTConnector
	err = newStrictDecoder(data).Decode(&dst.RESTConnector)
	if err == nil {
		jsonRESTConnector, _ := json.Marshal(dst.RESTConnector)
		if string(jsonRESTConnector) == "{}" { // empty struct
			dst.RESTConnector = nil
		} else {
			if err = validator.Validate(dst.RESTConnector); err != nil {
				dst.RESTConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.RESTConnector = nil
	}

	// try to unmarshal data into SAPConnector
	err = newStrictDecoder(data).Decode(&dst.SAPConnector)
	if err == nil {
		jsonSAPConnector, _ := json.Marshal(dst.SAPConnector)
		if string(jsonSAPConnector) == "{}" { // empty struct
			dst.SAPConnector = nil
		} else {
			if err = validator.Validate(dst.SAPConnector); err != nil {
				dst.SAPConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.SAPConnector = nil
	}

	// try to unmarshal data into SalesforceConnector
	err = newStrictDecoder(data).Decode(&dst.SalesforceConnector)
	if err == nil {
		jsonSalesforceConnector, _ := json.Marshal(dst.SalesforceConnector)
		if string(jsonSalesforceConnector) == "{}" { // empty struct
			dst.SalesforceConnector = nil
		} else {
			if err = validator.Validate(dst.SalesforceConnector); err != nil {
				dst.SalesforceConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.SalesforceConnector = nil
	}

	// try to unmarshal data into WorkdayConnector
	err = newStrictDecoder(data).Decode(&dst.WorkdayConnector)
	if err == nil {
		jsonWorkdayConnector, _ := json.Marshal(dst.WorkdayConnector)
		if string(jsonWorkdayConnector) == "{}" { // empty struct
			dst.WorkdayConnector = nil
		} else {
			if err = validator.Validate(dst.WorkdayConnector); err != nil {
				dst.WorkdayConnector = nil
			} else {
				match++
			}
		}
	} else {
		dst.WorkdayConnector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ADConnector = nil
		dst.ADSIConnector = nil
		dst.D365Connector = nil
		dst.DBConnector = nil
		dst.RESTConnector = nil
		dst.SAPConnector = nil
		dst.SalesforceConnector = nil
		dst.WorkdayConnector = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateOrUpdateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateOrUpdateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateOrUpdateRequest) MarshalJSON() ([]byte, error) {
	if src.ADConnector != nil {
		return json.Marshal(&src.ADConnector)
	}

	if src.ADSIConnector != nil {
		return json.Marshal(&src.ADSIConnector)
	}

	if src.D365Connector != nil {
		return json.Marshal(&src.D365Connector)
	}

	if src.DBConnector != nil {
		return json.Marshal(&src.DBConnector)
	}

	if src.RESTConnector != nil {
		return json.Marshal(&src.RESTConnector)
	}

	if src.SAPConnector != nil {
		return json.Marshal(&src.SAPConnector)
	}

	if src.SalesforceConnector != nil {
		return json.Marshal(&src.SalesforceConnector)
	}

	if src.WorkdayConnector != nil {
		return json.Marshal(&src.WorkdayConnector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateOrUpdateRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ADConnector != nil {
		return obj.ADConnector
	}

	if obj.ADSIConnector != nil {
		return obj.ADSIConnector
	}

	if obj.D365Connector != nil {
		return obj.D365Connector
	}

	if obj.DBConnector != nil {
		return obj.DBConnector
	}

	if obj.RESTConnector != nil {
		return obj.RESTConnector
	}

	if obj.SAPConnector != nil {
		return obj.SAPConnector
	}

	if obj.SalesforceConnector != nil {
		return obj.SalesforceConnector
	}

	if obj.WorkdayConnector != nil {
		return obj.WorkdayConnector
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateOrUpdateRequest) GetActualInstanceValue() interface{} {
	if obj.ADConnector != nil {
		return *obj.ADConnector
	}

	if obj.ADSIConnector != nil {
		return *obj.ADSIConnector
	}

	if obj.D365Connector != nil {
		return *obj.D365Connector
	}

	if obj.DBConnector != nil {
		return *obj.DBConnector
	}

	if obj.RESTConnector != nil {
		return *obj.RESTConnector
	}

	if obj.SAPConnector != nil {
		return *obj.SAPConnector
	}

	if obj.SalesforceConnector != nil {
		return *obj.SalesforceConnector
	}

	if obj.WorkdayConnector != nil {
		return *obj.WorkdayConnector
	}

	// all schemas are nil
	return nil
}

type NullableCreateOrUpdateRequest struct {
	value *CreateOrUpdateRequest
	isSet bool
}

func (v NullableCreateOrUpdateRequest) Get() *CreateOrUpdateRequest {
	return v.value
}

func (v *NullableCreateOrUpdateRequest) Set(val *CreateOrUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateRequest(val *CreateOrUpdateRequest) *NullableCreateOrUpdateRequest {
	return &NullableCreateOrUpdateRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
