/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GithubRESTConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubRESTConnector{}

// GithubRESTConnector struct for GithubRESTConnector
type GithubRESTConnector struct {
	BaseConnector
	// Property for ConnectionJSON
	ConnectionJSON *string `json:"ConnectionJSON,omitempty"`
	// Property for ImportAccountEntJSON
	ImportAccountEntJSON *string `json:"ImportAccountEntJSON,omitempty"`
	// Property for ACCESS_TOKENS
	ACCESS_TOKENS *string `json:"ACCESS_TOKENS,omitempty"`
	// Property for ORGANIZATION_LIST
	ORGANIZATION_LIST *string `json:"ORGANIZATION_LIST,omitempty"`
	// Property for STATUS_THRESHOLD_CONFIG
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	// Property for PAM_CONFIG
	PAM_CONFIG *string `json:"PAM_CONFIG,omitempty"`
}

type _GithubRESTConnector GithubRESTConnector

// NewGithubRESTConnector instantiates a new GithubRESTConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubRESTConnector(connectionName string, connectiontype string) *GithubRESTConnector {
	this := GithubRESTConnector{}
	this.ConnectionName = connectionName
	this.Connectiontype = connectiontype
	return &this
}

// NewGithubRESTConnectorWithDefaults instantiates a new GithubRESTConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubRESTConnectorWithDefaults() *GithubRESTConnector {
	this := GithubRESTConnector{}
	return &this
}

// GetConnectionJSON returns the ConnectionJSON field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetConnectionJSON() string {
	if o == nil || IsNil(o.ConnectionJSON) {
		var ret string
		return ret
	}
	return *o.ConnectionJSON
}

// GetConnectionJSONOk returns a tuple with the ConnectionJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetConnectionJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionJSON) {
		return nil, false
	}
	return o.ConnectionJSON, true
}

// HasConnectionJSON returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasConnectionJSON() bool {
	if o != nil && !IsNil(o.ConnectionJSON) {
		return true
	}

	return false
}

// SetConnectionJSON gets a reference to the given string and assigns it to the ConnectionJSON field.
func (o *GithubRESTConnector) SetConnectionJSON(v string) {
	o.ConnectionJSON = &v
}

// GetImportAccountEntJSON returns the ImportAccountEntJSON field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetImportAccountEntJSON() string {
	if o == nil || IsNil(o.ImportAccountEntJSON) {
		var ret string
		return ret
	}
	return *o.ImportAccountEntJSON
}

// GetImportAccountEntJSONOk returns a tuple with the ImportAccountEntJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetImportAccountEntJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ImportAccountEntJSON) {
		return nil, false
	}
	return o.ImportAccountEntJSON, true
}

// HasImportAccountEntJSON returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasImportAccountEntJSON() bool {
	if o != nil && !IsNil(o.ImportAccountEntJSON) {
		return true
	}

	return false
}

// SetImportAccountEntJSON gets a reference to the given string and assigns it to the ImportAccountEntJSON field.
func (o *GithubRESTConnector) SetImportAccountEntJSON(v string) {
	o.ImportAccountEntJSON = &v
}

// GetACCESS_TOKENS returns the ACCESS_TOKENS field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetACCESS_TOKENS() string {
	if o == nil || IsNil(o.ACCESS_TOKENS) {
		var ret string
		return ret
	}
	return *o.ACCESS_TOKENS
}

// GetACCESS_TOKENSOk returns a tuple with the ACCESS_TOKENS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetACCESS_TOKENSOk() (*string, bool) {
	if o == nil || IsNil(o.ACCESS_TOKENS) {
		return nil, false
	}
	return o.ACCESS_TOKENS, true
}

// HasACCESS_TOKENS returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasACCESS_TOKENS() bool {
	if o != nil && !IsNil(o.ACCESS_TOKENS) {
		return true
	}

	return false
}

// SetACCESS_TOKENS gets a reference to the given string and assigns it to the ACCESS_TOKENS field.
func (o *GithubRESTConnector) SetACCESS_TOKENS(v string) {
	o.ACCESS_TOKENS = &v
}

// GetORGANIZATION_LIST returns the ORGANIZATION_LIST field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetORGANIZATION_LIST() string {
	if o == nil || IsNil(o.ORGANIZATION_LIST) {
		var ret string
		return ret
	}
	return *o.ORGANIZATION_LIST
}

// GetORGANIZATION_LISTOk returns a tuple with the ORGANIZATION_LIST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetORGANIZATION_LISTOk() (*string, bool) {
	if o == nil || IsNil(o.ORGANIZATION_LIST) {
		return nil, false
	}
	return o.ORGANIZATION_LIST, true
}

// HasORGANIZATION_LIST returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasORGANIZATION_LIST() bool {
	if o != nil && !IsNil(o.ORGANIZATION_LIST) {
		return true
	}

	return false
}

// SetORGANIZATION_LIST gets a reference to the given string and assigns it to the ORGANIZATION_LIST field.
func (o *GithubRESTConnector) SetORGANIZATION_LIST(v string) {
	o.ORGANIZATION_LIST = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *GithubRESTConnector) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetPAM_CONFIG returns the PAM_CONFIG field value if set, zero value otherwise.
func (o *GithubRESTConnector) GetPAM_CONFIG() string {
	if o == nil || IsNil(o.PAM_CONFIG) {
		var ret string
		return ret
	}
	return *o.PAM_CONFIG
}

// GetPAM_CONFIGOk returns a tuple with the PAM_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRESTConnector) GetPAM_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.PAM_CONFIG) {
		return nil, false
	}
	return o.PAM_CONFIG, true
}

// HasPAM_CONFIG returns a boolean if a field has been set.
func (o *GithubRESTConnector) HasPAM_CONFIG() bool {
	if o != nil && !IsNil(o.PAM_CONFIG) {
		return true
	}

	return false
}

// SetPAM_CONFIG gets a reference to the given string and assigns it to the PAM_CONFIG field.
func (o *GithubRESTConnector) SetPAM_CONFIG(v string) {
	o.PAM_CONFIG = &v
}

func (o GithubRESTConnector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubRESTConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseConnector, errBaseConnector := json.Marshal(o.BaseConnector)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	errBaseConnector = json.Unmarshal([]byte(serializedBaseConnector), &toSerialize)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	if !IsNil(o.ConnectionJSON) {
		toSerialize["ConnectionJSON"] = o.ConnectionJSON
	}
	if !IsNil(o.ImportAccountEntJSON) {
		toSerialize["ImportAccountEntJSON"] = o.ImportAccountEntJSON
	}
	if !IsNil(o.ACCESS_TOKENS) {
		toSerialize["ACCESS_TOKENS"] = o.ACCESS_TOKENS
	}
	if !IsNil(o.ORGANIZATION_LIST) {
		toSerialize["ORGANIZATION_LIST"] = o.ORGANIZATION_LIST
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.PAM_CONFIG) {
		toSerialize["PAM_CONFIG"] = o.PAM_CONFIG
	}
	return toSerialize, nil
}

func (o *GithubRESTConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionName",
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGithubRESTConnector := _GithubRESTConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGithubRESTConnector)

	if err != nil {
		return err
	}

	*o = GithubRESTConnector(varGithubRESTConnector)

	return err
}

type NullableGithubRESTConnector struct {
	value *GithubRESTConnector
	isSet bool
}

func (v NullableGithubRESTConnector) Get() *GithubRESTConnector {
	return v.value
}

func (v *NullableGithubRESTConnector) Set(val *GithubRESTConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubRESTConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubRESTConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubRESTConnector(val *GithubRESTConnector) *NullableGithubRESTConnector {
	return &NullableGithubRESTConnector{value: val, isSet: true}
}

func (v NullableGithubRESTConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubRESTConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
