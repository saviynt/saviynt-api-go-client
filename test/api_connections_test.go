/*
Saviynt Connections API

Testing ConnectionsAPIService
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"os"
	"strings"
	"testing"
	"strconv"

	"github.com/saviynt/saviynt-api-go-client/connections"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConnectionsAPIService(t *testing.T) {
	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	var connKey int32
	connName := "sample-ad-connection8"

	url := os.Getenv("AD_URL")
	username := os.Getenv("AD_USERNAME")
	ctx := context.Background()

	t.Run("Test CreateConnections", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		adConn := connections.ADConnector{
			BaseConnector: connections.BaseConnector{
				Connectiontype: "AD",
				ConnectionName: connName,
			},
			URL:      &url,
			USERNAME: &username,
			PASSWORD: os.Getenv("AD_PASSWORD"),
		}

		testConnRequest := connections.CreateOrUpdateRequest{
			ADConnector: &adConn,
		}

		createReq := apiClient.Connections.CreateOrUpdate(ctx).CreateOrUpdateRequest(testConnRequest)
		resp, httpResp, err := createReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.ErrorCode)
		assert.Equal(t, "Connection Successful", *resp.Msg)
		connKey = *resp.ConnectionKey
	})

	t.Run("Test UpdateConnection", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		pageSize := "20"

		adConn := connections.ADConnector{
			BaseConnector: connections.BaseConnector{
				Connectiontype: "AD",
				ConnectionName: connName,
			},
			PASSWORD:  os.Getenv("AD_PASSWORD"),
			PAGE_SIZE: &pageSize,
		}

		testConnRequest := connections.CreateOrUpdateRequest{
			ADConnector: &adConn,
		}

		updateReq := apiClient.Connections.CreateOrUpdate(ctx).CreateOrUpdateRequest(testConnRequest)
		resp, httpResp, err := updateReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.ErrorCode)
		assert.Equal(t, "Connection Successful", *resp.Msg)
	})

	t.Run("Test GetConnectionDetails", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		connKeyStr := strconv.Itoa(int(connKey)) 
		req := connections.GetConnectionDetailsRequest{
			Connectionkey: &connKeyStr,
		}

		resp, httpResp, err := apiClient.Connections.GetConnectionDetails(ctx).
			GetConnectionDetailsRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, connKey, *resp.ADConnectionResponse.Connectionkey)
	})
}
