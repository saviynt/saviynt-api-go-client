/*
Account Management API

Testing SecuritySystemsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"fmt"
	"testing"

	openapi "github.com/saviynt/saviynt-api-go-client/securitysystems"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_SecuritySystemsAPIService(t *testing.T) {
	apiClient, _, skipTests, skipMsg, err := client()
	require.NoError(t, err, "Failed to initialize API client")
	if !skipTests {
		require.NotNil(t, apiClient, "apiClient should not be nil")
		require.NotNil(t, apiClient.SecuritySystems, "apiClient.SecuritySystems should not be nil")
	}
	ctx := context.Background()

	t.Run("Test SecuritySystemsAPIService CreateSecuritySystem", func(t *testing.T) {
		if skipTests {
			if skipMsg != "" {
				t.Skip(skipMsg)
			} else {
				t.Skip(MsgSkipTest)
			}
		}
		require.NotNil(t, apiClient.SecuritySystems, "apiClient.SecuritySystems is nil, skipping test")
		createSecurityReq := openapi.CreateSecuritySystemRequest{
			Systemname:  "Shaleen GoClient",
			DisplayName: "Shaleen GoClient",
		}
		resp, httpRes, err := apiClient.SecuritySystems.CreateSecuritySystem(ctx).CreateSecuritySystemRequest(createSecurityReq).Execute()
		require.NoError(t, err, "Unexpected error in CreateSecuritySystem")
		require.NotNil(t, httpRes, "httpRes should not be nil")
		fmt.Printf("HTTP Status: %d\n", httpRes.StatusCode)
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	t.Run("Test SecuritySystemsAPIService GetSecuritySystems", func(t *testing.T) {
		if skipTests {
			if skipMsg != "" {
				t.Skip(skipMsg)
			} else {
				t.Skip(MsgSkipTest)
			}
		}
		require.NotNil(t, apiClient.SecuritySystems, "apiClient.SecuritySystems is nil, skipping test")
		getReq := apiClient.SecuritySystems.GetSecuritySystems(ctx).Max(4)
		resp, httpRes, err := getReq.Execute()
		require.NoError(t, err, "Unexpected error in GetSecuritySystems")
		require.NotNil(t, httpRes, "httpRes should not be nil")
		fmt.Printf("HTTP Status: %d\n", httpRes.StatusCode)
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	t.Run("Test SecuritySystemsAPIService UpdateSecuritySystem", func(t *testing.T) {
		if skipTests {
			if skipMsg != "" {
				t.Skip(skipMsg)
			} else {
				t.Skip(MsgSkipTest)
			}
		}
		require.NotNil(t, apiClient.SecuritySystems, "apiClient.SecuritySystems is nil, skipping test")
		port := "9090"
		updateSecurityReq := openapi.UpdateSecuritySystemRequest{
			Systemname: "Shaleen GoClient",
			Port:       &port,
		}
		resp, httpRes, err := apiClient.SecuritySystems.UpdateSecuritySystem(ctx).UpdateSecuritySystemRequest(updateSecurityReq).Execute()
		require.NoError(t, err, "Unexpected error in UpdateSecuritySystem")
		require.NotNil(t, httpRes, "httpRes should not be nil")
		fmt.Printf("HTTP Status: %d\n", httpRes.StatusCode)
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})
}