/*
Saviynt Transport API

Testing TransportAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"path/filepath"
	"strings"
	"testing"
	"time"

	saviyntapigoclient "github.com/saviynt/saviynt-api-go-client"
	"github.com/saviynt/saviynt-api-go-client/transport"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_transport_TransportAPIService(t *testing.T) {
	apiClient, creds, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	exportFilepath := "/saviynt_shared/testexport/transportPackage"
	var exportFilename string

	ctx := context.Background()

	t.Run("Test_TransportAPIService_ExportTransportPackage", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := transport.ExportTransportPackageRequest{
			Updateuser:       &creds.Username,
			Transportowner:   saviyntapigoclient.Pointer("true"),
			Transportmembers: saviyntapigoclient.Pointer("true"),
			Exportonline:     "false",
			Exportpath:       &exportFilepath,
			Objectstoexport: transport.ObjectsToExport{
				SavRoles: []string{"ROLE_ADMIN"},
				EmailTemplate: []string{
					"Account Password Expiry Email",
					"Entitlement Expiry Email",
				},
			},
			Businessjustification: saviyntapigoclient.Pointer("justified..."),
		}

		resp, httpRes, err := apiClient.Transport.
			ExportTransportPackage(ctx).
			ExportTransportPackageRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, int32(0), resp.Errorcode)

		exportFilename = resp.FileName
		time.Sleep(25 * time.Second)
	})

	t.Run("Test_TransportAPIService_ImportTransportPackage", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		} else if exportFilename == "" {
			t.Skipf(MsgSkipTestPrereqNotSet, "`Test_TransportAPIService_ExportTransportPackage`")
		}

		req := transport.ImportTransportPackageRequest{
			Packagetoimport: filepath.Join(exportFilepath, exportFilename)}

		resp, httpRes, err := apiClient.Transport.
			ImportTransportPackage(ctx).
			ImportTransportPackageRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, int32(0), resp.Errorcode)
	})

	t.Run("Test_TransportAPIService_TransportPackageStatus", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		} else if exportFilename == "" {
			t.Skipf(MsgSkipTestPrereqNotSet, "`Test_TransportAPIService_ExportTransportPackage`")
		}

		req := transport.TransportPackageStatusRequest{
			Operation: "export",
			Filename:  exportFilename}

		resp, httpRes, err := apiClient.Transport.
			TransportPackageStatus(ctx).
			TransportPackageStatusRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, int32(0), resp.ErrorCode)
	})
}
