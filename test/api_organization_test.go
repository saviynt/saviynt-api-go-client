/*
Organization Management API

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);
package test

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"testing"

	openapi "github.com/saviynt/saviynt-api-go-client/organization"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	defaultUsername = "awsadmin"
	defaultOrgName  = "TestOrg9"
	comment         = "Hello this is from test connections"
)

func marshalResp(v interface{}) []byte {
	b, err := json.MarshalIndent(v, "", "  ")
	if err != nil {
		log.Fatalf("Error marshalling response: %v", err)
	}
	return b
}

func Test_openapi_OrganizationsAPIService(t *testing.T) {
	apiClient, _, _, _, err := client()
	require.NoError(t, err, "Failed to initialize API client")
	require.NotNil(t, apiClient, "apiClient should not be nil")
	require.NotNil(t, apiClient.Organizations, "apiClient.Organizations should not be nil")

	ctx := context.Background()
	t.Run("Test OrganizationsAPIService CreateOrganization", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}
		createReq := openapi.CreateOrganizationRequest{
			Organizationname: defaultOrgName,
			Username:         defaultUsername,
		}
		createReq.SetPrimarycontact("awsadmin")
		createReq.SetComments("Created via CreateOrganization test")

		resp, httpRes, err := apiClient.Organizations.
			CreateOrganization(ctx).
			CreateOrganizationRequest(createReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		fmt.Println("CreateOrganization Response:")
		fmt.Println(string(marshalResp(resp)))
	})

	t.Run("Test OrganizationsAPIService UpdateOrganization", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}
		updateReq := openapi.UpdateOrganizationRequest{
			Organizationname: defaultOrgName,
			Username:         defaultUsername,
			Comments:         &comment,
		}
		updateReq.SetComments("Updated via UpdateOrganization test")
		resp, httpRes, err := apiClient.Organizations.
			UpdateOrganization(ctx).
			UpdateOrganizationRequest(updateReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		fmt.Println("UpdateOrganization Response:")
		fmt.Println(string(marshalResp(resp)))
	})
	t.Run("Test OrganizationsAPIService GetOrganization", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}
		getReq := openapi.GetOrganizationRequest{
			Organizationname: &defaultOrgName,
		}

		// Call the GetOrganization API endpoint.
		resp, httpRes, err := apiClient.Organizations.
			GetOrganization(ctx).
			GetOrganizationRequest(getReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Marshal the response for readability and print it.
		respJSON, err := json.MarshalIndent(resp, "", "  ")
		require.NoError(t, err)
		fmt.Printf("HTTP status: %d\nResponse JSON:\n%s\n", httpRes.StatusCode, string(respJSON))
	})

	t.Run("Test OrganizationsAPIService GetOrganizationUserDetails", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}

		getDetailsReq := openapi.GetOrganizationUserDetailsRequest{
			Username: defaultUsername,
		}
		resp, httpRes, err := apiClient.Organizations.
			GetOrganizationUserDetails(ctx).
			GetOrganizationUserDetailsRequest(getDetailsReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		fmt.Println("GetOrganizationUserDetails Response:")
		fmt.Println(string(marshalResp(resp)))
	})

	t.Run("Test OrganizationsAPIService DeleteOrganization", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}
		deleteReq := openapi.DeleteOrganizationRequest{
			Organizationname: &defaultOrgName,
			Username:         &defaultUsername,
		}
		resp, httpRes, err := apiClient.Organizations.
			DeleteOrganization(ctx).
			DeleteOrganizationRequest(deleteReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		fmt.Println("DeleteOrganization Response:")
		fmt.Println(string(marshalResp(resp)))
	})

	t.Run("Test OrganizationsAPIService UpdateOrganizationUsers", func(t *testing.T) {
		if apiClient.Organizations == nil {
			t.Fatal("apiClient.Organizations is nil, skipping test")
		}
		organizationName := "TestOrg5"
		username := "User_spc$%^&"
		updatetype := "remove"
		// Create an UpdateOrganizationUsersRequest.
		updateUsersReq := openapi.UpdateOrganizationUsersRequest{
			Organizationname: &organizationName,
			Users: []openapi.UpdateOrganizationUsersRequestUsersInner{
				{
					Username:   &username,
					Updatetype: &updatetype,
				},
			},
		}
		resp, httpRes, err := apiClient.Organizations.
			UpdateOrganizationUsers(ctx).
			UpdateOrganizationUsersRequest(updateUsersReq).
			Execute()
		require.NoError(t, err)
		require.NotNil(t, httpRes, "httpRes should not be nil")
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		fmt.Println("UpdateOrganizationUsers Response:")
		fmt.Println(string(marshalResp(resp)))
	})

}
