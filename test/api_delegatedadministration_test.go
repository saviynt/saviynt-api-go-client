/*
Saviynt Delegated Administration API

Testing DelegatedAdministrationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"fmt"
	"strings"
	"testing"
	"time"

	saviyntapigoclient "github.com/saviynt/saviynt-api-go-client"
	"github.com/saviynt/saviynt-api-go-client/delegatedadministration"
	"github.com/saviynt/saviynt-api-go-client/util/delegatedadministrationutil"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delegatedadministration_DelegatedAdministrationAPIService(t *testing.T) {
	apiClient, creds, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	ctx := context.Background()

	layoutDT8MYD := "01022006"
	dateLayoutCreateDelegateRequest := layoutDT8MYD
	layoutM2D2Y4Slash := "01/02/2006"
	dateLayoutFetchDelegatesResponse := layoutM2D2Y4Slash

	delegatesAvailable := delegatedadministrationutil.DelegateUsers{}
	delegatesExisting := delegatedadministrationutil.Delegates{}
	delegateCreateRequest := delegatedadministration.CreateDelegateRequest{}
	delegateCreateResponse := delegatedadministration.CreateDelegateResponse{}

	t.Run("Test_DelegatedAdministrationAPIService_GetDelegateUserList", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := delegatedadministration.GetDelegateUserListRequest{
			Parentusername: creds.Username,
			Max:            saviyntapigoclient.Pointer(int32(10)),
			Offset:         saviyntapigoclient.Pointer(int32(0))}

		resp, httpRes, err := apiClient.DelegatedAdministration.
			GetDelegateUserList(ctx).
			GetDelegateUserListRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)

		delegatesAvailable = resp.Result
	})

	t.Run("Test_DelegatedAdministrationAPIService_FetchDelegatesList", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := delegatedadministration.FetchDelegatesListRequest{
			UserName: creds.Username}

		resp, httpRes, err := apiClient.DelegatedAdministration.
			FetchDelegatesList(ctx).
			FetchDelegatesListRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, "0", resp.ErrorCode)

		delegatesExisting = resp.DelegateList
	})

	t.Run("Test_DelegatedAdministrationAPIService_CreateDelegate", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		tr, err := delegatesExisting.MaxTimeRange(dateLayoutFetchDelegatesResponse)
		require.Nil(t, err)
		tMax := tr.MaxOrDefault(time.Now())
		t30 := tMax.Add(time.Hour * 24 * 30)
		t60 := tMax.Add(time.Hour * 24 * 60)

		candidates := delegatesAvailable.Usernames([]string{creds.Username})
		assert.Greater(t, len(candidates), 0)

		req := delegatedadministration.CreateDelegateRequest{
			UserName:          creds.Username,
			Name:              fmt.Sprintf("Delegate for %s to %s", t30.Format(time.DateOnly), t60.Format(time.DateOnly)), // Delegate Name
			Delegateusername:  candidates[0],                                                                              // Must match `username` in `GetDelegateUserList`
			Delegatestartdate: t30.Format(dateLayoutCreateDelegateRequest),
			Delegateenddate:   t60.Format(dateLayoutCreateDelegateRequest)}

		resp, httpRes, err := apiClient.DelegatedAdministration.
			CreateDelegate(ctx).
			CreateDelegateRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, "0", resp.ErrorCode)
		if resp != nil && resp.ErrorCode != "0" && strings.TrimSpace(resp.Msg) != "" {
			t.Errorf("error message: (%s)", resp.Msg)
		}

		delegateCreateRequest = req
		delegateCreateResponse = *resp
	})

	t.Run("Test_DelegatedAdministrationAPIService_GetDelegate", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		} else if delegateCreateResponse.Delegatekey == nil || *delegateCreateResponse.Delegatekey == "" {
			t.Skipf(MsgSkipTestPrereqNotSet, "`Test_DelegatedAdministrationAPIService_GetDelegate`")
		}

		d, err := delegatedadministrationutil.ReadDelegate(ctx,
			apiClient.DelegatedAdministration,
			creds.Username,
			*delegateCreateResponse.Delegatekey)

		require.Nil(t, err)
		require.NotNil(t, d)
		assert.Equal(t, *delegateCreateResponse.Delegatekey, d.Delegatekey)
	})

	t.Run("Test_DelegatedAdministrationAPIService_EditDelegate", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		} else if delegateCreateResponse.Delegatekey == nil || *delegateCreateResponse.Delegatekey == "" {
			t.Skipf(MsgSkipTestPrereqNotSet, "`Test_DelegatedAdministrationAPIService_CreateDelegate`")
		}

		req := delegatedadministration.EditDelegateRequest{
			Key:               *delegateCreateResponse.Delegatekey,
			UserName:          delegateCreateRequest.UserName,
			Name:              delegateCreateRequest.Name,
			Delegateusername:  delegateCreateRequest.Delegateusername,
			Delegatestartdate: delegateCreateRequest.Delegatestartdate,
			Delegateenddate:   delegateCreateRequest.Delegateenddate,
			Description:       saviyntapigoclient.Pointer("Updated at " + time.Now().UTC().Format(time.RFC3339)),
		}

		resp, httpRes, err := apiClient.DelegatedAdministration.
			EditDelegate(ctx).
			EditDelegateRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, "0", resp.ErrorCode)
	})

	t.Run("Test_DelegatedAdministrationAPIService_DeleteDelegate", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		} else if delegateCreateResponse.Delegatekey == nil || *delegateCreateResponse.Delegatekey == "" {
			t.Skipf(MsgSkipTestPrereqNotSet, "`Test_DelegatedAdministrationAPIService_CreateDelegate`")
		}

		resp, httpRes, err := apiClient.DelegatedAdministration.
			DeleteDelegate(ctx).
			UserName(creds.Username).
			Key(*delegateCreateResponse.Delegatekey).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
		assert.Equal(t, "0", resp.ErrorCode)
	})
}
