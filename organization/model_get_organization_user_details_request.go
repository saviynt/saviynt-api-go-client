/*
Organization Management API

API for creating, updating, retrieving, and deleting organization data in EIC

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetOrganizationUserDetailsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationUserDetailsRequest{}

// GetOrganizationUserDetailsRequest struct for GetOrganizationUserDetailsRequest
type GetOrganizationUserDetailsRequest struct {
	// The name of the user to fetch organization details for.
	Username string `json:"username"`
	// The maximum number of records to return.
	Max *string `json:"max,omitempty"`
	// The starting offset of records.
	Offset *string `json:"offset,omitempty"`
	// A query to filter organizations (e.g. c.organizationname like '%TestOrg5%').
	OrgQuery *string `json:"orgQuery,omitempty"`
	// Set to true to get additional user details.
	Verbose *bool `json:"verbose,omitempty"`
	// Set to true to fetch only the count.
	Fetchonlycount *bool `json:"fetchonlycount,omitempty"`
	// Specify if you want only details for a particular organization type (e.g. primary or secondary).
	Orgmemebership *string `json:"orgmemebership,omitempty"`
}

type _GetOrganizationUserDetailsRequest GetOrganizationUserDetailsRequest

// NewGetOrganizationUserDetailsRequest instantiates a new GetOrganizationUserDetailsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationUserDetailsRequest(username string) *GetOrganizationUserDetailsRequest {
	this := GetOrganizationUserDetailsRequest{}
	this.Username = username
	return &this
}

// NewGetOrganizationUserDetailsRequestWithDefaults instantiates a new GetOrganizationUserDetailsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationUserDetailsRequestWithDefaults() *GetOrganizationUserDetailsRequest {
	this := GetOrganizationUserDetailsRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *GetOrganizationUserDetailsRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *GetOrganizationUserDetailsRequest) SetUsername(v string) {
	o.Username = v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *GetOrganizationUserDetailsRequest) SetMax(v string) {
	o.Max = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetOffset() string {
	if o == nil || IsNil(o.Offset) {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *GetOrganizationUserDetailsRequest) SetOffset(v string) {
	o.Offset = &v
}

// GetOrgQuery returns the OrgQuery field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetOrgQuery() string {
	if o == nil || IsNil(o.OrgQuery) {
		var ret string
		return ret
	}
	return *o.OrgQuery
}

// GetOrgQueryOk returns a tuple with the OrgQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetOrgQueryOk() (*string, bool) {
	if o == nil || IsNil(o.OrgQuery) {
		return nil, false
	}
	return o.OrgQuery, true
}

// HasOrgQuery returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasOrgQuery() bool {
	if o != nil && !IsNil(o.OrgQuery) {
		return true
	}

	return false
}

// SetOrgQuery gets a reference to the given string and assigns it to the OrgQuery field.
func (o *GetOrganizationUserDetailsRequest) SetOrgQuery(v string) {
	o.OrgQuery = &v
}

// GetVerbose returns the Verbose field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetVerbose() bool {
	if o == nil || IsNil(o.Verbose) {
		var ret bool
		return ret
	}
	return *o.Verbose
}

// GetVerboseOk returns a tuple with the Verbose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetVerboseOk() (*bool, bool) {
	if o == nil || IsNil(o.Verbose) {
		return nil, false
	}
	return o.Verbose, true
}

// HasVerbose returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasVerbose() bool {
	if o != nil && !IsNil(o.Verbose) {
		return true
	}

	return false
}

// SetVerbose gets a reference to the given bool and assigns it to the Verbose field.
func (o *GetOrganizationUserDetailsRequest) SetVerbose(v bool) {
	o.Verbose = &v
}

// GetFetchonlycount returns the Fetchonlycount field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetFetchonlycount() bool {
	if o == nil || IsNil(o.Fetchonlycount) {
		var ret bool
		return ret
	}
	return *o.Fetchonlycount
}

// GetFetchonlycountOk returns a tuple with the Fetchonlycount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetFetchonlycountOk() (*bool, bool) {
	if o == nil || IsNil(o.Fetchonlycount) {
		return nil, false
	}
	return o.Fetchonlycount, true
}

// HasFetchonlycount returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasFetchonlycount() bool {
	if o != nil && !IsNil(o.Fetchonlycount) {
		return true
	}

	return false
}

// SetFetchonlycount gets a reference to the given bool and assigns it to the Fetchonlycount field.
func (o *GetOrganizationUserDetailsRequest) SetFetchonlycount(v bool) {
	o.Fetchonlycount = &v
}

// GetOrgmemebership returns the Orgmemebership field value if set, zero value otherwise.
func (o *GetOrganizationUserDetailsRequest) GetOrgmemebership() string {
	if o == nil || IsNil(o.Orgmemebership) {
		var ret string
		return ret
	}
	return *o.Orgmemebership
}

// GetOrgmemebershipOk returns a tuple with the Orgmemebership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUserDetailsRequest) GetOrgmemebershipOk() (*string, bool) {
	if o == nil || IsNil(o.Orgmemebership) {
		return nil, false
	}
	return o.Orgmemebership, true
}

// HasOrgmemebership returns a boolean if a field has been set.
func (o *GetOrganizationUserDetailsRequest) HasOrgmemebership() bool {
	if o != nil && !IsNil(o.Orgmemebership) {
		return true
	}

	return false
}

// SetOrgmemebership gets a reference to the given string and assigns it to the Orgmemebership field.
func (o *GetOrganizationUserDetailsRequest) SetOrgmemebership(v string) {
	o.Orgmemebership = &v
}

func (o GetOrganizationUserDetailsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationUserDetailsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.OrgQuery) {
		toSerialize["orgQuery"] = o.OrgQuery
	}
	if !IsNil(o.Verbose) {
		toSerialize["verbose"] = o.Verbose
	}
	if !IsNil(o.Fetchonlycount) {
		toSerialize["fetchonlycount"] = o.Fetchonlycount
	}
	if !IsNil(o.Orgmemebership) {
		toSerialize["orgmemebership"] = o.Orgmemebership
	}
	return toSerialize, nil
}

func (o *GetOrganizationUserDetailsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetOrganizationUserDetailsRequest := _GetOrganizationUserDetailsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetOrganizationUserDetailsRequest)

	if err != nil {
		return err
	}

	*o = GetOrganizationUserDetailsRequest(varGetOrganizationUserDetailsRequest)

	return err
}

type NullableGetOrganizationUserDetailsRequest struct {
	value *GetOrganizationUserDetailsRequest
	isSet bool
}

func (v NullableGetOrganizationUserDetailsRequest) Get() *GetOrganizationUserDetailsRequest {
	return v.value
}

func (v *NullableGetOrganizationUserDetailsRequest) Set(val *GetOrganizationUserDetailsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationUserDetailsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationUserDetailsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationUserDetailsRequest(val *GetOrganizationUserDetailsRequest) *NullableGetOrganizationUserDetailsRequest {
	return &NullableGetOrganizationUserDetailsRequest{value: val, isSet: true}
}

func (v NullableGetOrganizationUserDetailsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationUserDetailsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


