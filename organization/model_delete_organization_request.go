/*
Organization Management API

API for creating, updating, retrieving, and deleting organization data in EIC

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteOrganizationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteOrganizationRequest{}

// DeleteOrganizationRequest struct for DeleteOrganizationRequest
type DeleteOrganizationRequest struct {
	// The name of the organization to delete.
	Organizationname *string `json:"organizationname,omitempty"`
	// The username of the user deleting the organization.
	Username *string `json:"username,omitempty"`
}

// NewDeleteOrganizationRequest instantiates a new DeleteOrganizationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteOrganizationRequest() *DeleteOrganizationRequest {
	this := DeleteOrganizationRequest{}
	return &this
}

// NewDeleteOrganizationRequestWithDefaults instantiates a new DeleteOrganizationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteOrganizationRequestWithDefaults() *DeleteOrganizationRequest {
	this := DeleteOrganizationRequest{}
	return &this
}

// GetOrganizationname returns the Organizationname field value if set, zero value otherwise.
func (o *DeleteOrganizationRequest) GetOrganizationname() string {
	if o == nil || IsNil(o.Organizationname) {
		var ret string
		return ret
	}
	return *o.Organizationname
}

// GetOrganizationnameOk returns a tuple with the Organizationname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteOrganizationRequest) GetOrganizationnameOk() (*string, bool) {
	if o == nil || IsNil(o.Organizationname) {
		return nil, false
	}
	return o.Organizationname, true
}

// HasOrganizationname returns a boolean if a field has been set.
func (o *DeleteOrganizationRequest) HasOrganizationname() bool {
	if o != nil && !IsNil(o.Organizationname) {
		return true
	}

	return false
}

// SetOrganizationname gets a reference to the given string and assigns it to the Organizationname field.
func (o *DeleteOrganizationRequest) SetOrganizationname(v string) {
	o.Organizationname = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DeleteOrganizationRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteOrganizationRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DeleteOrganizationRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DeleteOrganizationRequest) SetUsername(v string) {
	o.Username = &v
}

func (o DeleteOrganizationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteOrganizationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organizationname) {
		toSerialize["organizationname"] = o.Organizationname
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableDeleteOrganizationRequest struct {
	value *DeleteOrganizationRequest
	isSet bool
}

func (v NullableDeleteOrganizationRequest) Get() *DeleteOrganizationRequest {
	return v.value
}

func (v *NullableDeleteOrganizationRequest) Set(val *DeleteOrganizationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteOrganizationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteOrganizationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteOrganizationRequest(val *DeleteOrganizationRequest) *NullableDeleteOrganizationRequest {
	return &NullableDeleteOrganizationRequest{value: val, isSet: true}
}

func (v NullableDeleteOrganizationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteOrganizationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


