/*
Saviynt Delegated Administration API

Deglated Administration

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delegatedadministration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DelegateUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegateUser{}

// DelegateUser struct for DelegateUser
type DelegateUser struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	// This value is used in the `createDelegate` API.
	Username string `json:"username"`
}

type _DelegateUser DelegateUser

// NewDelegateUser instantiates a new DelegateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegateUser(firstname string, lastname string, username string) *DelegateUser {
	this := DelegateUser{}
	this.Firstname = firstname
	this.Lastname = lastname
	this.Username = username
	return &this
}

// NewDelegateUserWithDefaults instantiates a new DelegateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegateUserWithDefaults() *DelegateUser {
	this := DelegateUser{}
	return &this
}

// GetFirstname returns the Firstname field value
func (o *DelegateUser) GetFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value
// and a boolean to check if the value has been set.
func (o *DelegateUser) GetFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firstname, true
}

// SetFirstname sets field value
func (o *DelegateUser) SetFirstname(v string) {
	o.Firstname = v
}

// GetLastname returns the Lastname field value
func (o *DelegateUser) GetLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value
// and a boolean to check if the value has been set.
func (o *DelegateUser) GetLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastname, true
}

// SetLastname sets field value
func (o *DelegateUser) SetLastname(v string) {
	o.Lastname = v
}

// GetUsername returns the Username field value
func (o *DelegateUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *DelegateUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *DelegateUser) SetUsername(v string) {
	o.Username = v
}

func (o DelegateUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegateUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstname"] = o.Firstname
	toSerialize["lastname"] = o.Lastname
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *DelegateUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstname",
		"lastname",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelegateUser := _DelegateUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelegateUser)

	if err != nil {
		return err
	}

	*o = DelegateUser(varDelegateUser)

	return err
}

type NullableDelegateUser struct {
	value *DelegateUser
	isSet bool
}

func (v NullableDelegateUser) Get() *DelegateUser {
	return v.value
}

func (v *NullableDelegateUser) Set(val *DelegateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegateUser(val *DelegateUser) *NullableDelegateUser {
	return &NullableDelegateUser{value: val, isSet: true}
}

func (v NullableDelegateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
