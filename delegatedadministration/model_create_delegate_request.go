/*
Saviynt Delegated Administration API

Deglated Administration

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delegatedadministration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDelegateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDelegateRequest{}

// CreateDelegateRequest struct for CreateDelegateRequest
type CreateDelegateRequest struct {
	// this is user who is creating the delegation
	UserName string `json:"userName"`
	// name of delegate.
	Name string `json:"name"`
	// This is the user who should be assigned as the delegate of the parent user. It must match `username` in `GetDelegateUserList` API response.
	Delegateusername string `json:"delegateusername"`
	// in format MMDDYYYY
	Delegatestartdate string `json:"delegatestartdate"`
	// in format MMDDYYYY
	Delegateenddate string `json:"delegateenddate"`
	// this is the parent username, if not passed it will consider `userName` as parentusername
	Parentusername *string `json:"parentusername,omitempty"`
	Description *string `json:"description,omitempty"`
}

type _CreateDelegateRequest CreateDelegateRequest

// NewCreateDelegateRequest instantiates a new CreateDelegateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDelegateRequest(userName string, name string, delegateusername string, delegatestartdate string, delegateenddate string) *CreateDelegateRequest {
	this := CreateDelegateRequest{}
	this.UserName = userName
	this.Name = name
	this.Delegateusername = delegateusername
	this.Delegatestartdate = delegatestartdate
	this.Delegateenddate = delegateenddate
	return &this
}

// NewCreateDelegateRequestWithDefaults instantiates a new CreateDelegateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDelegateRequestWithDefaults() *CreateDelegateRequest {
	this := CreateDelegateRequest{}
	return &this
}

// GetUserName returns the UserName field value
func (o *CreateDelegateRequest) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *CreateDelegateRequest) SetUserName(v string) {
	o.UserName = v
}

// GetName returns the Name field value
func (o *CreateDelegateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateDelegateRequest) SetName(v string) {
	o.Name = v
}

// GetDelegateusername returns the Delegateusername field value
func (o *CreateDelegateRequest) GetDelegateusername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delegateusername
}

// GetDelegateusernameOk returns a tuple with the Delegateusername field value
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetDelegateusernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delegateusername, true
}

// SetDelegateusername sets field value
func (o *CreateDelegateRequest) SetDelegateusername(v string) {
	o.Delegateusername = v
}

// GetDelegatestartdate returns the Delegatestartdate field value
func (o *CreateDelegateRequest) GetDelegatestartdate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delegatestartdate
}

// GetDelegatestartdateOk returns a tuple with the Delegatestartdate field value
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetDelegatestartdateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delegatestartdate, true
}

// SetDelegatestartdate sets field value
func (o *CreateDelegateRequest) SetDelegatestartdate(v string) {
	o.Delegatestartdate = v
}

// GetDelegateenddate returns the Delegateenddate field value
func (o *CreateDelegateRequest) GetDelegateenddate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delegateenddate
}

// GetDelegateenddateOk returns a tuple with the Delegateenddate field value
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetDelegateenddateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delegateenddate, true
}

// SetDelegateenddate sets field value
func (o *CreateDelegateRequest) SetDelegateenddate(v string) {
	o.Delegateenddate = v
}

// GetParentusername returns the Parentusername field value if set, zero value otherwise.
func (o *CreateDelegateRequest) GetParentusername() string {
	if o == nil || IsNil(o.Parentusername) {
		var ret string
		return ret
	}
	return *o.Parentusername
}

// GetParentusernameOk returns a tuple with the Parentusername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetParentusernameOk() (*string, bool) {
	if o == nil || IsNil(o.Parentusername) {
		return nil, false
	}
	return o.Parentusername, true
}

// HasParentusername returns a boolean if a field has been set.
func (o *CreateDelegateRequest) HasParentusername() bool {
	if o != nil && !IsNil(o.Parentusername) {
		return true
	}

	return false
}

// SetParentusername gets a reference to the given string and assigns it to the Parentusername field.
func (o *CreateDelegateRequest) SetParentusername(v string) {
	o.Parentusername = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateDelegateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDelegateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateDelegateRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateDelegateRequest) SetDescription(v string) {
	o.Description = &v
}

func (o CreateDelegateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDelegateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userName"] = o.UserName
	toSerialize["name"] = o.Name
	toSerialize["delegateusername"] = o.Delegateusername
	toSerialize["delegatestartdate"] = o.Delegatestartdate
	toSerialize["delegateenddate"] = o.Delegateenddate
	if !IsNil(o.Parentusername) {
		toSerialize["parentusername"] = o.Parentusername
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *CreateDelegateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
		"name",
		"delegateusername",
		"delegatestartdate",
		"delegateenddate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDelegateRequest := _CreateDelegateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDelegateRequest)

	if err != nil {
		return err
	}

	*o = CreateDelegateRequest(varCreateDelegateRequest)

	return err
}

type NullableCreateDelegateRequest struct {
	value *CreateDelegateRequest
	isSet bool
}

func (v NullableCreateDelegateRequest) Get() *CreateDelegateRequest {
	return v.value
}

func (v *NullableCreateDelegateRequest) Set(val *CreateDelegateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDelegateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDelegateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDelegateRequest(val *CreateDelegateRequest) *NullableCreateDelegateRequest {
	return &NullableCreateDelegateRequest{value: val, isSet: true}
}

func (v NullableCreateDelegateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDelegateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


