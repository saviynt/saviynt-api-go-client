/*
Saviynt Users API

Saviynt Users API

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package users

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Displayname *string `json:"displayname,omitempty"`
	Firstname   *string `json:"firstname,omitempty"`
	Statuskey   *string `json:"statuskey,omitempty"`
	UserKey     *int32  `json:"userKey,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetDisplayname returns the Displayname field value if set, zero value otherwise.
func (o *User) GetDisplayname() string {
	if o == nil || IsNil(o.Displayname) {
		var ret string
		return ret
	}
	return *o.Displayname
}

// GetDisplaynameOk returns a tuple with the Displayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDisplaynameOk() (*string, bool) {
	if o == nil || IsNil(o.Displayname) {
		return nil, false
	}
	return o.Displayname, true
}

// HasDisplayname returns a boolean if a field has been set.
func (o *User) HasDisplayname() bool {
	if o != nil && !IsNil(o.Displayname) {
		return true
	}

	return false
}

// SetDisplayname gets a reference to the given string and assigns it to the Displayname field.
func (o *User) SetDisplayname(v string) {
	o.Displayname = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *User) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *User) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *User) SetFirstname(v string) {
	o.Firstname = &v
}

// GetStatuskey returns the Statuskey field value if set, zero value otherwise.
func (o *User) GetStatuskey() string {
	if o == nil || IsNil(o.Statuskey) {
		var ret string
		return ret
	}
	return *o.Statuskey
}

// GetStatuskeyOk returns a tuple with the Statuskey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStatuskeyOk() (*string, bool) {
	if o == nil || IsNil(o.Statuskey) {
		return nil, false
	}
	return o.Statuskey, true
}

// HasStatuskey returns a boolean if a field has been set.
func (o *User) HasStatuskey() bool {
	if o != nil && !IsNil(o.Statuskey) {
		return true
	}

	return false
}

// SetStatuskey gets a reference to the given string and assigns it to the Statuskey field.
func (o *User) SetStatuskey(v string) {
	o.Statuskey = &v
}

// GetUserKey returns the UserKey field value if set, zero value otherwise.
func (o *User) GetUserKey() int32 {
	if o == nil || IsNil(o.UserKey) {
		var ret int32
		return ret
	}
	return *o.UserKey
}

// GetUserKeyOk returns a tuple with the UserKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserKeyOk() (*int32, bool) {
	if o == nil || IsNil(o.UserKey) {
		return nil, false
	}
	return o.UserKey, true
}

// HasUserKey returns a boolean if a field has been set.
func (o *User) HasUserKey() bool {
	if o != nil && !IsNil(o.UserKey) {
		return true
	}

	return false
}

// SetUserKey gets a reference to the given int32 and assigns it to the UserKey field.
func (o *User) SetUserKey(v int32) {
	o.UserKey = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Displayname) {
		toSerialize["displayname"] = o.Displayname
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Statuskey) {
		toSerialize["statuskey"] = o.Statuskey
	}
	if !IsNil(o.UserKey) {
		toSerialize["userKey"] = o.UserKey
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
