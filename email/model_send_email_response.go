/*
Saviynt Email API

Saviynt Email API

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package email

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SendEmailResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEmailResponse{}

// SendEmailResponse struct for SendEmailResponse
type SendEmailResponse struct {
	// `\"0\"` indicates success. Other values indicate failure.
	ErrorCode string `json:"errorCode"`
	Msg       string `json:"msg"`
}

type _SendEmailResponse SendEmailResponse

// NewSendEmailResponse instantiates a new SendEmailResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEmailResponse(errorCode string, msg string) *SendEmailResponse {
	this := SendEmailResponse{}
	this.ErrorCode = errorCode
	this.Msg = msg
	return &this
}

// NewSendEmailResponseWithDefaults instantiates a new SendEmailResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEmailResponseWithDefaults() *SendEmailResponse {
	this := SendEmailResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *SendEmailResponse) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *SendEmailResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *SendEmailResponse) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetMsg returns the Msg field value
func (o *SendEmailResponse) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *SendEmailResponse) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *SendEmailResponse) SetMsg(v string) {
	o.Msg = v
}

func (o SendEmailResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEmailResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["msg"] = o.Msg
	return toSerialize, nil
}

func (o *SendEmailResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorCode",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendEmailResponse := _SendEmailResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendEmailResponse)

	if err != nil {
		return err
	}

	*o = SendEmailResponse(varSendEmailResponse)

	return err
}

type NullableSendEmailResponse struct {
	value *SendEmailResponse
	isSet bool
}

func (v NullableSendEmailResponse) Get() *SendEmailResponse {
	return v.value
}

func (v *NullableSendEmailResponse) Set(val *SendEmailResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEmailResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEmailResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEmailResponse(val *SendEmailResponse) *NullableSendEmailResponse {
	return &NullableSendEmailResponse{value: val, isSet: true}
}

func (v NullableSendEmailResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEmailResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
