/*
Account Management API

API for managing security systems in EIC. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SecuritySystemsAPIService SecuritySystemsAPI service
type SecuritySystemsAPIService service

type ApiCreateSecuritySystemRequest struct {
	ctx context.Context
	ApiService *SecuritySystemsAPIService
	createSecuritySystemRequest *CreateSecuritySystemRequest
}

// Request payload for creating a Security System.
func (r ApiCreateSecuritySystemRequest) CreateSecuritySystemRequest(createSecuritySystemRequest CreateSecuritySystemRequest) ApiCreateSecuritySystemRequest {
	r.createSecuritySystemRequest = &createSecuritySystemRequest
	return r
}

func (r ApiCreateSecuritySystemRequest) Execute() (*CreateSecuritySystem200Response, *http.Response, error) {
	return r.ApiService.CreateSecuritySystemExecute(r)
}

/*
CreateSecuritySystem Create Security System

Use this API to create a Security System in EIC.

The Authorization header must have Bearer followed by Token.

**Mandatory Parameters:**
- `systemname`: Name of the security system.
- `displayName`: Display name for the security system.

**Optional Parameters:**
- `hostname`
- `port`
- `accessAddWorkflow`
- `accessRemoveWorkflow`
- `addServiceAccountWorkflow`
- `removeServiceAccountWorkflow`
- `connectionparameters`
- `automatedProvisioning`
- `provisioningTries`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSecuritySystemRequest
*/
func (a *SecuritySystemsAPIService) CreateSecuritySystem(ctx context.Context) ApiCreateSecuritySystemRequest {
	return ApiCreateSecuritySystemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateSecuritySystem200Response
func (a *SecuritySystemsAPIService) CreateSecuritySystemExecute(r ApiCreateSecuritySystemRequest) (*CreateSecuritySystem200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSecuritySystem200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritySystemsAPIService.CreateSecuritySystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/createSecuritySystem"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createSecuritySystemRequest == nil {
		return localVarReturnValue, nil, reportError("createSecuritySystemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createSecuritySystemRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecuritySystemsRequest struct {
	ctx context.Context
	ApiService *SecuritySystemsAPIService
	systemname *string
	max *int32
	offset *int32
	connectionname *string
	connectionType *string
}

// Filter by security system name.
func (r ApiGetSecuritySystemsRequest) Systemname(systemname string) ApiGetSecuritySystemsRequest {
	r.systemname = &systemname
	return r
}

// Maximum number of records to return.
func (r ApiGetSecuritySystemsRequest) Max(max int32) ApiGetSecuritySystemsRequest {
	r.max = &max
	return r
}

// Pagination offset.
func (r ApiGetSecuritySystemsRequest) Offset(offset int32) ApiGetSecuritySystemsRequest {
	r.offset = &offset
	return r
}

// Connection name used for reconciliation.
func (r ApiGetSecuritySystemsRequest) Connectionname(connectionname string) ApiGetSecuritySystemsRequest {
	r.connectionname = &connectionname
	return r
}

// Type of the connection, e.g., SAP.
func (r ApiGetSecuritySystemsRequest) ConnectionType(connectionType string) ApiGetSecuritySystemsRequest {
	r.connectionType = &connectionType
	return r
}

func (r ApiGetSecuritySystemsRequest) Execute() (*GetSecuritySystems200Response, *http.Response, error) {
	return r.ApiService.GetSecuritySystemsExecute(r)
}

/*
GetSecuritySystems Get Security Systems

Use this API to retrieve the list of Security Systems in EIC.

The Authorization header must have "Bearer {token}".

**Optional Parameters:**
- systemname
- max
- offset
- connectionname
- connectionType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSecuritySystemsRequest
*/
func (a *SecuritySystemsAPIService) GetSecuritySystems(ctx context.Context) ApiGetSecuritySystemsRequest {
	return ApiGetSecuritySystemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSecuritySystems200Response
func (a *SecuritySystemsAPIService) GetSecuritySystemsExecute(r ApiGetSecuritySystemsRequest) (*GetSecuritySystems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSecuritySystems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritySystemsAPIService.GetSecuritySystems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/getSecuritySystems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.systemname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "systemname", r.systemname, "form", "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.connectionname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionname", r.connectionname, "form", "")
	}
	if r.connectionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionType", r.connectionType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSecuritySystemRequest struct {
	ctx context.Context
	ApiService *SecuritySystemsAPIService
	updateSecuritySystemRequest *UpdateSecuritySystemRequest
}

// Request payload for updating a Security System.
func (r ApiUpdateSecuritySystemRequest) UpdateSecuritySystemRequest(updateSecuritySystemRequest UpdateSecuritySystemRequest) ApiUpdateSecuritySystemRequest {
	r.updateSecuritySystemRequest = &updateSecuritySystemRequest
	return r
}

func (r ApiUpdateSecuritySystemRequest) Execute() (*CreateSecuritySystem200Response, *http.Response, error) {
	return r.ApiService.UpdateSecuritySystemExecute(r)
}

/*
UpdateSecuritySystem Update Security System

Use this API to update an existing Security system in EIC.

The Authorization header must have Bearer followed by Token.

**Mandatory Parameter:**
- `systemname`: Specify the security system name you want to update.

**Optional Parameters:**
- `displayName`: A meaningful display name that appears in the Saviynt UI.
- `hostname`
- `port`: Provided but not used for the Security System.
- `policyRule`: Assign the password policy for the security system. *(Available from Release v24.5 onwards.)*
- `policyRuleServiceAccount`: Assign the password policy for service account passwords. *(Available from Release v24.5 onwards.)*
- `accessAddWorkflow`: Workflow for approving access requests.
- `accessRemoveWorkflow`: Workflow for revoking access.
- `addServiceAccountWorkflow`: Workflow for adding a service account.
- `removeServiceAccountWorkflow`: Workflow for removing a service account.
- `connectionparameters`
- `automatedProvisioning`
- `connectionname`: Connection name for identity reconciliation.
- `provisioningConnection`
- `serviceDeskConnection`
- `provisioningcomments`
- `action`: "enable" or "disable".
- `defaultSystem`
- `reconApplication`
- `provisioningTries`: Number of tries for provisioning/de-provisioning (between 1 and 20).
- `inherentSODReportFields`: Fields to filter out in SOD *(Available from Release v24.5 onwards.)*

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateSecuritySystemRequest
*/
func (a *SecuritySystemsAPIService) UpdateSecuritySystem(ctx context.Context) ApiUpdateSecuritySystemRequest {
	return ApiUpdateSecuritySystemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateSecuritySystem200Response
func (a *SecuritySystemsAPIService) UpdateSecuritySystemExecute(r ApiUpdateSecuritySystemRequest) (*CreateSecuritySystem200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSecuritySystem200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritySystemsAPIService.UpdateSecuritySystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/updateSecuritySystem"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSecuritySystemRequest == nil {
		return localVarReturnValue, nil, reportError("updateSecuritySystemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSecuritySystemRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
