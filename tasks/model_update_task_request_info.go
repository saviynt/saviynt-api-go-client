/*
Saviynt Tasks API

Saviynt Tasks API

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tasks

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateTaskRequestInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskRequestInfo{}

// UpdateTaskRequestInfo 1. `updatetype` (if this is set to \"completetask\" then refer completetask api and pass appropriate params as well), 1. `comments` 1. `provisioningComments` 1. `provisioningMetadata` 1. `password` 1. `status` 1. `ticketId` 1. `taskownerusergroup` 1. `taskowneruser` 1. `updateuser` - username of user who is updating the task, 1. `completeassociatedtasks` - true / false, 1. `emailto` 1. `notify` - to pick up data from the task, supported values - \"notify\":[\"USER\",\"requestor\",\"MANAGER\"], 1. `from` 1. `subject` 1. `emailbody`
type UpdateTaskRequestInfo struct {
	Taskid string `json:"taskid"`
	// Use the following numeric status codes to represent the following status. These string status values are returned in the `checkTaskStatus` endpoint. 1: New 2: In Progress 3: Complete 4: Discontinued 5: Pending Create 6: Pending Provision 7: Provisioning Failed 8: Error 9: No Action Required
	Status string `json:"status"`
}

type _UpdateTaskRequestInfo UpdateTaskRequestInfo

// NewUpdateTaskRequestInfo instantiates a new UpdateTaskRequestInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskRequestInfo(taskid string, status string) *UpdateTaskRequestInfo {
	this := UpdateTaskRequestInfo{}
	this.Taskid = taskid
	this.Status = status
	return &this
}

// NewUpdateTaskRequestInfoWithDefaults instantiates a new UpdateTaskRequestInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskRequestInfoWithDefaults() *UpdateTaskRequestInfo {
	this := UpdateTaskRequestInfo{}
	return &this
}

// GetTaskid returns the Taskid field value
func (o *UpdateTaskRequestInfo) GetTaskid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Taskid
}

// GetTaskidOk returns a tuple with the Taskid field value
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequestInfo) GetTaskidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Taskid, true
}

// SetTaskid sets field value
func (o *UpdateTaskRequestInfo) SetTaskid(v string) {
	o.Taskid = v
}

// GetStatus returns the Status field value
func (o *UpdateTaskRequestInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateTaskRequestInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateTaskRequestInfo) SetStatus(v string) {
	o.Status = v
}

func (o UpdateTaskRequestInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskRequestInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskid"] = o.Taskid
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *UpdateTaskRequestInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskid",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTaskRequestInfo := _UpdateTaskRequestInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTaskRequestInfo)

	if err != nil {
		return err
	}

	*o = UpdateTaskRequestInfo(varUpdateTaskRequestInfo)

	return err
}

type NullableUpdateTaskRequestInfo struct {
	value *UpdateTaskRequestInfo
	isSet bool
}

func (v NullableUpdateTaskRequestInfo) Get() *UpdateTaskRequestInfo {
	return v.value
}

func (v *NullableUpdateTaskRequestInfo) Set(val *UpdateTaskRequestInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskRequestInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskRequestInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskRequestInfo(val *UpdateTaskRequestInfo) *NullableUpdateTaskRequestInfo {
	return &NullableUpdateTaskRequestInfo{value: val, isSet: true}
}

func (v NullableUpdateTaskRequestInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskRequestInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
