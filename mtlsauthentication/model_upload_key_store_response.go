/*
Saviynt mTLS Authentication API

mTLS Authentication

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mtlsauthentication

import (
	"encoding/json"
)

// checks if the UploadKeyStoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadKeyStoreResponse{}

// UploadKeyStoreResponse struct for UploadKeyStoreResponse
type UploadKeyStoreResponse struct {
	ErrorCode *int32  `json:"errorCode,omitempty"`
	Message   *string `json:"message,omitempty"`
}

// NewUploadKeyStoreResponse instantiates a new UploadKeyStoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadKeyStoreResponse() *UploadKeyStoreResponse {
	this := UploadKeyStoreResponse{}
	return &this
}

// NewUploadKeyStoreResponseWithDefaults instantiates a new UploadKeyStoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadKeyStoreResponseWithDefaults() *UploadKeyStoreResponse {
	this := UploadKeyStoreResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *UploadKeyStoreResponse) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadKeyStoreResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *UploadKeyStoreResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *UploadKeyStoreResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UploadKeyStoreResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadKeyStoreResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UploadKeyStoreResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UploadKeyStoreResponse) SetMessage(v string) {
	o.Message = &v
}

func (o UploadKeyStoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadKeyStoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableUploadKeyStoreResponse struct {
	value *UploadKeyStoreResponse
	isSet bool
}

func (v NullableUploadKeyStoreResponse) Get() *UploadKeyStoreResponse {
	return v.value
}

func (v *NullableUploadKeyStoreResponse) Set(val *UploadKeyStoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadKeyStoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadKeyStoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadKeyStoreResponse(val *UploadKeyStoreResponse) *NullableUploadKeyStoreResponse {
	return &NullableUploadKeyStoreResponse{value: val, isSet: true}
}

func (v NullableUploadKeyStoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadKeyStoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
