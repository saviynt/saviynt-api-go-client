/*
Entitlements Management API

API for creating, updating, retrieving, and deleting Entitlements data in EIC

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateUpdateEntitlement200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUpdateEntitlement200Response{}

// CreateUpdateEntitlement200Response struct for CreateUpdateEntitlement200Response
type CreateUpdateEntitlement200Response struct {
	Msg *string `json:"msg,omitempty"`
	EntitlementObj *CreateUpdateEntitlement200ResponseEntitlementObj `json:"entitlementObj,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
}

// NewCreateUpdateEntitlement200Response instantiates a new CreateUpdateEntitlement200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpdateEntitlement200Response() *CreateUpdateEntitlement200Response {
	this := CreateUpdateEntitlement200Response{}
	return &this
}

// NewCreateUpdateEntitlement200ResponseWithDefaults instantiates a new CreateUpdateEntitlement200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpdateEntitlement200ResponseWithDefaults() *CreateUpdateEntitlement200Response {
	this := CreateUpdateEntitlement200Response{}
	return &this
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *CreateUpdateEntitlement200Response) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlement200Response) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *CreateUpdateEntitlement200Response) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *CreateUpdateEntitlement200Response) SetMsg(v string) {
	o.Msg = &v
}

// GetEntitlementObj returns the EntitlementObj field value if set, zero value otherwise.
func (o *CreateUpdateEntitlement200Response) GetEntitlementObj() CreateUpdateEntitlement200ResponseEntitlementObj {
	if o == nil || IsNil(o.EntitlementObj) {
		var ret CreateUpdateEntitlement200ResponseEntitlementObj
		return ret
	}
	return *o.EntitlementObj
}

// GetEntitlementObjOk returns a tuple with the EntitlementObj field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlement200Response) GetEntitlementObjOk() (*CreateUpdateEntitlement200ResponseEntitlementObj, bool) {
	if o == nil || IsNil(o.EntitlementObj) {
		return nil, false
	}
	return o.EntitlementObj, true
}

// HasEntitlementObj returns a boolean if a field has been set.
func (o *CreateUpdateEntitlement200Response) HasEntitlementObj() bool {
	if o != nil && !IsNil(o.EntitlementObj) {
		return true
	}

	return false
}

// SetEntitlementObj gets a reference to the given CreateUpdateEntitlement200ResponseEntitlementObj and assigns it to the EntitlementObj field.
func (o *CreateUpdateEntitlement200Response) SetEntitlementObj(v CreateUpdateEntitlement200ResponseEntitlementObj) {
	o.EntitlementObj = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *CreateUpdateEntitlement200Response) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlement200Response) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *CreateUpdateEntitlement200Response) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *CreateUpdateEntitlement200Response) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o CreateUpdateEntitlement200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUpdateEntitlement200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !IsNil(o.EntitlementObj) {
		toSerialize["entitlementObj"] = o.EntitlementObj
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableCreateUpdateEntitlement200Response struct {
	value *CreateUpdateEntitlement200Response
	isSet bool
}

func (v NullableCreateUpdateEntitlement200Response) Get() *CreateUpdateEntitlement200Response {
	return v.value
}

func (v *NullableCreateUpdateEntitlement200Response) Set(val *CreateUpdateEntitlement200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpdateEntitlement200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpdateEntitlement200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpdateEntitlement200Response(val *CreateUpdateEntitlement200Response) *NullableCreateUpdateEntitlement200Response {
	return &NullableCreateUpdateEntitlement200Response{value: val, isSet: true}
}

func (v NullableCreateUpdateEntitlement200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpdateEntitlement200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


