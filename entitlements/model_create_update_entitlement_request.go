/*
Entitlements Management API

API for creating, updating, retrieving, and deleting Entitlements data in EIC

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUpdateEntitlementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUpdateEntitlementRequest{}

// CreateUpdateEntitlementRequest struct for CreateUpdateEntitlementRequest
type CreateUpdateEntitlementRequest struct {
	Endpoint string `json:"endpoint"`
	EntitlementValue string `json:"entitlement_value"`
	Entitlementtype string `json:"entitlementtype"`
	// Additional attributes for the entitlement.
	Entitlementattributes map[string]interface{} `json:"entitlementattributes,omitempty"`
	Entitlementowner1 *string `json:"entitlementowner1,omitempty"`
	Entitlementowner3 *string `json:"entitlementowner3,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
	NewEntitlementValue *string `json:"newEntitlementValue,omitempty"`
	Entitlementcasecheck *bool `json:"entitlementcasecheck,omitempty"`
	EntitlementValuekey *string `json:"entitlement_valuekey,omitempty"`
	UpdatedentitlementValue *string `json:"updatedentitlement_value,omitempty"`
	Entitlementmap *CreateUpdateEntitlementRequestEntitlementmap `json:"entitlementmap,omitempty"`
}

type _CreateUpdateEntitlementRequest CreateUpdateEntitlementRequest

// NewCreateUpdateEntitlementRequest instantiates a new CreateUpdateEntitlementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpdateEntitlementRequest(endpoint string, entitlementValue string, entitlementtype string) *CreateUpdateEntitlementRequest {
	this := CreateUpdateEntitlementRequest{}
	this.Endpoint = endpoint
	this.EntitlementValue = entitlementValue
	this.Entitlementtype = entitlementtype
	var entitlementcasecheck bool = false
	this.Entitlementcasecheck = &entitlementcasecheck
	return &this
}

// NewCreateUpdateEntitlementRequestWithDefaults instantiates a new CreateUpdateEntitlementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpdateEntitlementRequestWithDefaults() *CreateUpdateEntitlementRequest {
	this := CreateUpdateEntitlementRequest{}
	var entitlementcasecheck bool = false
	this.Entitlementcasecheck = &entitlementcasecheck
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *CreateUpdateEntitlementRequest) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *CreateUpdateEntitlementRequest) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetEntitlementValue returns the EntitlementValue field value
func (o *CreateUpdateEntitlementRequest) GetEntitlementValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementValue
}

// GetEntitlementValueOk returns a tuple with the EntitlementValue field value
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementValue, true
}

// SetEntitlementValue sets field value
func (o *CreateUpdateEntitlementRequest) SetEntitlementValue(v string) {
	o.EntitlementValue = v
}

// GetEntitlementtype returns the Entitlementtype field value
func (o *CreateUpdateEntitlementRequest) GetEntitlementtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entitlementtype
}

// GetEntitlementtypeOk returns a tuple with the Entitlementtype field value
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entitlementtype, true
}

// SetEntitlementtype sets field value
func (o *CreateUpdateEntitlementRequest) SetEntitlementtype(v string) {
	o.Entitlementtype = v
}

// GetEntitlementattributes returns the Entitlementattributes field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementattributes() map[string]interface{} {
	if o == nil || IsNil(o.Entitlementattributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Entitlementattributes
}

// GetEntitlementattributesOk returns a tuple with the Entitlementattributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementattributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Entitlementattributes) {
		return map[string]interface{}{}, false
	}
	return o.Entitlementattributes, true
}

// HasEntitlementattributes returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementattributes() bool {
	if o != nil && !IsNil(o.Entitlementattributes) {
		return true
	}

	return false
}

// SetEntitlementattributes gets a reference to the given map[string]interface{} and assigns it to the Entitlementattributes field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementattributes(v map[string]interface{}) {
	o.Entitlementattributes = v
}

// GetEntitlementowner1 returns the Entitlementowner1 field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementowner1() string {
	if o == nil || IsNil(o.Entitlementowner1) {
		var ret string
		return ret
	}
	return *o.Entitlementowner1
}

// GetEntitlementowner1Ok returns a tuple with the Entitlementowner1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementowner1Ok() (*string, bool) {
	if o == nil || IsNil(o.Entitlementowner1) {
		return nil, false
	}
	return o.Entitlementowner1, true
}

// HasEntitlementowner1 returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementowner1() bool {
	if o != nil && !IsNil(o.Entitlementowner1) {
		return true
	}

	return false
}

// SetEntitlementowner1 gets a reference to the given string and assigns it to the Entitlementowner1 field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementowner1(v string) {
	o.Entitlementowner1 = &v
}

// GetEntitlementowner3 returns the Entitlementowner3 field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementowner3() string {
	if o == nil || IsNil(o.Entitlementowner3) {
		var ret string
		return ret
	}
	return *o.Entitlementowner3
}

// GetEntitlementowner3Ok returns a tuple with the Entitlementowner3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementowner3Ok() (*string, bool) {
	if o == nil || IsNil(o.Entitlementowner3) {
		return nil, false
	}
	return o.Entitlementowner3, true
}

// HasEntitlementowner3 returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementowner3() bool {
	if o != nil && !IsNil(o.Entitlementowner3) {
		return true
	}

	return false
}

// SetEntitlementowner3 gets a reference to the given string and assigns it to the Entitlementowner3 field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementowner3(v string) {
	o.Entitlementowner3 = &v
}

// GetEntitlementID returns the EntitlementID field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementID() string {
	if o == nil || IsNil(o.EntitlementID) {
		var ret string
		return ret
	}
	return *o.EntitlementID
}

// GetEntitlementIDOk returns a tuple with the EntitlementID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementID) {
		return nil, false
	}
	return o.EntitlementID, true
}

// HasEntitlementID returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementID() bool {
	if o != nil && !IsNil(o.EntitlementID) {
		return true
	}

	return false
}

// SetEntitlementID gets a reference to the given string and assigns it to the EntitlementID field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementID(v string) {
	o.EntitlementID = &v
}

// GetNewEntitlementValue returns the NewEntitlementValue field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetNewEntitlementValue() string {
	if o == nil || IsNil(o.NewEntitlementValue) {
		var ret string
		return ret
	}
	return *o.NewEntitlementValue
}

// GetNewEntitlementValueOk returns a tuple with the NewEntitlementValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetNewEntitlementValueOk() (*string, bool) {
	if o == nil || IsNil(o.NewEntitlementValue) {
		return nil, false
	}
	return o.NewEntitlementValue, true
}

// HasNewEntitlementValue returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasNewEntitlementValue() bool {
	if o != nil && !IsNil(o.NewEntitlementValue) {
		return true
	}

	return false
}

// SetNewEntitlementValue gets a reference to the given string and assigns it to the NewEntitlementValue field.
func (o *CreateUpdateEntitlementRequest) SetNewEntitlementValue(v string) {
	o.NewEntitlementValue = &v
}

// GetEntitlementcasecheck returns the Entitlementcasecheck field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementcasecheck() bool {
	if o == nil || IsNil(o.Entitlementcasecheck) {
		var ret bool
		return ret
	}
	return *o.Entitlementcasecheck
}

// GetEntitlementcasecheckOk returns a tuple with the Entitlementcasecheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementcasecheckOk() (*bool, bool) {
	if o == nil || IsNil(o.Entitlementcasecheck) {
		return nil, false
	}
	return o.Entitlementcasecheck, true
}

// HasEntitlementcasecheck returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementcasecheck() bool {
	if o != nil && !IsNil(o.Entitlementcasecheck) {
		return true
	}

	return false
}

// SetEntitlementcasecheck gets a reference to the given bool and assigns it to the Entitlementcasecheck field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementcasecheck(v bool) {
	o.Entitlementcasecheck = &v
}

// GetEntitlementValuekey returns the EntitlementValuekey field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementValuekey() string {
	if o == nil || IsNil(o.EntitlementValuekey) {
		var ret string
		return ret
	}
	return *o.EntitlementValuekey
}

// GetEntitlementValuekeyOk returns a tuple with the EntitlementValuekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementValuekeyOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementValuekey) {
		return nil, false
	}
	return o.EntitlementValuekey, true
}

// HasEntitlementValuekey returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementValuekey() bool {
	if o != nil && !IsNil(o.EntitlementValuekey) {
		return true
	}

	return false
}

// SetEntitlementValuekey gets a reference to the given string and assigns it to the EntitlementValuekey field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementValuekey(v string) {
	o.EntitlementValuekey = &v
}

// GetUpdatedentitlementValue returns the UpdatedentitlementValue field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetUpdatedentitlementValue() string {
	if o == nil || IsNil(o.UpdatedentitlementValue) {
		var ret string
		return ret
	}
	return *o.UpdatedentitlementValue
}

// GetUpdatedentitlementValueOk returns a tuple with the UpdatedentitlementValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetUpdatedentitlementValueOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedentitlementValue) {
		return nil, false
	}
	return o.UpdatedentitlementValue, true
}

// HasUpdatedentitlementValue returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasUpdatedentitlementValue() bool {
	if o != nil && !IsNil(o.UpdatedentitlementValue) {
		return true
	}

	return false
}

// SetUpdatedentitlementValue gets a reference to the given string and assigns it to the UpdatedentitlementValue field.
func (o *CreateUpdateEntitlementRequest) SetUpdatedentitlementValue(v string) {
	o.UpdatedentitlementValue = &v
}

// GetEntitlementmap returns the Entitlementmap field value if set, zero value otherwise.
func (o *CreateUpdateEntitlementRequest) GetEntitlementmap() CreateUpdateEntitlementRequestEntitlementmap {
	if o == nil || IsNil(o.Entitlementmap) {
		var ret CreateUpdateEntitlementRequestEntitlementmap
		return ret
	}
	return *o.Entitlementmap
}

// GetEntitlementmapOk returns a tuple with the Entitlementmap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateEntitlementRequest) GetEntitlementmapOk() (*CreateUpdateEntitlementRequestEntitlementmap, bool) {
	if o == nil || IsNil(o.Entitlementmap) {
		return nil, false
	}
	return o.Entitlementmap, true
}

// HasEntitlementmap returns a boolean if a field has been set.
func (o *CreateUpdateEntitlementRequest) HasEntitlementmap() bool {
	if o != nil && !IsNil(o.Entitlementmap) {
		return true
	}

	return false
}

// SetEntitlementmap gets a reference to the given CreateUpdateEntitlementRequestEntitlementmap and assigns it to the Entitlementmap field.
func (o *CreateUpdateEntitlementRequest) SetEntitlementmap(v CreateUpdateEntitlementRequestEntitlementmap) {
	o.Entitlementmap = &v
}

func (o CreateUpdateEntitlementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUpdateEntitlementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoint"] = o.Endpoint
	toSerialize["entitlement_value"] = o.EntitlementValue
	toSerialize["entitlementtype"] = o.Entitlementtype
	if !IsNil(o.Entitlementattributes) {
		toSerialize["entitlementattributes"] = o.Entitlementattributes
	}
	if !IsNil(o.Entitlementowner1) {
		toSerialize["entitlementowner1"] = o.Entitlementowner1
	}
	if !IsNil(o.Entitlementowner3) {
		toSerialize["entitlementowner3"] = o.Entitlementowner3
	}
	if !IsNil(o.EntitlementID) {
		toSerialize["entitlementID"] = o.EntitlementID
	}
	if !IsNil(o.NewEntitlementValue) {
		toSerialize["newEntitlementValue"] = o.NewEntitlementValue
	}
	if !IsNil(o.Entitlementcasecheck) {
		toSerialize["entitlementcasecheck"] = o.Entitlementcasecheck
	}
	if !IsNil(o.EntitlementValuekey) {
		toSerialize["entitlement_valuekey"] = o.EntitlementValuekey
	}
	if !IsNil(o.UpdatedentitlementValue) {
		toSerialize["updatedentitlement_value"] = o.UpdatedentitlementValue
	}
	if !IsNil(o.Entitlementmap) {
		toSerialize["entitlementmap"] = o.Entitlementmap
	}
	return toSerialize, nil
}

func (o *CreateUpdateEntitlementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoint",
		"entitlement_value",
		"entitlementtype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUpdateEntitlementRequest := _CreateUpdateEntitlementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUpdateEntitlementRequest)

	if err != nil {
		return err
	}

	*o = CreateUpdateEntitlementRequest(varCreateUpdateEntitlementRequest)

	return err
}

type NullableCreateUpdateEntitlementRequest struct {
	value *CreateUpdateEntitlementRequest
	isSet bool
}

func (v NullableCreateUpdateEntitlementRequest) Get() *CreateUpdateEntitlementRequest {
	return v.value
}

func (v *NullableCreateUpdateEntitlementRequest) Set(val *CreateUpdateEntitlementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpdateEntitlementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpdateEntitlementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpdateEntitlementRequest(val *CreateUpdateEntitlementRequest) *NullableCreateUpdateEntitlementRequest {
	return &NullableCreateUpdateEntitlementRequest{value: val, isSet: true}
}

func (v NullableCreateUpdateEntitlementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpdateEntitlementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


