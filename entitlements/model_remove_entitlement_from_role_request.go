/*
Entitlements Management API

API for creating, updating, retrieving, and deleting Entitlements data in EIC

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemoveEntitlementFromRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveEntitlementFromRoleRequest{}

// RemoveEntitlementFromRoleRequest struct for RemoveEntitlementFromRoleRequest
type RemoveEntitlementFromRoleRequest struct {
	// The person requesting the removal (optional).
	Requestor *string
	// The name of the role. If both rolename and rolekey are provided, rolekey takes precedence.
	Rolename *string
	// The key of the role. Takes precedence over rolename if provided.
	Rolekey *string
	// Optional comments about the removal.
	Comments *string
	Entitlements []RemoveEntitlementFromRoleRequestEntitlementsInner
}

// NewRemoveEntitlementFromRoleRequest instantiates a new RemoveEntitlementFromRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveEntitlementFromRoleRequest() *RemoveEntitlementFromRoleRequest {
	this := RemoveEntitlementFromRoleRequest{}
	return &this
}

// NewRemoveEntitlementFromRoleRequestWithDefaults instantiates a new RemoveEntitlementFromRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveEntitlementFromRoleRequestWithDefaults() *RemoveEntitlementFromRoleRequest {
	this := RemoveEntitlementFromRoleRequest{}
	return &this
}

// GetRequestor returns the Requestor field value if set, zero value otherwise.
func (o *RemoveEntitlementFromRoleRequest) GetRequestor() string {
	if o == nil || IsNil(o.Requestor) {
		var ret string
		return ret
	}
	return *o.Requestor
}

// GetRequestorOk returns a tuple with the Requestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveEntitlementFromRoleRequest) GetRequestorOk() (*string, bool) {
	if o == nil || IsNil(o.Requestor) {
		return nil, false
	}
	return o.Requestor, true
}

// HasRequestor returns a boolean if a field has been set.
func (o *RemoveEntitlementFromRoleRequest) HasRequestor() bool {
	if o != nil && !IsNil(o.Requestor) {
		return true
	}

	return false
}

// SetRequestor gets a reference to the given string and assigns it to the Requestor field.
func (o *RemoveEntitlementFromRoleRequest) SetRequestor(v string) {
	o.Requestor = &v
}

// GetRolename returns the Rolename field value if set, zero value otherwise.
func (o *RemoveEntitlementFromRoleRequest) GetRolename() string {
	if o == nil || IsNil(o.Rolename) {
		var ret string
		return ret
	}
	return *o.Rolename
}

// GetRolenameOk returns a tuple with the Rolename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveEntitlementFromRoleRequest) GetRolenameOk() (*string, bool) {
	if o == nil || IsNil(o.Rolename) {
		return nil, false
	}
	return o.Rolename, true
}

// HasRolename returns a boolean if a field has been set.
func (o *RemoveEntitlementFromRoleRequest) HasRolename() bool {
	if o != nil && !IsNil(o.Rolename) {
		return true
	}

	return false
}

// SetRolename gets a reference to the given string and assigns it to the Rolename field.
func (o *RemoveEntitlementFromRoleRequest) SetRolename(v string) {
	o.Rolename = &v
}

// GetRolekey returns the Rolekey field value if set, zero value otherwise.
func (o *RemoveEntitlementFromRoleRequest) GetRolekey() string {
	if o == nil || IsNil(o.Rolekey) {
		var ret string
		return ret
	}
	return *o.Rolekey
}

// GetRolekeyOk returns a tuple with the Rolekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveEntitlementFromRoleRequest) GetRolekeyOk() (*string, bool) {
	if o == nil || IsNil(o.Rolekey) {
		return nil, false
	}
	return o.Rolekey, true
}

// HasRolekey returns a boolean if a field has been set.
func (o *RemoveEntitlementFromRoleRequest) HasRolekey() bool {
	if o != nil && !IsNil(o.Rolekey) {
		return true
	}

	return false
}

// SetRolekey gets a reference to the given string and assigns it to the Rolekey field.
func (o *RemoveEntitlementFromRoleRequest) SetRolekey(v string) {
	o.Rolekey = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RemoveEntitlementFromRoleRequest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveEntitlementFromRoleRequest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RemoveEntitlementFromRoleRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RemoveEntitlementFromRoleRequest) SetComments(v string) {
	o.Comments = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *RemoveEntitlementFromRoleRequest) GetEntitlements() []RemoveEntitlementFromRoleRequestEntitlementsInner {
	if o == nil || IsNil(o.Entitlements) {
		var ret []RemoveEntitlementFromRoleRequestEntitlementsInner
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveEntitlementFromRoleRequest) GetEntitlementsOk() ([]RemoveEntitlementFromRoleRequestEntitlementsInner, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *RemoveEntitlementFromRoleRequest) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []RemoveEntitlementFromRoleRequestEntitlementsInner and assigns it to the Entitlements field.
func (o *RemoveEntitlementFromRoleRequest) SetEntitlements(v []RemoveEntitlementFromRoleRequestEntitlementsInner) {
	o.Entitlements = v
}

func (o RemoveEntitlementFromRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveEntitlementFromRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Requestor) {
		toSerialize["requestor"] = o.Requestor
	}
	if !IsNil(o.Rolename) {
		toSerialize["rolename"] = o.Rolename
	}
	if !IsNil(o.Rolekey) {
		toSerialize["rolekey"] = o.Rolekey
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	return toSerialize, nil
}

type NullableRemoveEntitlementFromRoleRequest struct {
	value *RemoveEntitlementFromRoleRequest
	isSet bool
}

func (v NullableRemoveEntitlementFromRoleRequest) Get() *RemoveEntitlementFromRoleRequest {
	return v.value
}

func (v *NullableRemoveEntitlementFromRoleRequest) Set(val *RemoveEntitlementFromRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveEntitlementFromRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveEntitlementFromRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveEntitlementFromRoleRequest(val *RemoveEntitlementFromRoleRequest) *NullableRemoveEntitlementFromRoleRequest {
	return &NullableRemoveEntitlementFromRoleRequest{value: val, isSet: true}
}

func (v NullableRemoveEntitlementFromRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveEntitlementFromRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


