/*
Entitlements Management API

Testing EntitlementsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"net/http"
	"testing"

	openapiclient "github.com/saviynt/saviynt-api-go-client/entitlements"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func StringPtr(s string) *string {
	return &s
}
func Test_openapi_EntitlementsAPIService(t *testing.T) {

	cfg := openapiclient.NewConfiguration()
	cfg.Servers = openapiclient.ServerConfigurations{
		{
			URL: "https://dev-scrum-intgn.saviyntcloud.com",
		},
	}
	cfg.AddDefaultHeader("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWwiOiJINHNJQUFBQUFBQUFBSlZTdjA4VVFSajlkcjBMUmhJRUUwd3NzQUU3czVkb2VZMzhrbURXeFhCY2c0bG1idmRqSFppZFdXWm00YTR4VjBGQmdSRklTUHdYK0UrdzhROHdVTmhTMlwvck53ckduRFhHcXpadTM3NzN2ZTNOMkJYV2o0V1dxR1JjbXlFV1JjaG1ZWEhPWkdvd0x6VzB2S0F6cUJHM0pXQ3FKYlVMZytuZytlQ0g0UExId0tOeGtPNndobUV3Yks1MU5qRzJ6cStHRjB1bU40b1ptR2U0cXZSWGNhc2RLNDE4R2xiVDN5b2VSZFpoZ2Nhd0thU01sRjdzNTE1aXN3M2lGaFNyZWN0QmtURGNvTFdmQ0RGTkhVTEtPd0NTRVVWYllUNHBjT1JvTEQ2XC9ERnBhTFJndHRNNFQ3T1RPRzB2MHpTY3U2Nk83ZXhaUTB3VFo4aGxvMzkralE3cDQ1YXVCMGdua2xCRTNObFRRemJabXBoRzl3WjA3NlwvYW12UHc2XC85ZHMrQU8zaytkM1wvVlBpVE9laWZmXC9qOXRGeTBGMXQ0UEJTOW9qVzdPYVdacUpUWE5Ecm5uNmZ2ams2dTl0XC9mSTJmSGVQM1wvZmN6TTNteXVONit5bkdsbTFWQkhKTHRibzIrZnhPZnVGaCswMEF0YVBNc0Ywb3VTRnBOYmkwcVl4cTFwSlFiN3R2QmdkU1ZjXC9EaTc4SFk1TWc0Y0cwREwwZHBTNUJoMWxtUmNVcEN4Y2crdXdDQlVWTlwvQnJ5XC9mRDZjdlNQUU4xSGVZS0pCcUdLOUlVWkYxVU8rZG5VeU5IbDhlbEVNTkh2Z2ZvYSt1a1NRREFBQT0iLCJzdWIiOiJhZG1pbiIsImV4cCI6MTc0MTI4NTE3NiwiaWF0IjoxNzQxMjgxNTc2LCJyb2xlcyI6WyJST0xFX0FETUlOIiwiUk9MRV9JTlRHTiJdfQ.wxRtwGGf_mW6w4Net9D-Fs6b87GKprl0OqH93wIhua8")
	cfg.AddDefaultHeader("Content-Type", "application/json")
	cfg.HTTPClient = http.DefaultClient

	apiClient := openapiclient.NewAPIClient(cfg)
	ctx := context.Background()

	// Test GetEntitlements
	t.Run("Test GetEntitlements without parameters", func(t *testing.T) {
		resp, httpRes, err := apiClient.EntitlementsAPI.GetEntitlements(ctx).Execute()
		require.NoError(t, err, "Unexpected error in GetEntitlements API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	// Test GetChildEntitlements
	t.Run("Test GetChildEntitlements", func(t *testing.T) {
		resp, httpRes, err := apiClient.EntitlementsAPI.GetChildEntitlements(ctx).
			Endpointname("AD_Rashid").
			Max(5).
			Offset(0).
			Execute()

		require.NoError(t, err, "Unexpected error in GetChildEntitlements API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	// Test CreateUpdateEntitlement
	t.Run("Test CreateUpdateEntitlement", func(t *testing.T) {
		NewValue := "CN=adtestrequest123,OU=DocTeamOU,OU=SaviyntTeams,DC=saviyntlabs,DC=org1"
		createReq := openapiclient.CreateUpdateEntitlementRequest{
			Endpoint:            "AD_Rashid",
			Entitlementtype:     "memberOf",
			EntitlementValue:    "CN=adtestrequest123,OU=DocTeamOU,OU=SaviyntTeams,DC=saviyntlabs,DC=org",
			NewEntitlementValue: &NewValue,
		}
		resp, httpRes, err := apiClient.EntitlementsAPI.CreateUpdateEntitlement(ctx).
			CreateUpdateEntitlementRequest(createReq).
			Execute()

		require.NoError(t, err, "Unexpected error in CreateUpdateEntitlement API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	// Test GetEntitlementValuesForEndpoint
	t.Run("Test GetEntitlementValuesForEndpoint", func(t *testing.T) {
		getReq := openapiclient.GetEntitlementValuesForEndpointRequest{
			Endpoint:        "AD_Rashid",
			EntitlementType: openapiclient.PtrString("memberOf"), // Optional field
		}
		resp, httpRes, err := apiClient.EntitlementsAPI.GetEntitlementValuesForEndpoint(ctx).GetEntitlementValuesForEndpointRequest(getReq).Execute()

		require.NoError(t, err, "Unexpected error in GetEntitlementValuesForEndpoint API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	// Test GetListOfPrivileges
	t.Run("Test GetListOfPrivileges", func(t *testing.T) {
		resp, httpRes, err := apiClient.EntitlementsAPI.GetListOfPrivilegesForEntitlementType(ctx).
			Endpoint("AD_Rashid").
			Entitlementtype("memberOf").
			Execute()

		require.NoError(t, err, "Unexpected error in GetListOfPrivileges API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

	// Test RemoveEntitlementFromRole
	t.Run("Test RemoveEntitlementFromRole", func(t *testing.T) {
		entitlement_value := "CN=adtestrequest123,OU=DocTeamOU,OU=SaviyntTeams,DC=saviyntlabs,DC=org"
		entitlement_type := "memberOf"
		entitlment_endpoint := "AD_Rashid"
		req := openapiclient.RemoveEntitlementFromRoleRequest{
			Requestor: StringPtr("admin"),
			Rolename:  StringPtr("Harshit Verma"),
			Entitlements: []openapiclient.RemoveEntitlementFromRoleRequestEntitlementsInner{
				{
					Entitlementvalue: entitlement_value,
					Entitlementtype:  entitlement_type,
					Endpoint:         entitlment_endpoint,
				},
			},
		}

		resp, httpRes, err := apiClient.EntitlementsAPI.RemoveEntitlementFromRole(ctx).
			RemoveEntitlementFromRoleRequest(req).
			Execute()

		require.NoError(t, err, "Unexpected error in RemoveEntitlementFromRole API")
		require.NotNil(t, resp, "Response should not be nil")
		assert.Equal(t, 200, httpRes.StatusCode, "Expected HTTP status 200")
	})

}
