/*
Saviynt Transport API

Transporting Packages: https://docs.saviyntcloud.com/bundle/EIC-Admin-AMS/page/Content/Chapter07-General-Administrator/Transporting-Packages.htm

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transport

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportTransportPackageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportTransportPackageRequest{}

// ImportTransportPackageRequest struct for ImportTransportPackageRequest
type ImportTransportPackageRequest struct {
	// Complete path of the package that needs to be imported
	Packagetoimport string `json:"packagetoimport"`
	// username of the user importing the package
	Updateuser            *string `json:"updateuser,omitempty"`
	Businessjustification *string `json:"businessjustification,omitempty"`
}

type _ImportTransportPackageRequest ImportTransportPackageRequest

// NewImportTransportPackageRequest instantiates a new ImportTransportPackageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTransportPackageRequest(packagetoimport string) *ImportTransportPackageRequest {
	this := ImportTransportPackageRequest{}
	this.Packagetoimport = packagetoimport
	return &this
}

// NewImportTransportPackageRequestWithDefaults instantiates a new ImportTransportPackageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTransportPackageRequestWithDefaults() *ImportTransportPackageRequest {
	this := ImportTransportPackageRequest{}
	return &this
}

// GetPackagetoimport returns the Packagetoimport field value
func (o *ImportTransportPackageRequest) GetPackagetoimport() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Packagetoimport
}

// GetPackagetoimportOk returns a tuple with the Packagetoimport field value
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageRequest) GetPackagetoimportOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Packagetoimport, true
}

// SetPackagetoimport sets field value
func (o *ImportTransportPackageRequest) SetPackagetoimport(v string) {
	o.Packagetoimport = v
}

// GetUpdateuser returns the Updateuser field value if set, zero value otherwise.
func (o *ImportTransportPackageRequest) GetUpdateuser() string {
	if o == nil || IsNil(o.Updateuser) {
		var ret string
		return ret
	}
	return *o.Updateuser
}

// GetUpdateuserOk returns a tuple with the Updateuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageRequest) GetUpdateuserOk() (*string, bool) {
	if o == nil || IsNil(o.Updateuser) {
		return nil, false
	}
	return o.Updateuser, true
}

// HasUpdateuser returns a boolean if a field has been set.
func (o *ImportTransportPackageRequest) HasUpdateuser() bool {
	if o != nil && !IsNil(o.Updateuser) {
		return true
	}

	return false
}

// SetUpdateuser gets a reference to the given string and assigns it to the Updateuser field.
func (o *ImportTransportPackageRequest) SetUpdateuser(v string) {
	o.Updateuser = &v
}

// GetBusinessjustification returns the Businessjustification field value if set, zero value otherwise.
func (o *ImportTransportPackageRequest) GetBusinessjustification() string {
	if o == nil || IsNil(o.Businessjustification) {
		var ret string
		return ret
	}
	return *o.Businessjustification
}

// GetBusinessjustificationOk returns a tuple with the Businessjustification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageRequest) GetBusinessjustificationOk() (*string, bool) {
	if o == nil || IsNil(o.Businessjustification) {
		return nil, false
	}
	return o.Businessjustification, true
}

// HasBusinessjustification returns a boolean if a field has been set.
func (o *ImportTransportPackageRequest) HasBusinessjustification() bool {
	if o != nil && !IsNil(o.Businessjustification) {
		return true
	}

	return false
}

// SetBusinessjustification gets a reference to the given string and assigns it to the Businessjustification field.
func (o *ImportTransportPackageRequest) SetBusinessjustification(v string) {
	o.Businessjustification = &v
}

func (o ImportTransportPackageRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportTransportPackageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packagetoimport"] = o.Packagetoimport
	if !IsNil(o.Updateuser) {
		toSerialize["updateuser"] = o.Updateuser
	}
	if !IsNil(o.Businessjustification) {
		toSerialize["businessjustification"] = o.Businessjustification
	}
	return toSerialize, nil
}

func (o *ImportTransportPackageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packagetoimport",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportTransportPackageRequest := _ImportTransportPackageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportTransportPackageRequest)

	if err != nil {
		return err
	}

	*o = ImportTransportPackageRequest(varImportTransportPackageRequest)

	return err
}

type NullableImportTransportPackageRequest struct {
	value *ImportTransportPackageRequest
	isSet bool
}

func (v NullableImportTransportPackageRequest) Get() *ImportTransportPackageRequest {
	return v.value
}

func (v *NullableImportTransportPackageRequest) Set(val *ImportTransportPackageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTransportPackageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTransportPackageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTransportPackageRequest(val *ImportTransportPackageRequest) *NullableImportTransportPackageRequest {
	return &NullableImportTransportPackageRequest{value: val, isSet: true}
}

func (v NullableImportTransportPackageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTransportPackageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
