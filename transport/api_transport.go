/*
Saviynt Transport API

Transporting Packages: https://docs.saviyntcloud.com/bundle/EIC-Admin-AMS/page/Content/Chapter07-General-Administrator/Transporting-Packages.htm

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transport

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// TransportAPIService TransportAPI service
type TransportAPIService service

type ApiExportTransportPackageRequest struct {
	ctx                           context.Context
	ApiService                    *TransportAPIService
	exportTransportPackageRequest *ExportTransportPackageRequest
}

func (r ApiExportTransportPackageRequest) ExportTransportPackageRequest(exportTransportPackageRequest ExportTransportPackageRequest) ApiExportTransportPackageRequest {
	r.exportTransportPackageRequest = &exportTransportPackageRequest
	return r
}

func (r ApiExportTransportPackageRequest) Execute() (*ExportTransportPackageResponse, *http.Response, error) {
	return r.ApiService.ExportTransportPackageExecute(r)
}

/*
ExportTransportPackage Export Transport Package

This API creates a compressed file containing objects specified for T2P migration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExportTransportPackageRequest
*/
func (a *TransportAPIService) ExportTransportPackage(ctx context.Context) ApiExportTransportPackageRequest {
	return ApiExportTransportPackageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExportTransportPackageResponse
func (a *TransportAPIService) ExportTransportPackageExecute(r ApiExportTransportPackageRequest) (*ExportTransportPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTransportPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransportAPIService.ExportTransportPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/exportTransportPackage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTransportPackageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImportTransportPackageRequest struct {
	ctx                           context.Context
	ApiService                    *TransportAPIService
	importTransportPackageRequest *ImportTransportPackageRequest
}

func (r ApiImportTransportPackageRequest) ImportTransportPackageRequest(importTransportPackageRequest ImportTransportPackageRequest) ApiImportTransportPackageRequest {
	r.importTransportPackageRequest = &importTransportPackageRequest
	return r
}

func (r ApiImportTransportPackageRequest) Execute() (*ImportTransportPackageResponse, *http.Response, error) {
	return r.ApiService.ImportTransportPackageExecute(r)
}

/*
ImportTransportPackage Import Transport Package

This API imports a compressed file containing objects specified for T2P migration.

Supported objects:

savRoles, emailTemplate, roles, analyticsV1, analyticsV2, globalConfig, workflows, connection, appOnboarding, userGroups, scanRules, organizations, securitySystems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiImportTransportPackageRequest
*/
func (a *TransportAPIService) ImportTransportPackage(ctx context.Context) ApiImportTransportPackageRequest {
	return ApiImportTransportPackageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ImportTransportPackageResponse
func (a *TransportAPIService) ImportTransportPackageExecute(r ApiImportTransportPackageRequest) (*ImportTransportPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImportTransportPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransportAPIService.ImportTransportPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/importTransportPackage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.importTransportPackageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransportPackageStatusRequest struct {
	ctx                           context.Context
	ApiService                    *TransportAPIService
	transportPackageStatusRequest *TransportPackageStatusRequest
}

func (r ApiTransportPackageStatusRequest) TransportPackageStatusRequest(transportPackageStatusRequest TransportPackageStatusRequest) ApiTransportPackageStatusRequest {
	r.transportPackageStatusRequest = &transportPackageStatusRequest
	return r
}

func (r ApiTransportPackageStatusRequest) Execute() (*TransportPackageStatusResponse, *http.Response, error) {
	return r.ApiService.TransportPackageStatusExecute(r)
}

/*
TransportPackageStatus Transport Package Status

This API obtains the status of the transport request (import, export, or transfer), and helps in confirming whether the transport was completed successfully or failed.

Note: This API returns the status of only those requests that have been processed using the Enhanced Transport feature.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTransportPackageStatusRequest
*/
func (a *TransportAPIService) TransportPackageStatus(ctx context.Context) ApiTransportPackageStatusRequest {
	return ApiTransportPackageStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TransportPackageStatusResponse
func (a *TransportAPIService) TransportPackageStatusExecute(r ApiTransportPackageStatusRequest) (*TransportPackageStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransportPackageStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransportAPIService.TransportPackageStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/transportPackageStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transportPackageStatusRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
