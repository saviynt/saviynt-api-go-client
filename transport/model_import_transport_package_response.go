/*
Saviynt Transport API

Transporting Packages: https://docs.saviyntcloud.com/bundle/EIC-Admin-AMS/page/Content/Chapter07-General-Administrator/Transporting-Packages.htm

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transport

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportTransportPackageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportTransportPackageResponse{}

// ImportTransportPackageResponse struct for ImportTransportPackageResponse
type ImportTransportPackageResponse struct {
	Msg            string  `json:"msg"`
	RequestId      *string `json:"requestId,omitempty"`
	MsgDescription *string `json:"msgDescription,omitempty"`
	Errorcode      int32   `json:"errorcode"`
}

type _ImportTransportPackageResponse ImportTransportPackageResponse

// NewImportTransportPackageResponse instantiates a new ImportTransportPackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTransportPackageResponse(msg string, errorcode int32) *ImportTransportPackageResponse {
	this := ImportTransportPackageResponse{}
	this.Msg = msg
	this.Errorcode = errorcode
	return &this
}

// NewImportTransportPackageResponseWithDefaults instantiates a new ImportTransportPackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTransportPackageResponseWithDefaults() *ImportTransportPackageResponse {
	this := ImportTransportPackageResponse{}
	return &this
}

// GetMsg returns the Msg field value
func (o *ImportTransportPackageResponse) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageResponse) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *ImportTransportPackageResponse) SetMsg(v string) {
	o.Msg = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ImportTransportPackageResponse) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ImportTransportPackageResponse) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ImportTransportPackageResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetMsgDescription returns the MsgDescription field value if set, zero value otherwise.
func (o *ImportTransportPackageResponse) GetMsgDescription() string {
	if o == nil || IsNil(o.MsgDescription) {
		var ret string
		return ret
	}
	return *o.MsgDescription
}

// GetMsgDescriptionOk returns a tuple with the MsgDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageResponse) GetMsgDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MsgDescription) {
		return nil, false
	}
	return o.MsgDescription, true
}

// HasMsgDescription returns a boolean if a field has been set.
func (o *ImportTransportPackageResponse) HasMsgDescription() bool {
	if o != nil && !IsNil(o.MsgDescription) {
		return true
	}

	return false
}

// SetMsgDescription gets a reference to the given string and assigns it to the MsgDescription field.
func (o *ImportTransportPackageResponse) SetMsgDescription(v string) {
	o.MsgDescription = &v
}

// GetErrorcode returns the Errorcode field value
func (o *ImportTransportPackageResponse) GetErrorcode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Errorcode
}

// GetErrorcodeOk returns a tuple with the Errorcode field value
// and a boolean to check if the value has been set.
func (o *ImportTransportPackageResponse) GetErrorcodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errorcode, true
}

// SetErrorcode sets field value
func (o *ImportTransportPackageResponse) SetErrorcode(v int32) {
	o.Errorcode = v
}

func (o ImportTransportPackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportTransportPackageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msg"] = o.Msg
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.MsgDescription) {
		toSerialize["msgDescription"] = o.MsgDescription
	}
	toSerialize["errorcode"] = o.Errorcode
	return toSerialize, nil
}

func (o *ImportTransportPackageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msg",
		"errorcode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportTransportPackageResponse := _ImportTransportPackageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportTransportPackageResponse)

	if err != nil {
		return err
	}

	*o = ImportTransportPackageResponse(varImportTransportPackageResponse)

	return err
}

type NullableImportTransportPackageResponse struct {
	value *ImportTransportPackageResponse
	isSet bool
}

func (v NullableImportTransportPackageResponse) Get() *ImportTransportPackageResponse {
	return v.value
}

func (v *NullableImportTransportPackageResponse) Set(val *ImportTransportPackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTransportPackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTransportPackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTransportPackageResponse(val *ImportTransportPackageResponse) *NullableImportTransportPackageResponse {
	return &NullableImportTransportPackageResponse{value: val, isSet: true}
}

func (v NullableImportTransportPackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTransportPackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
